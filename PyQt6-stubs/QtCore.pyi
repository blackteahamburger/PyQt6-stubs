# The PEP 484 type hints stub file for the QtCore module.
#
# Generated by SIP 6.12.0
#
# Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
#
# This file is part of PyQt6.
#
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file.  Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
#
# If you do not wish to use this file under the terms of the GPL version 3.0
# then you may purchase a commercial license.  For more information contact
# info@riverbankcomputing.com.
#
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

import collections
import collections.abc

# Support for QDate, QDateTime and QTime.
import datetime
import enum
import typing
from typing import Any
from warnings import deprecated

import PyQt6.sip

# Support for new-style signals and slots.
class pyqtSignal:
    signatures: tuple[str, ...] = ...

    def __init__(self, *types: typing.Any, name: str = ...) -> None: ...
    @typing.overload
    def __get__(self, instance: None, owner: type[QObject]) -> pyqtSignal: ...
    @typing.overload
    def __get__(
        self, instance: QObject, owner: type[QObject]
    ) -> pyqtBoundSignal: ...

class pyqtBoundSignal:
    signal: str = ...

    def __getitem__(self, key: object) -> pyqtBoundSignal: ...
    def connect(self, slot: PYQT_SLOT) -> QMetaObject.Connection: ...
    @typing.overload
    def disconnect(self) -> None: ...
    @typing.overload
    def disconnect(self, slot: PYQT_SLOT | QMetaObject.Connection) -> None: ...
    def emit(self, *args: typing.Any) -> None: ...

FuncT = typing.TypeVar(
    "FuncT", bound=collections.abc.Callable[..., typing.Any]
)

def pyqtSlot(
    *types: typing.Any, name: str | None = ..., result: str | None = ...
) -> collections.abc.Callable[[FuncT], FuncT]: ...

# For QObject.findChild() and QObject.findChildren().
QObjectT = typing.TypeVar("QObjectT", bound=QObject)

# Convenient type aliases.
type PYQT_SIGNAL = pyqtSignal | pyqtBoundSignal
type PYQT_SLOT = collections.abc.Callable[..., Any] | pyqtBoundSignal

class QtMsgType(enum.Enum):
    QtDebugMsg = ...
    QtWarningMsg = ...
    QtCriticalMsg = ...
    QtFatalMsg = ...
    QtSystemMsg = ...
    QtInfoMsg = ...

class QCborKnownTags(enum.Enum):
    DateTimeString = ...
    UnixTime_t = ...
    PositiveBignum = ...
    NegativeBignum = ...
    Decimal = ...
    Bigfloat = ...
    COSE_Encrypt0 = ...
    COSE_Mac0 = ...
    COSE_Sign1 = ...
    ExpectedBase64url = ...
    ExpectedBase64 = ...
    ExpectedBase16 = ...
    EncodedCbor = ...
    Url = ...
    Base64url = ...
    Base64 = ...
    RegularExpression = ...
    MimeMessage = ...
    Uuid = ...
    COSE_Encrypt = ...
    COSE_Mac = ...
    COSE_Sign = ...
    Signature = ...

class QCborSimpleType(enum.Enum):
    False_ = ...
    True_ = ...
    Null = ...
    Undefined = ...

class Qt(PyQt6.sip.simplewrapper):
    class ContextMenuTrigger(enum.Enum):
        Press = ...
        Release = ...

    class PermissionStatus(enum.Enum):
        Undetermined = ...
        Granted = ...
        Denied = ...

    class ColorScheme(enum.Enum):
        Unknown = ...
        Light = ...
        Dark = ...

    class HighDpiScaleFactorRoundingPolicy(enum.Enum):
        Round = ...
        Ceil = ...
        Floor = ...
        RoundPreferFloor = ...
        PassThrough = ...

    class ChecksumType(enum.Enum):
        ChecksumIso3309 = ...
        ChecksumItuV41 = ...

    class EnterKeyType(enum.Enum):
        EnterKeyDefault = ...
        EnterKeyReturn = ...
        EnterKeyDone = ...
        EnterKeyGo = ...
        EnterKeySend = ...
        EnterKeySearch = ...
        EnterKeyNext = ...
        EnterKeyPrevious = ...

    class ItemSelectionOperation(enum.Enum):
        ReplaceSelection = ...
        AddToSelection = ...

    class TabFocusBehavior(enum.Enum):
        NoTabFocus = ...
        TabFocusTextControls = ...
        TabFocusListControls = ...
        TabFocusAllControls = ...

    class MouseEventFlag(enum.Flag):
        MouseEventCreatedDoubleClick = ...

    class MouseEventSource(enum.Enum):
        MouseEventNotSynthesized = ...
        MouseEventSynthesizedBySystem = ...
        MouseEventSynthesizedByQt = ...
        MouseEventSynthesizedByApplication = ...

    class ScrollPhase(enum.Enum):
        ScrollBegin = ...
        ScrollUpdate = ...
        ScrollEnd = ...
        NoScrollPhase = ...
        ScrollMomentum = ...

    class NativeGestureType(enum.Enum):
        BeginNativeGesture = ...
        EndNativeGesture = ...
        PanNativeGesture = ...
        ZoomNativeGesture = ...
        SmartZoomNativeGesture = ...
        RotateNativeGesture = ...
        SwipeNativeGesture = ...

    class Edge(enum.Flag):
        TopEdge = ...
        LeftEdge = ...
        RightEdge = ...
        BottomEdge = ...

    class ApplicationState(enum.Flag):
        ApplicationSuspended = ...
        ApplicationHidden = ...
        ApplicationInactive = ...
        ApplicationActive = ...

    class HitTestAccuracy(enum.Enum):
        ExactHit = ...
        FuzzyHit = ...

    class WhiteSpaceMode(enum.Enum):
        WhiteSpaceNormal = ...
        WhiteSpacePre = ...
        WhiteSpaceNoWrap = ...
        WhiteSpaceModeUndefined = ...

    class FindChildOption(enum.Flag):
        FindDirectChildrenOnly = ...
        FindChildrenRecursively = ...

    class ScreenOrientation(enum.Flag):
        PrimaryOrientation = ...
        PortraitOrientation = ...
        LandscapeOrientation = ...
        InvertedPortraitOrientation = ...
        InvertedLandscapeOrientation = ...

    class CursorMoveStyle(enum.Enum):
        LogicalMoveStyle = ...
        VisualMoveStyle = ...

    class NavigationMode(enum.Enum):
        NavigationModeNone = ...
        NavigationModeKeypadTabOrder = ...
        NavigationModeKeypadDirectional = ...
        NavigationModeCursorAuto = ...
        NavigationModeCursorForceVisible = ...

    class GestureFlag(enum.Flag):
        DontStartGestureOnChildren = ...
        ReceivePartialGestures = ...
        IgnoredGesturesPropagateToParent = ...

    class GestureType(enum.IntEnum):
        TapGesture = ...
        TapAndHoldGesture = ...
        PanGesture = ...
        PinchGesture = ...
        SwipeGesture = ...
        CustomGesture = ...

    class GestureState(enum.Enum):
        GestureStarted = ...
        GestureUpdated = ...
        GestureFinished = ...
        GestureCanceled = ...

    class TouchPointState(enum.Flag):
        TouchPointUnknownState = ...
        TouchPointPressed = ...
        TouchPointMoved = ...
        TouchPointStationary = ...
        TouchPointReleased = ...

    class CoordinateSystem(enum.Enum):
        DeviceCoordinates = ...
        LogicalCoordinates = ...

    class AnchorPoint(enum.Enum):
        AnchorLeft = ...
        AnchorHorizontalCenter = ...
        AnchorRight = ...
        AnchorTop = ...
        AnchorVerticalCenter = ...
        AnchorBottom = ...

    class InputMethodHint(enum.Flag):
        ImhNone = ...
        ImhHiddenText = ...
        ImhNoAutoUppercase = ...
        ImhPreferNumbers = ...
        ImhPreferUppercase = ...
        ImhPreferLowercase = ...
        ImhNoPredictiveText = ...
        ImhDigitsOnly = ...
        ImhFormattedNumbersOnly = ...
        ImhUppercaseOnly = ...
        ImhLowercaseOnly = ...
        ImhDialableCharactersOnly = ...
        ImhEmailCharactersOnly = ...
        ImhUrlCharactersOnly = ...
        ImhExclusiveInputMask = ...
        ImhSensitiveData = ...
        ImhDate = ...
        ImhTime = ...
        ImhPreferLatin = ...
        ImhLatinOnly = ...
        ImhMultiLine = ...
        ImhNoEditMenu = ...
        ImhNoTextHandles = ...

    class TileRule(enum.Enum):
        StretchTile = ...
        RepeatTile = ...
        RoundTile = ...

    class WindowFrameSection(enum.Enum):
        NoSection = ...
        LeftSection = ...
        TopLeftSection = ...
        TopSection = ...
        TopRightSection = ...
        RightSection = ...
        BottomRightSection = ...
        BottomSection = ...
        BottomLeftSection = ...
        TitleBarArea = ...

    class SizeHint(enum.Enum):
        MinimumSize = ...
        PreferredSize = ...
        MaximumSize = ...
        MinimumDescent = ...

    class SizeMode(enum.Enum):
        AbsoluteSize = ...
        RelativeSize = ...

    class EventPriority(enum.Enum):
        HighEventPriority = ...
        NormalEventPriority = ...
        LowEventPriority = ...

    class Axis(enum.Enum):
        XAxis = ...
        YAxis = ...
        ZAxis = ...

    class MaskMode(enum.Enum):
        MaskInColor = ...
        MaskOutColor = ...

    class TextInteractionFlag(enum.Flag):
        NoTextInteraction = ...
        TextSelectableByMouse = ...
        TextSelectableByKeyboard = ...
        LinksAccessibleByMouse = ...
        LinksAccessibleByKeyboard = ...
        TextEditable = ...
        TextEditorInteraction = ...
        TextBrowserInteraction = ...

    class ItemSelectionMode(enum.Enum):
        ContainsItemShape = ...
        IntersectsItemShape = ...
        ContainsItemBoundingRect = ...
        IntersectsItemBoundingRect = ...

    class ApplicationAttribute(enum.Enum):
        AA_DontShowIconsInMenus = ...
        AA_NativeWindows = ...
        AA_DontCreateNativeWidgetSiblings = ...
        AA_DontUseNativeMenuBar = ...
        AA_MacDontSwapCtrlAndMeta = ...
        AA_Use96Dpi = ...
        AA_SynthesizeTouchForUnhandledMouseEvents = ...
        AA_SynthesizeMouseForUnhandledTouchEvents = ...
        AA_ForceRasterWidgets = ...
        AA_UseDesktopOpenGL = ...
        AA_UseOpenGLES = ...
        AA_UseSoftwareOpenGL = ...
        AA_ShareOpenGLContexts = ...
        AA_SetPalette = ...
        AA_PluginApplication = ...
        AA_UseStyleSheetPropagationInWidgetStyles = ...
        AA_DontUseNativeDialogs = ...
        AA_SynthesizeMouseForUnhandledTabletEvents = ...
        AA_CompressHighFrequencyEvents = ...
        AA_DontCheckOpenGLContextThreadAffinity = ...
        AA_DisableShaderDiskCache = ...
        AA_DontShowShortcutsInContextMenus = ...
        AA_CompressTabletEvents = ...
        AA_DisableSessionManager = ...
        AA_DisableNativeVirtualKeyboard = ...
        AA_QtQuickUseDefaultSizePolicy = ...
        AA_DontUseNativeMenuWindows = ...

    class WindowModality(enum.Enum):
        NonModal = ...
        WindowModal = ...
        ApplicationModal = ...

    class MatchFlag(enum.Flag):
        MatchExactly = ...
        MatchFixedString = ...
        MatchContains = ...
        MatchStartsWith = ...
        MatchEndsWith = ...
        MatchWildcard = ...
        MatchCaseSensitive = ...
        MatchWrap = ...
        MatchRecursive = ...
        MatchRegularExpression = ...

    class ItemFlag(enum.Flag):
        NoItemFlags = ...
        ItemIsSelectable = ...
        ItemIsEditable = ...
        ItemIsDragEnabled = ...
        ItemIsDropEnabled = ...
        ItemIsUserCheckable = ...
        ItemIsEnabled = ...
        ItemNeverHasChildren = ...
        ItemIsUserTristate = ...
        ItemIsAutoTristate = ...

    class ItemDataRole(enum.IntEnum):
        DisplayRole = ...
        DecorationRole = ...
        EditRole = ...
        ToolTipRole = ...
        StatusTipRole = ...
        WhatsThisRole = ...
        FontRole = ...
        TextAlignmentRole = ...
        BackgroundRole = ...
        ForegroundRole = ...
        CheckStateRole = ...
        AccessibleTextRole = ...
        AccessibleDescriptionRole = ...
        SizeHintRole = ...
        InitialSortOrderRole = ...
        UserRole = ...

    class CheckState(enum.Enum):
        Unchecked = ...
        PartiallyChecked = ...
        Checked = ...

    class DropAction(enum.Flag):
        CopyAction = ...
        MoveAction = ...
        LinkAction = ...
        ActionMask = ...
        TargetMoveAction = ...
        IgnoreAction = ...

    class LayoutDirection(enum.Enum):
        LeftToRight = ...
        RightToLeft = ...
        LayoutDirectionAuto = ...

    class ToolButtonStyle(enum.Enum):
        ToolButtonIconOnly = ...
        ToolButtonTextOnly = ...
        ToolButtonTextBesideIcon = ...
        ToolButtonTextUnderIcon = ...
        ToolButtonFollowStyle = ...

    class InputMethodQuery(enum.Flag):
        ImFont = ...
        ImCursorPosition = ...
        ImSurroundingText = ...
        ImCurrentSelection = ...
        ImMaximumTextLength = ...
        ImAnchorPosition = ...
        ImEnabled = ...
        ImCursorRectangle = ...
        ImHints = ...
        ImPreferredLanguage = ...
        ImPlatformData = ...
        ImQueryInput = ...
        ImQueryAll = ...
        ImAbsolutePosition = ...
        ImTextBeforeCursor = ...
        ImTextAfterCursor = ...
        ImEnterKeyType = ...
        ImAnchorRectangle = ...
        ImInputItemClipRectangle = ...
        ImReadOnly = ...

    class ContextMenuPolicy(enum.Enum):
        NoContextMenu = ...
        PreventContextMenu = ...
        DefaultContextMenu = ...
        ActionsContextMenu = ...
        CustomContextMenu = ...

    class FocusReason(enum.Enum):
        MouseFocusReason = ...
        TabFocusReason = ...
        BacktabFocusReason = ...
        ActiveWindowFocusReason = ...
        PopupFocusReason = ...
        ShortcutFocusReason = ...
        MenuBarFocusReason = ...
        OtherFocusReason = ...
        NoFocusReason = ...

    class TransformationMode(enum.Enum):
        FastTransformation = ...
        SmoothTransformation = ...

    class ClipOperation(enum.Enum):
        NoClip = ...
        ReplaceClip = ...
        IntersectClip = ...

    class FillRule(enum.Enum):
        OddEvenFill = ...
        WindingFill = ...

    class ShortcutContext(enum.Enum):
        WidgetShortcut = ...
        WindowShortcut = ...
        ApplicationShortcut = ...
        WidgetWithChildrenShortcut = ...

    class ConnectionType(enum.Enum):
        AutoConnection = ...
        DirectConnection = ...
        QueuedConnection = ...
        BlockingQueuedConnection = ...
        UniqueConnection = ...
        SingleShotConnection = ...

    class Corner(enum.Enum):
        TopLeftCorner = ...
        TopRightCorner = ...
        BottomLeftCorner = ...
        BottomRightCorner = ...

    class CaseSensitivity(enum.Enum):
        CaseInsensitive = ...
        CaseSensitive = ...

    class ScrollBarPolicy(enum.Enum):
        ScrollBarAsNeeded = ...
        ScrollBarAlwaysOff = ...
        ScrollBarAlwaysOn = ...

    class DayOfWeek(enum.Enum):
        Monday = ...
        Tuesday = ...
        Wednesday = ...
        Thursday = ...
        Friday = ...
        Saturday = ...
        Sunday = ...

    class TimeSpec(enum.Enum):
        LocalTime = ...
        UTC = ...
        OffsetFromUTC = ...
        TimeZone = ...

    class DateFormat(enum.Enum):
        TextDate = ...
        ISODate = ...
        ISODateWithMs = ...
        RFC2822Date = ...

    class ToolBarArea(enum.Flag):
        LeftToolBarArea = ...
        RightToolBarArea = ...
        TopToolBarArea = ...
        BottomToolBarArea = ...
        AllToolBarAreas = ...
        NoToolBarArea = ...

    class TimerType(enum.Enum):
        PreciseTimer = ...
        CoarseTimer = ...
        VeryCoarseTimer = ...

    class DockWidgetArea(enum.Flag):
        LeftDockWidgetArea = ...
        RightDockWidgetArea = ...
        TopDockWidgetArea = ...
        BottomDockWidgetArea = ...
        AllDockWidgetAreas = ...
        NoDockWidgetArea = ...

    class AspectRatioMode(enum.Enum):
        IgnoreAspectRatio = ...
        KeepAspectRatio = ...
        KeepAspectRatioByExpanding = ...

    class TextFormat(enum.Enum):
        PlainText = ...
        RichText = ...
        AutoText = ...
        MarkdownText = ...

    class CursorShape(enum.Enum):
        ArrowCursor = ...
        UpArrowCursor = ...
        CrossCursor = ...
        WaitCursor = ...
        IBeamCursor = ...
        SizeVerCursor = ...
        SizeHorCursor = ...
        SizeBDiagCursor = ...
        SizeFDiagCursor = ...
        SizeAllCursor = ...
        BlankCursor = ...
        SplitVCursor = ...
        SplitHCursor = ...
        PointingHandCursor = ...
        ForbiddenCursor = ...
        OpenHandCursor = ...
        ClosedHandCursor = ...
        WhatsThisCursor = ...
        BusyCursor = ...
        LastCursor = ...
        BitmapCursor = ...
        CustomCursor = ...
        DragCopyCursor = ...
        DragMoveCursor = ...
        DragLinkCursor = ...

    class UIEffect(enum.Enum):
        UI_General = ...
        UI_AnimateMenu = ...
        UI_FadeMenu = ...
        UI_AnimateCombo = ...
        UI_AnimateTooltip = ...
        UI_FadeTooltip = ...
        UI_AnimateToolBox = ...

    class BrushStyle(enum.Enum):
        NoBrush = ...
        SolidPattern = ...
        Dense1Pattern = ...
        Dense2Pattern = ...
        Dense3Pattern = ...
        Dense4Pattern = ...
        Dense5Pattern = ...
        Dense6Pattern = ...
        Dense7Pattern = ...
        HorPattern = ...
        VerPattern = ...
        CrossPattern = ...
        BDiagPattern = ...
        FDiagPattern = ...
        DiagCrossPattern = ...
        LinearGradientPattern = ...
        RadialGradientPattern = ...
        ConicalGradientPattern = ...
        TexturePattern = ...

    class PenJoinStyle(enum.Enum):
        MiterJoin = ...
        BevelJoin = ...
        RoundJoin = ...
        MPenJoinStyle = ...
        SvgMiterJoin = ...

    class PenCapStyle(enum.Enum):
        FlatCap = ...
        SquareCap = ...
        RoundCap = ...

    class PenStyle(enum.Enum):
        NoPen = ...
        SolidLine = ...
        DashLine = ...
        DotLine = ...
        DashDotLine = ...
        DashDotDotLine = ...
        CustomDashLine = ...

    class ArrowType(enum.Enum):
        NoArrow = ...
        UpArrow = ...
        DownArrow = ...
        LeftArrow = ...
        RightArrow = ...

    class Key(enum.IntEnum):
        Key_Escape = ...
        Key_Tab = ...
        Key_Backtab = ...
        Key_Backspace = ...
        Key_Return = ...
        Key_Enter = ...
        Key_Insert = ...
        Key_Delete = ...
        Key_Pause = ...
        Key_Print = ...
        Key_SysReq = ...
        Key_Clear = ...
        Key_Home = ...
        Key_End = ...
        Key_Left = ...
        Key_Up = ...
        Key_Right = ...
        Key_Down = ...
        Key_PageUp = ...
        Key_PageDown = ...
        Key_Shift = ...
        Key_Control = ...
        Key_Meta = ...
        Key_Alt = ...
        Key_CapsLock = ...
        Key_NumLock = ...
        Key_ScrollLock = ...
        Key_F1 = ...
        Key_F2 = ...
        Key_F3 = ...
        Key_F4 = ...
        Key_F5 = ...
        Key_F6 = ...
        Key_F7 = ...
        Key_F8 = ...
        Key_F9 = ...
        Key_F10 = ...
        Key_F11 = ...
        Key_F12 = ...
        Key_F13 = ...
        Key_F14 = ...
        Key_F15 = ...
        Key_F16 = ...
        Key_F17 = ...
        Key_F18 = ...
        Key_F19 = ...
        Key_F20 = ...
        Key_F21 = ...
        Key_F22 = ...
        Key_F23 = ...
        Key_F24 = ...
        Key_F25 = ...
        Key_F26 = ...
        Key_F27 = ...
        Key_F28 = ...
        Key_F29 = ...
        Key_F30 = ...
        Key_F31 = ...
        Key_F32 = ...
        Key_F33 = ...
        Key_F34 = ...
        Key_F35 = ...
        Key_Super_L = ...
        Key_Super_R = ...
        Key_Menu = ...
        Key_Hyper_L = ...
        Key_Hyper_R = ...
        Key_Help = ...
        Key_Direction_L = ...
        Key_Direction_R = ...
        Key_Space = ...
        Key_Any = ...
        Key_Exclam = ...
        Key_QuoteDbl = ...
        Key_NumberSign = ...
        Key_Dollar = ...
        Key_Percent = ...
        Key_Ampersand = ...
        Key_Apostrophe = ...
        Key_ParenLeft = ...
        Key_ParenRight = ...
        Key_Asterisk = ...
        Key_Plus = ...
        Key_Comma = ...
        Key_Minus = ...
        Key_Period = ...
        Key_Slash = ...
        Key_0 = ...
        Key_1 = ...
        Key_2 = ...
        Key_3 = ...
        Key_4 = ...
        Key_5 = ...
        Key_6 = ...
        Key_7 = ...
        Key_8 = ...
        Key_9 = ...
        Key_Colon = ...
        Key_Semicolon = ...
        Key_Less = ...
        Key_Equal = ...
        Key_Greater = ...
        Key_Question = ...
        Key_At = ...
        Key_A = ...
        Key_B = ...
        Key_C = ...
        Key_D = ...
        Key_E = ...
        Key_F = ...
        Key_G = ...
        Key_H = ...
        Key_I = ...
        Key_J = ...
        Key_K = ...
        Key_L = ...
        Key_M = ...
        Key_N = ...
        Key_O = ...
        Key_P = ...
        Key_Q = ...
        Key_R = ...
        Key_S = ...
        Key_T = ...
        Key_U = ...
        Key_V = ...
        Key_W = ...
        Key_X = ...
        Key_Y = ...
        Key_Z = ...
        Key_BracketLeft = ...
        Key_Backslash = ...
        Key_BracketRight = ...
        Key_AsciiCircum = ...
        Key_Underscore = ...
        Key_QuoteLeft = ...
        Key_BraceLeft = ...
        Key_Bar = ...
        Key_BraceRight = ...
        Key_AsciiTilde = ...
        Key_nobreakspace = ...
        Key_exclamdown = ...
        Key_cent = ...
        Key_sterling = ...
        Key_currency = ...
        Key_yen = ...
        Key_brokenbar = ...
        Key_section = ...
        Key_diaeresis = ...
        Key_copyright = ...
        Key_ordfeminine = ...
        Key_guillemotleft = ...
        Key_notsign = ...
        Key_hyphen = ...
        Key_registered = ...
        Key_macron = ...
        Key_degree = ...
        Key_plusminus = ...
        Key_twosuperior = ...
        Key_threesuperior = ...
        Key_acute = ...
        Key_mu = ...
        Key_paragraph = ...
        Key_periodcentered = ...
        Key_cedilla = ...
        Key_onesuperior = ...
        Key_masculine = ...
        Key_guillemotright = ...
        Key_onequarter = ...
        Key_onehalf = ...
        Key_threequarters = ...
        Key_questiondown = ...
        Key_Agrave = ...
        Key_Aacute = ...
        Key_Acircumflex = ...
        Key_Atilde = ...
        Key_Adiaeresis = ...
        Key_Aring = ...
        Key_AE = ...
        Key_Ccedilla = ...
        Key_Egrave = ...
        Key_Eacute = ...
        Key_Ecircumflex = ...
        Key_Ediaeresis = ...
        Key_Igrave = ...
        Key_Iacute = ...
        Key_Icircumflex = ...
        Key_Idiaeresis = ...
        Key_ETH = ...
        Key_Ntilde = ...
        Key_Ograve = ...
        Key_Oacute = ...
        Key_Ocircumflex = ...
        Key_Otilde = ...
        Key_Odiaeresis = ...
        Key_multiply = ...
        Key_Ooblique = ...
        Key_Ugrave = ...
        Key_Uacute = ...
        Key_Ucircumflex = ...
        Key_Udiaeresis = ...
        Key_Yacute = ...
        Key_THORN = ...
        Key_ssharp = ...
        Key_division = ...
        Key_ydiaeresis = ...
        Key_AltGr = ...
        Key_Multi_key = ...
        Key_Codeinput = ...
        Key_SingleCandidate = ...
        Key_MultipleCandidate = ...
        Key_PreviousCandidate = ...
        Key_Mode_switch = ...
        Key_Kanji = ...
        Key_Muhenkan = ...
        Key_Henkan = ...
        Key_Romaji = ...
        Key_Hiragana = ...
        Key_Katakana = ...
        Key_Hiragana_Katakana = ...
        Key_Zenkaku = ...
        Key_Hankaku = ...
        Key_Zenkaku_Hankaku = ...
        Key_Touroku = ...
        Key_Massyo = ...
        Key_Kana_Lock = ...
        Key_Kana_Shift = ...
        Key_Eisu_Shift = ...
        Key_Eisu_toggle = ...
        Key_Hangul = ...
        Key_Hangul_Start = ...
        Key_Hangul_End = ...
        Key_Hangul_Hanja = ...
        Key_Hangul_Jamo = ...
        Key_Hangul_Romaja = ...
        Key_Hangul_Jeonja = ...
        Key_Hangul_Banja = ...
        Key_Hangul_PreHanja = ...
        Key_Hangul_PostHanja = ...
        Key_Hangul_Special = ...
        Key_Dead_Grave = ...
        Key_Dead_Acute = ...
        Key_Dead_Circumflex = ...
        Key_Dead_Tilde = ...
        Key_Dead_Macron = ...
        Key_Dead_Breve = ...
        Key_Dead_Abovedot = ...
        Key_Dead_Diaeresis = ...
        Key_Dead_Abovering = ...
        Key_Dead_Doubleacute = ...
        Key_Dead_Caron = ...
        Key_Dead_Cedilla = ...
        Key_Dead_Ogonek = ...
        Key_Dead_Iota = ...
        Key_Dead_Voiced_Sound = ...
        Key_Dead_Semivoiced_Sound = ...
        Key_Dead_Belowdot = ...
        Key_Dead_Hook = ...
        Key_Dead_Horn = ...
        Key_Back = ...
        Key_Forward = ...
        Key_Stop = ...
        Key_Refresh = ...
        Key_VolumeDown = ...
        Key_VolumeMute = ...
        Key_VolumeUp = ...
        Key_BassBoost = ...
        Key_BassUp = ...
        Key_BassDown = ...
        Key_TrebleUp = ...
        Key_TrebleDown = ...
        Key_MediaPlay = ...
        Key_MediaStop = ...
        Key_MediaPrevious = ...
        Key_MediaNext = ...
        Key_MediaRecord = ...
        Key_HomePage = ...
        Key_Favorites = ...
        Key_Search = ...
        Key_Standby = ...
        Key_OpenUrl = ...
        Key_LaunchMail = ...
        Key_LaunchMedia = ...
        Key_Launch0 = ...
        Key_Launch1 = ...
        Key_Launch2 = ...
        Key_Launch3 = ...
        Key_Launch4 = ...
        Key_Launch5 = ...
        Key_Launch6 = ...
        Key_Launch7 = ...
        Key_Launch8 = ...
        Key_Launch9 = ...
        Key_LaunchA = ...
        Key_LaunchB = ...
        Key_LaunchC = ...
        Key_LaunchD = ...
        Key_LaunchE = ...
        Key_LaunchF = ...
        Key_MediaLast = ...
        Key_Select = ...
        Key_Yes = ...
        Key_No = ...
        Key_Context1 = ...
        Key_Context2 = ...
        Key_Context3 = ...
        Key_Context4 = ...
        Key_Call = ...
        Key_Hangup = ...
        Key_Flip = ...
        Key_unknown = ...
        Key_Execute = ...
        Key_Printer = ...
        Key_Play = ...
        Key_Sleep = ...
        Key_Zoom = ...
        Key_Cancel = ...
        Key_MonBrightnessUp = ...
        Key_MonBrightnessDown = ...
        Key_KeyboardLightOnOff = ...
        Key_KeyboardBrightnessUp = ...
        Key_KeyboardBrightnessDown = ...
        Key_PowerOff = ...
        Key_WakeUp = ...
        Key_Eject = ...
        Key_ScreenSaver = ...
        Key_WWW = ...
        Key_Memo = ...
        Key_LightBulb = ...
        Key_Shop = ...
        Key_History = ...
        Key_AddFavorite = ...
        Key_HotLinks = ...
        Key_BrightnessAdjust = ...
        Key_Finance = ...
        Key_Community = ...
        Key_AudioRewind = ...
        Key_BackForward = ...
        Key_ApplicationLeft = ...
        Key_ApplicationRight = ...
        Key_Book = ...
        Key_CD = ...
        Key_Calculator = ...
        Key_ToDoList = ...
        Key_ClearGrab = ...
        Key_Close = ...
        Key_Copy = ...
        Key_Cut = ...
        Key_Display = ...
        Key_DOS = ...
        Key_Documents = ...
        Key_Excel = ...
        Key_Explorer = ...
        Key_Game = ...
        Key_Go = ...
        Key_iTouch = ...
        Key_LogOff = ...
        Key_Market = ...
        Key_Meeting = ...
        Key_MenuKB = ...
        Key_MenuPB = ...
        Key_MySites = ...
        Key_News = ...
        Key_OfficeHome = ...
        Key_Option = ...
        Key_Paste = ...
        Key_Phone = ...
        Key_Calendar = ...
        Key_Reply = ...
        Key_Reload = ...
        Key_RotateWindows = ...
        Key_RotationPB = ...
        Key_RotationKB = ...
        Key_Save = ...
        Key_Send = ...
        Key_Spell = ...
        Key_SplitScreen = ...
        Key_Support = ...
        Key_TaskPane = ...
        Key_Terminal = ...
        Key_Tools = ...
        Key_Travel = ...
        Key_Video = ...
        Key_Word = ...
        Key_Xfer = ...
        Key_ZoomIn = ...
        Key_ZoomOut = ...
        Key_Away = ...
        Key_Messenger = ...
        Key_WebCam = ...
        Key_MailForward = ...
        Key_Pictures = ...
        Key_Music = ...
        Key_Battery = ...
        Key_Bluetooth = ...
        Key_WLAN = ...
        Key_UWB = ...
        Key_AudioForward = ...
        Key_AudioRepeat = ...
        Key_AudioRandomPlay = ...
        Key_Subtitle = ...
        Key_AudioCycleTrack = ...
        Key_Time = ...
        Key_Hibernate = ...
        Key_View = ...
        Key_TopMenu = ...
        Key_PowerDown = ...
        Key_Suspend = ...
        Key_ContrastAdjust = ...
        Key_MediaPause = ...
        Key_MediaTogglePlayPause = ...
        Key_LaunchG = ...
        Key_LaunchH = ...
        Key_ToggleCallHangup = ...
        Key_VoiceDial = ...
        Key_LastNumberRedial = ...
        Key_Camera = ...
        Key_CameraFocus = ...
        Key_TouchpadToggle = ...
        Key_TouchpadOn = ...
        Key_TouchpadOff = ...
        Key_MicMute = ...
        Key_Red = ...
        Key_Green = ...
        Key_Yellow = ...
        Key_Blue = ...
        Key_ChannelUp = ...
        Key_ChannelDown = ...
        Key_Guide = ...
        Key_Info = ...
        Key_Settings = ...
        Key_Exit = ...
        Key_MicVolumeUp = ...
        Key_MicVolumeDown = ...
        Key_New = ...
        Key_Open = ...
        Key_Find = ...
        Key_Undo = ...
        Key_Redo = ...
        Key_Dead_Stroke = ...
        Key_Dead_Abovecomma = ...
        Key_Dead_Abovereversedcomma = ...
        Key_Dead_Doublegrave = ...
        Key_Dead_Belowring = ...
        Key_Dead_Belowmacron = ...
        Key_Dead_Belowcircumflex = ...
        Key_Dead_Belowtilde = ...
        Key_Dead_Belowbreve = ...
        Key_Dead_Belowdiaeresis = ...
        Key_Dead_Invertedbreve = ...
        Key_Dead_Belowcomma = ...
        Key_Dead_Currency = ...
        Key_Dead_a = ...
        Key_Dead_A = ...
        Key_Dead_e = ...
        Key_Dead_E = ...
        Key_Dead_i = ...
        Key_Dead_I = ...
        Key_Dead_o = ...
        Key_Dead_O = ...
        Key_Dead_u = ...
        Key_Dead_U = ...
        Key_Dead_Small_Schwa = ...
        Key_Dead_Capital_Schwa = ...
        Key_Dead_Greek = ...
        Key_Dead_Lowline = ...
        Key_Dead_Aboveverticalline = ...
        Key_Dead_Belowverticalline = ...
        Key_Dead_Longsolidusoverlay = ...
        Key_micro = ...

    class BGMode(enum.Enum):
        TransparentMode = ...
        OpaqueMode = ...

    class ImageConversionFlag(enum.Flag):
        AutoColor = ...
        ColorOnly = ...
        MonoOnly = ...
        ThresholdAlphaDither = ...
        OrderedAlphaDither = ...
        DiffuseAlphaDither = ...
        DiffuseDither = ...
        OrderedDither = ...
        ThresholdDither = ...
        AutoDither = ...
        PreferDither = ...
        AvoidDither = ...
        NoOpaqueDetection = ...
        NoFormatConversion = ...

    class WidgetAttribute(enum.Enum):
        WA_Disabled = ...
        WA_UnderMouse = ...
        WA_MouseTracking = ...
        WA_OpaquePaintEvent = ...
        WA_StaticContents = ...
        WA_LaidOut = ...
        WA_PaintOnScreen = ...
        WA_NoSystemBackground = ...
        WA_UpdatesDisabled = ...
        WA_Mapped = ...
        WA_InputMethodEnabled = ...
        WA_WState_Visible = ...
        WA_WState_Hidden = ...
        WA_ForceDisabled = ...
        WA_KeyCompression = ...
        WA_PendingMoveEvent = ...
        WA_PendingResizeEvent = ...
        WA_SetPalette = ...
        WA_SetFont = ...
        WA_SetCursor = ...
        WA_NoChildEventsFromChildren = ...
        WA_WindowModified = ...
        WA_Resized = ...
        WA_Moved = ...
        WA_PendingUpdate = ...
        WA_InvalidSize = ...
        WA_CustomWhatsThis = ...
        WA_LayoutOnEntireRect = ...
        WA_OutsideWSRange = ...
        WA_GrabbedShortcut = ...
        WA_TransparentForMouseEvents = ...
        WA_PaintUnclipped = ...
        WA_SetWindowIcon = ...
        WA_NoMouseReplay = ...
        WA_DeleteOnClose = ...
        WA_RightToLeft = ...
        WA_SetLayoutDirection = ...
        WA_NoChildEventsForParent = ...
        WA_ForceUpdatesDisabled = ...
        WA_WState_Created = ...
        WA_WState_CompressKeys = ...
        WA_WState_InPaintEvent = ...
        WA_WState_Reparented = ...
        WA_WState_ConfigPending = ...
        WA_WState_Polished = ...
        WA_WState_OwnSizePolicy = ...
        WA_WState_ExplicitShowHide = ...
        WA_MouseNoMask = ...
        WA_NoMousePropagation = ...
        WA_Hover = ...
        WA_InputMethodTransparent = ...
        WA_QuitOnClose = ...
        WA_KeyboardFocusChange = ...
        WA_AcceptDrops = ...
        WA_WindowPropagation = ...
        WA_NoX11EventCompression = ...
        WA_TintedBackground = ...
        WA_X11OpenGLOverlay = ...
        WA_AttributeCount = ...
        WA_AlwaysShowToolTips = ...
        WA_MacOpaqueSizeGrip = ...
        WA_SetStyle = ...
        WA_SetLocale = ...
        WA_MacShowFocusRect = ...
        WA_MacNormalSize = ...
        WA_MacSmallSize = ...
        WA_MacMiniSize = ...
        WA_LayoutUsesWidgetRect = ...
        WA_StyledBackground = ...
        WA_MacAlwaysShowToolWindow = ...
        WA_StyleSheet = ...
        WA_ShowWithoutActivating = ...
        WA_NativeWindow = ...
        WA_DontCreateNativeAncestors = ...
        WA_DontShowOnScreen = ...
        WA_X11NetWmWindowTypeDesktop = ...
        WA_X11NetWmWindowTypeDock = ...
        WA_X11NetWmWindowTypeToolBar = ...
        WA_X11NetWmWindowTypeMenu = ...
        WA_X11NetWmWindowTypeUtility = ...
        WA_X11NetWmWindowTypeSplash = ...
        WA_X11NetWmWindowTypeDialog = ...
        WA_X11NetWmWindowTypeDropDownMenu = ...
        WA_X11NetWmWindowTypePopupMenu = ...
        WA_X11NetWmWindowTypeToolTip = ...
        WA_X11NetWmWindowTypeNotification = ...
        WA_X11NetWmWindowTypeCombo = ...
        WA_X11NetWmWindowTypeDND = ...
        WA_TranslucentBackground = ...
        WA_AcceptTouchEvents = ...
        WA_TouchPadAcceptSingleTouchEvents = ...
        WA_X11DoNotAcceptFocus = ...
        WA_AlwaysStackOnTop = ...
        WA_TabletTracking = ...
        WA_ContentsMarginsRespectsSafeArea = ...
        WA_StyleSheetTarget = ...

    class WindowState(enum.Flag):
        WindowNoState = ...
        WindowMinimized = ...
        WindowMaximized = ...
        WindowFullScreen = ...
        WindowActive = ...

    class WindowType(enum.IntFlag):
        Widget = ...
        Window = ...
        Dialog = ...
        Sheet = ...
        Drawer = ...
        Popup = ...
        Tool = ...
        ToolTip = ...
        SplashScreen = ...
        Desktop = ...
        SubWindow = ...
        WindowType_Mask = ...
        MSWindowsFixedSizeDialogHint = ...
        MSWindowsOwnDC = ...
        X11BypassWindowManagerHint = ...
        FramelessWindowHint = ...
        CustomizeWindowHint = ...
        WindowTitleHint = ...
        WindowSystemMenuHint = ...
        WindowMinimizeButtonHint = ...
        WindowMaximizeButtonHint = ...
        WindowMinMaxButtonsHint = ...
        WindowContextHelpButtonHint = ...
        WindowShadeButtonHint = ...
        WindowStaysOnTopHint = ...
        WindowStaysOnBottomHint = ...
        WindowCloseButtonHint = ...
        MacWindowToolBarButtonHint = ...
        BypassGraphicsProxyWidget = ...
        WindowTransparentForInput = ...
        WindowOverridesSystemGestures = ...
        WindowDoesNotAcceptFocus = ...
        NoDropShadowWindowHint = ...
        WindowFullscreenButtonHint = ...
        ForeignWindow = ...
        BypassWindowManagerHint = ...
        CoverWindow = ...
        MaximizeUsingFullscreenGeometryHint = ...
        ExpandedClientAreaHint = ...
        NoTitleBarBackgroundHint = ...

    class TextElideMode(enum.Enum):
        ElideLeft = ...
        ElideRight = ...
        ElideMiddle = ...
        ElideNone = ...

    class TextFlag(enum.IntFlag):
        TextSingleLine = ...
        TextDontClip = ...
        TextExpandTabs = ...
        TextShowMnemonic = ...
        TextWordWrap = ...
        TextWrapAnywhere = ...
        TextDontPrint = ...
        TextIncludeTrailingSpaces = ...
        TextHideMnemonic = ...
        TextJustificationForced = ...

    class AlignmentFlag(enum.IntFlag):
        AlignLeft = ...
        AlignLeading = ...
        AlignRight = ...
        AlignTrailing = ...
        AlignHCenter = ...
        AlignJustify = ...
        AlignAbsolute = ...
        AlignHorizontal_Mask = ...
        AlignTop = ...
        AlignBottom = ...
        AlignVCenter = ...
        AlignVertical_Mask = ...
        AlignCenter = ...
        AlignBaseline = ...

    class SortOrder(enum.Enum):
        AscendingOrder = ...
        DescendingOrder = ...

    class FocusPolicy(enum.IntFlag):
        NoFocus = ...
        TabFocus = ...
        ClickFocus = ...
        StrongFocus = ...
        WheelFocus = ...

    class Orientation(enum.Flag):
        Horizontal = ...
        Vertical = ...

    class MouseButton(enum.Flag):
        NoButton = ...
        AllButtons = ...
        LeftButton = ...
        RightButton = ...
        MiddleButton = ...
        XButton1 = ...
        XButton2 = ...
        BackButton = ...
        ExtraButton1 = ...
        ForwardButton = ...
        ExtraButton2 = ...
        TaskButton = ...
        ExtraButton3 = ...
        ExtraButton4 = ...
        ExtraButton5 = ...
        ExtraButton6 = ...
        ExtraButton7 = ...
        ExtraButton8 = ...
        ExtraButton9 = ...
        ExtraButton10 = ...
        ExtraButton11 = ...
        ExtraButton12 = ...
        ExtraButton13 = ...
        ExtraButton14 = ...
        ExtraButton15 = ...
        ExtraButton16 = ...
        ExtraButton17 = ...
        ExtraButton18 = ...
        ExtraButton19 = ...
        ExtraButton20 = ...
        ExtraButton21 = ...
        ExtraButton22 = ...
        ExtraButton23 = ...
        ExtraButton24 = ...

    class Modifier(enum.Flag):
        META = ...
        SHIFT = ...
        CTRL = ...
        ALT = ...
        MODIFIER_MASK = ...

    class KeyboardModifier(enum.Flag):
        NoModifier = ...
        ShiftModifier = ...
        ControlModifier = ...
        AltModifier = ...
        MetaModifier = ...
        KeypadModifier = ...
        GroupSwitchModifier = ...
        KeyboardModifierMask = ...

    class GlobalColor(enum.Enum):
        color0 = ...
        color1 = ...
        black = ...
        white = ...
        darkGray = ...
        gray = ...
        lightGray = ...
        red = ...
        green = ...
        blue = ...
        cyan = ...
        magenta = ...
        yellow = ...
        darkRed = ...
        darkGreen = ...
        darkBlue = ...
        darkCyan = ...
        darkMagenta = ...
        darkYellow = ...
        transparent = ...

    def ws(self, s: QTextStream) -> QTextStream: ...
    def bom(self, s: QTextStream) -> QTextStream: ...
    def reset(self, s: QTextStream) -> QTextStream: ...
    def flush(self, s: QTextStream) -> QTextStream: ...
    def endl(self, s: QTextStream) -> QTextStream: ...
    def center(self, s: QTextStream) -> QTextStream: ...
    def right(self, s: QTextStream) -> QTextStream: ...
    def left(self, s: QTextStream) -> QTextStream: ...
    def scientific(self, s: QTextStream) -> QTextStream: ...
    def fixed(self, s: QTextStream) -> QTextStream: ...
    def lowercasedigits(self, s: QTextStream) -> QTextStream: ...
    def lowercasebase(self, s: QTextStream) -> QTextStream: ...
    def uppercasedigits(self, s: QTextStream) -> QTextStream: ...
    def uppercasebase(self, s: QTextStream) -> QTextStream: ...
    def noforcepoint(self, s: QTextStream) -> QTextStream: ...
    def noforcesign(self, s: QTextStream) -> QTextStream: ...
    def noshowbase(self, s: QTextStream) -> QTextStream: ...
    def forcepoint(self, s: QTextStream) -> QTextStream: ...
    def forcesign(self, s: QTextStream) -> QTextStream: ...
    def showbase(self, s: QTextStream) -> QTextStream: ...
    def hex(self, s: QTextStream) -> QTextStream: ...
    def dec(self, s: QTextStream) -> QTextStream: ...
    def oct(self, s: QTextStream) -> QTextStream: ...
    def bin(self, s: QTextStream) -> QTextStream: ...

class QKeyCombination(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self, key: Qt.Key = ...) -> None: ...
    @typing.overload
    def __init__(self, modifiers: Qt.Modifier, key: Qt.Key = ...) -> None: ...
    @typing.overload
    def __init__(
        self, modifiers: Qt.KeyboardModifier, key: Qt.Key = ...
    ) -> None: ...
    @typing.overload
    def __init__(self, a0: QKeyCombination) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def toCombined(self) -> int: ...
    @staticmethod
    def fromCombined(combined: int) -> QKeyCombination: ...
    def key(self) -> Qt.Key: ...
    def keyboardModifiers(self) -> Qt.KeyboardModifier: ...

class QObject(PyQt6.sip.wrapper):
    staticMetaObject: QMetaObject = ...

    def __init__(self, parent: QObject | None = ...) -> None: ...
    def isQuickItemType(self) -> bool: ...
    @typing.overload
    @staticmethod
    def disconnect(a0: QMetaObject.Connection) -> bool: ...
    @typing.overload
    def disconnect(self) -> None: ...
    def isSignalConnected(self, signal: QMetaMethod) -> bool: ...
    def senderSignalIndex(self) -> int: ...
    def disconnectNotify(self, signal: QMetaMethod) -> None: ...
    def connectNotify(self, signal: QMetaMethod) -> None: ...
    def customEvent(self, a0: QEvent | None) -> None: ...
    def childEvent(self, a0: QChildEvent | None) -> None: ...
    def timerEvent(self, a0: QTimerEvent | None) -> None: ...
    def receivers(self, signal: PYQT_SIGNAL) -> int: ...
    def sender(self) -> QObject | None: ...
    def deleteLater(self) -> None: ...
    def inherits(self, classname: str | None) -> bool: ...
    def parent(self) -> QObject | None: ...
    objectNameChanged: typing.ClassVar[pyqtSignal]
    destroyed: typing.ClassVar[pyqtSignal]
    def property(self, name: str | None) -> typing.Any: ...
    def setProperty(self, name: str | None, value: typing.Any) -> bool: ...
    def dynamicPropertyNames(self) -> list[QByteArray]: ...
    def dumpObjectTree(self) -> None: ...
    def dumpObjectInfo(self) -> None: ...
    def removeEventFilter(self, a0: QObject | None) -> None: ...
    def installEventFilter(self, a0: QObject | None) -> None: ...
    def setParent(self, a0: QObject | None) -> None: ...
    def children(self) -> list[QObject]: ...
    def killTimer(self, id: int) -> None: ...
    def startTimer(
        self, interval: int, timerType: Qt.TimerType = ...
    ) -> int: ...
    def moveToThread(self, thread: QThread | None) -> None: ...
    def thread(self) -> QThread | None: ...
    def blockSignals(self, b: bool) -> bool: ...
    def signalsBlocked(self) -> bool: ...
    def isWindowType(self) -> bool: ...
    def isWidgetType(self) -> bool: ...
    def setObjectName(
        self, name: QByteArray | bytes | bytearray | memoryview | str | None
    ) -> None: ...
    def objectName(self) -> str: ...
    @typing.overload
    def findChildren(
        self,
        type: type[QObjectT],
        name: str | None = ...,
        options: Qt.FindChildOption = ...,
    ) -> list[QObjectT]: ...
    @typing.overload
    def findChildren(
        self,
        types: tuple[type[QObjectT], ...],
        name: str | None = ...,
        options: Qt.FindChildOption = ...,
    ) -> list[QObjectT]: ...
    @typing.overload
    def findChildren(
        self,
        type: type[QObjectT],
        re: QRegularExpression,
        options: Qt.FindChildOption = ...,
    ) -> list[QObjectT]: ...
    @typing.overload
    def findChildren(
        self,
        types: tuple[type[QObjectT], ...],
        re: QRegularExpression,
        options: Qt.FindChildOption = ...,
    ) -> list[QObjectT]: ...
    @typing.overload
    def findChild(
        self,
        type: type[QObjectT],
        name: str | None = ...,
        options: Qt.FindChildOption = ...,
    ) -> QObjectT: ...
    @typing.overload
    def findChild(
        self,
        types: tuple[type[QObjectT], ...],
        name: str | None = ...,
        options: Qt.FindChildOption = ...,
    ) -> QObjectT: ...
    @staticmethod
    def tr(
        sourceText: str | None, disambiguation: str | None = ..., n: int = ...
    ) -> str: ...
    def eventFilter(self, a0: QObject | None, a1: QEvent | None) -> bool: ...
    def event(self, a0: QEvent | None) -> bool: ...
    def pyqtConfigure(self, a0: typing.Any) -> None: ...
    def metaObject(self) -> QMetaObject | None: ...

class QAbstractAnimation(QObject):
    class DeletionPolicy(enum.Enum):
        KeepWhenStopped = ...
        DeleteWhenStopped = ...

    class State(enum.Enum):
        Stopped = ...
        Paused = ...
        Running = ...

    class Direction(enum.Enum):
        Forward = ...
        Backward = ...

    def __init__(self, parent: QObject | None = ...) -> None: ...
    def updateDirection(
        self, direction: QAbstractAnimation.Direction
    ) -> None: ...
    def updateState(
        self,
        newState: QAbstractAnimation.State,
        oldState: QAbstractAnimation.State,
    ) -> None: ...
    def updateCurrentTime(self, currentTime: int) -> None: ...
    def event(self, event: QEvent | None) -> bool: ...
    def setCurrentTime(self, msecs: int) -> None: ...
    def stop(self) -> None: ...
    def setPaused(self, a0: bool) -> None: ...
    def resume(self) -> None: ...
    def pause(self) -> None: ...
    def start(
        self, policy: QAbstractAnimation.DeletionPolicy = ...
    ) -> None: ...
    directionChanged: typing.ClassVar[pyqtSignal]
    currentLoopChanged: typing.ClassVar[pyqtSignal]
    stateChanged: typing.ClassVar[pyqtSignal]
    finished: typing.ClassVar[pyqtSignal]
    def totalDuration(self) -> int: ...
    def duration(self) -> int: ...
    def currentLoop(self) -> int: ...
    def setLoopCount(self, loopCount: int) -> None: ...
    def loopCount(self) -> int: ...
    def currentLoopTime(self) -> int: ...
    def currentTime(self) -> int: ...
    def setDirection(
        self, direction: QAbstractAnimation.Direction
    ) -> None: ...
    def direction(self) -> QAbstractAnimation.Direction: ...
    def group(self) -> QAnimationGroup | None: ...
    def state(self) -> QAbstractAnimation.State: ...

class QAbstractEventDispatcher(QObject):
    class TimerInfo(PyQt6.sip.simplewrapper):
        interval: int = ...
        timerId: int = ...
        timerType: Qt.TimerType = ...

        @typing.overload
        def __init__(self, id: int, i: int, t: Qt.TimerType) -> None: ...
        @typing.overload
        def __init__(self, a0: QAbstractEventDispatcher.TimerInfo) -> None: ...

    def __init__(self, parent: QObject | None = ...) -> None: ...

    awake: typing.ClassVar[pyqtSignal]
    aboutToBlock: typing.ClassVar[pyqtSignal]
    def filterNativeEvent(
        self,
        eventType: QByteArray | bytes | bytearray | memoryview,
        message: PyQt6.sip.voidptr | None,
    ) -> tuple[bool, PyQt6.sip.voidptr | None]: ...
    def removeNativeEventFilter(
        self, filterObj: QAbstractNativeEventFilter | None
    ) -> None: ...
    def installNativeEventFilter(
        self, filterObj: QAbstractNativeEventFilter | None
    ) -> None: ...
    def remainingTime(self, timerId: int) -> int: ...
    def closingDown(self) -> None: ...
    def startingUp(self) -> None: ...
    def interrupt(self) -> None: ...
    def wakeUp(self) -> None: ...
    def registeredTimers(
        self, object: QObject | None
    ) -> list[QAbstractEventDispatcher.TimerInfo]: ...
    def unregisterTimers(self, object: QObject | None) -> bool: ...
    def unregisterTimer(self, timerId: int) -> bool: ...
    @typing.overload
    def registerTimer(
        self, interval: int, timerType: Qt.TimerType, object: QObject | None
    ) -> int: ...
    @typing.overload
    def registerTimer(
        self,
        timerId: int,
        interval: int,
        timerType: Qt.TimerType,
        object: QObject | None,
    ) -> None: ...
    def processEvents(self, flags: QEventLoop.ProcessEventsFlag) -> bool: ...
    @staticmethod
    def instance(
        thread: QThread | None = ...,
    ) -> QAbstractEventDispatcher | None: ...

class QModelIndex(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QModelIndex) -> None: ...
    @typing.overload
    def __init__(self, a0: QPersistentModelIndex) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @typing.overload
    def __ge__(self, rhs: QPersistentModelIndex) -> bool: ...
    @typing.overload
    def __ge__(self, rhs: QModelIndex) -> bool: ...
    @typing.overload
    def __le__(self, rhs: QPersistentModelIndex) -> bool: ...
    @typing.overload
    def __le__(self, rhs: QModelIndex) -> bool: ...
    @typing.overload
    def __gt__(self, rhs: QPersistentModelIndex) -> bool: ...
    @typing.overload
    def __gt__(self, rhs: QModelIndex) -> bool: ...
    @typing.overload
    def __lt__(self, rhs: QPersistentModelIndex) -> bool: ...
    @typing.overload
    def __lt__(self, rhs: QModelIndex) -> bool: ...
    def __hash__(self) -> int: ...
    def siblingAtRow(self, row: int) -> QModelIndex: ...
    def siblingAtColumn(self, column: int) -> QModelIndex: ...
    def sibling(self, arow: int, acolumn: int) -> QModelIndex: ...
    def parent(self) -> QModelIndex: ...
    def isValid(self) -> bool: ...
    def model(self) -> QAbstractItemModel | None: ...
    def internalId(self) -> int: ...
    def internalPointer(self) -> typing.Any: ...
    def flags(self) -> Qt.ItemFlag: ...
    def data(self, role: int = ...) -> typing.Any: ...
    def column(self) -> int: ...
    def row(self) -> int: ...

class QPersistentModelIndex(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, index: QModelIndex) -> None: ...
    @typing.overload
    def __init__(self, other: QPersistentModelIndex) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @typing.overload
    def __ge__(self, rhs: QModelIndex) -> bool: ...
    @typing.overload
    def __ge__(self, rhs: QPersistentModelIndex) -> bool: ...
    @typing.overload
    def __le__(self, rhs: QModelIndex) -> bool: ...
    @typing.overload
    def __le__(self, rhs: QPersistentModelIndex) -> bool: ...
    @typing.overload
    def __gt__(self, rhs: QModelIndex) -> bool: ...
    @typing.overload
    def __gt__(self, rhs: QPersistentModelIndex) -> bool: ...
    @typing.overload
    def __lt__(self, rhs: QModelIndex) -> bool: ...
    @typing.overload
    def __lt__(self, rhs: QPersistentModelIndex) -> bool: ...
    def __hash__(self) -> int: ...
    def swap(self, other: QPersistentModelIndex) -> None: ...
    def isValid(self) -> bool: ...
    def model(self) -> QAbstractItemModel | None: ...
    def sibling(self, row: int, column: int) -> QModelIndex: ...
    def parent(self) -> QModelIndex: ...
    def flags(self) -> Qt.ItemFlag: ...
    def data(self, role: int = ...) -> typing.Any: ...
    def column(self) -> int: ...
    def row(self) -> int: ...

class QAbstractItemModel(QObject):
    class CheckIndexOption(enum.Flag):
        NoOption = ...
        IndexIsValid = ...
        DoNotUseParent = ...
        ParentIsInvalid = ...

    class LayoutChangeHint(enum.Enum):
        NoLayoutChangeHint = ...
        VerticalSortHint = ...
        HorizontalSortHint = ...

    def __init__(self, parent: QObject | None = ...) -> None: ...
    def multiData(
        self, index: QModelIndex, roleDataSpan: QModelRoleDataSpan
    ) -> None: ...
    def clearItemData(self, index: QModelIndex) -> bool: ...
    def checkIndex(
        self,
        index: QModelIndex,
        options: QAbstractItemModel.CheckIndexOption = ...,
    ) -> bool: ...
    def moveColumn(
        self,
        sourceParent: QModelIndex,
        sourceColumn: int,
        destinationParent: QModelIndex,
        destinationChild: int,
    ) -> bool: ...
    def moveRow(
        self,
        sourceParent: QModelIndex,
        sourceRow: int,
        destinationParent: QModelIndex,
        destinationChild: int,
    ) -> bool: ...
    def moveColumns(
        self,
        sourceParent: QModelIndex,
        sourceColumn: int,
        count: int,
        destinationParent: QModelIndex,
        destinationChild: int,
    ) -> bool: ...
    def moveRows(
        self,
        sourceParent: QModelIndex,
        sourceRow: int,
        count: int,
        destinationParent: QModelIndex,
        destinationChild: int,
    ) -> bool: ...
    def canDropMimeData(
        self,
        data: QMimeData | None,
        action: Qt.DropAction,
        row: int,
        column: int,
        parent: QModelIndex,
    ) -> bool: ...
    def resetInternalData(self) -> None: ...
    def endResetModel(self) -> None: ...
    def beginResetModel(self) -> None: ...
    def endMoveColumns(self) -> None: ...
    def beginMoveColumns(
        self,
        sourceParent: QModelIndex,
        sourceFirst: int,
        sourceLast: int,
        destinationParent: QModelIndex,
        destinationColumn: int,
    ) -> bool: ...
    def endMoveRows(self) -> None: ...
    def beginMoveRows(
        self,
        sourceParent: QModelIndex,
        sourceFirst: int,
        sourceLast: int,
        destinationParent: QModelIndex,
        destinationRow: int,
    ) -> bool: ...
    columnsMoved: typing.ClassVar[pyqtSignal]
    columnsAboutToBeMoved: typing.ClassVar[pyqtSignal]
    rowsMoved: typing.ClassVar[pyqtSignal]
    rowsAboutToBeMoved: typing.ClassVar[pyqtSignal]
    def createIndex(
        self, row: int, column: int, object: typing.Any = ...
    ) -> QModelIndex: ...
    def roleNames(self) -> dict[int, QByteArray]: ...
    def supportedDragActions(self) -> Qt.DropAction: ...
    def removeColumn(self, column: int, parent: QModelIndex = ...) -> bool: ...
    def removeRow(self, row: int, parent: QModelIndex = ...) -> bool: ...
    def insertColumn(self, column: int, parent: QModelIndex = ...) -> bool: ...
    def insertRow(self, row: int, parent: QModelIndex = ...) -> bool: ...
    def changePersistentIndexList(
        self,
        from_: collections.abc.Iterable[QModelIndex],
        to: collections.abc.Iterable[QModelIndex],
    ) -> None: ...
    def changePersistentIndex(
        self, from_: QModelIndex, to: QModelIndex
    ) -> None: ...
    def persistentIndexList(self) -> list[QModelIndex]: ...
    def endRemoveColumns(self) -> None: ...
    def beginRemoveColumns(
        self, parent: QModelIndex, first: int, last: int
    ) -> None: ...
    def endInsertColumns(self) -> None: ...
    def beginInsertColumns(
        self, parent: QModelIndex, first: int, last: int
    ) -> None: ...
    def endRemoveRows(self) -> None: ...
    def beginRemoveRows(
        self, parent: QModelIndex, first: int, last: int
    ) -> None: ...
    def endInsertRows(self) -> None: ...
    def beginInsertRows(
        self, parent: QModelIndex, first: int, last: int
    ) -> None: ...
    def decodeData(
        self, row: int, column: int, parent: QModelIndex, stream: QDataStream
    ) -> bool: ...
    def encodeData(
        self,
        indexes: collections.abc.Iterable[QModelIndex],
        stream: QDataStream,
    ) -> None: ...
    def revert(self) -> None: ...
    def submit(self) -> bool: ...
    modelReset: typing.ClassVar[pyqtSignal]
    modelAboutToBeReset: typing.ClassVar[pyqtSignal]
    columnsRemoved: typing.ClassVar[pyqtSignal]
    columnsAboutToBeRemoved: typing.ClassVar[pyqtSignal]
    columnsInserted: typing.ClassVar[pyqtSignal]
    columnsAboutToBeInserted: typing.ClassVar[pyqtSignal]
    rowsRemoved: typing.ClassVar[pyqtSignal]
    rowsAboutToBeRemoved: typing.ClassVar[pyqtSignal]
    rowsInserted: typing.ClassVar[pyqtSignal]
    rowsAboutToBeInserted: typing.ClassVar[pyqtSignal]
    layoutChanged: typing.ClassVar[pyqtSignal]
    layoutAboutToBeChanged: typing.ClassVar[pyqtSignal]
    headerDataChanged: typing.ClassVar[pyqtSignal]
    dataChanged: typing.ClassVar[pyqtSignal]
    def span(self, index: QModelIndex) -> QSize: ...
    def match(
        self,
        start: QModelIndex,
        role: int,
        value: typing.Any,
        hits: int = ...,
        flags: Qt.MatchFlag = ...,
    ) -> list[QModelIndex]: ...
    def buddy(self, index: QModelIndex) -> QModelIndex: ...
    def sort(self, column: int, order: Qt.SortOrder = ...) -> None: ...
    def flags(self, index: QModelIndex) -> Qt.ItemFlag: ...
    def canFetchMore(self, parent: QModelIndex) -> bool: ...
    def fetchMore(self, parent: QModelIndex) -> None: ...
    def removeColumns(
        self, column: int, count: int, parent: QModelIndex = ...
    ) -> bool: ...
    def removeRows(
        self, row: int, count: int, parent: QModelIndex = ...
    ) -> bool: ...
    def insertColumns(
        self, column: int, count: int, parent: QModelIndex = ...
    ) -> bool: ...
    def insertRows(
        self, row: int, count: int, parent: QModelIndex = ...
    ) -> bool: ...
    def supportedDropActions(self) -> Qt.DropAction: ...
    def dropMimeData(
        self,
        data: QMimeData | None,
        action: Qt.DropAction,
        row: int,
        column: int,
        parent: QModelIndex,
    ) -> bool: ...
    def mimeData(
        self, indexes: collections.abc.Iterable[QModelIndex]
    ) -> QMimeData | None: ...
    def mimeTypes(self) -> list[str]: ...
    def setItemData(
        self, index: QModelIndex, roles: dict[int, typing.Any]
    ) -> bool: ...
    def itemData(self, index: QModelIndex) -> dict[int, typing.Any]: ...
    def setHeaderData(
        self,
        section: int,
        orientation: Qt.Orientation,
        value: typing.Any,
        role: int = ...,
    ) -> bool: ...
    def headerData(
        self, section: int, orientation: Qt.Orientation, role: int = ...
    ) -> typing.Any: ...
    def setData(
        self, index: QModelIndex, value: typing.Any, role: int = ...
    ) -> bool: ...
    def data(self, index: QModelIndex, role: int = ...) -> typing.Any: ...
    def hasChildren(self, parent: QModelIndex = ...) -> bool: ...
    def columnCount(self, parent: QModelIndex = ...) -> int: ...
    def rowCount(self, parent: QModelIndex = ...) -> int: ...
    def sibling(
        self, row: int, column: int, idx: QModelIndex
    ) -> QModelIndex: ...
    @typing.overload
    def parent(self, child: QModelIndex) -> QModelIndex: ...
    @typing.overload
    def parent(self) -> QObject | None: ...
    def index(
        self, row: int, column: int, parent: QModelIndex = ...
    ) -> QModelIndex: ...
    def hasIndex(
        self, row: int, column: int, parent: QModelIndex = ...
    ) -> bool: ...

class QAbstractTableModel(QAbstractItemModel):
    def __init__(self, parent: QObject | None = ...) -> None: ...
    def sibling(
        self, row: int, column: int, idx: QModelIndex
    ) -> QModelIndex: ...
    def parent(self) -> QObject | None: ...
    def flags(self, index: QModelIndex) -> Qt.ItemFlag: ...
    def dropMimeData(
        self,
        data: QMimeData | None,
        action: Qt.DropAction,
        row: int,
        column: int,
        parent: QModelIndex,
    ) -> bool: ...
    def index(
        self, row: int, column: int, parent: QModelIndex = ...
    ) -> QModelIndex: ...

class QAbstractListModel(QAbstractItemModel):
    def __init__(self, parent: QObject | None = ...) -> None: ...
    def sibling(
        self, row: int, column: int, idx: QModelIndex
    ) -> QModelIndex: ...
    def parent(self) -> QObject | None: ...
    def flags(self, index: QModelIndex) -> Qt.ItemFlag: ...
    def dropMimeData(
        self,
        data: QMimeData | None,
        action: Qt.DropAction,
        row: int,
        column: int,
        parent: QModelIndex,
    ) -> bool: ...
    def index(
        self, row: int, column: int = ..., parent: QModelIndex = ...
    ) -> QModelIndex: ...

class QModelRoleData(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self, role: int) -> None: ...
    @typing.overload
    def __init__(self, a0: QModelRoleData) -> None: ...
    def clearData(self) -> None: ...
    def setData(self, data: typing.Any) -> None: ...
    def data(self) -> typing.Any: ...
    def role(self) -> int: ...

class QModelRoleDataSpan(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, modelRoleData: QModelRoleData) -> None: ...
    @typing.overload
    def __init__(
        self, modelRoleData: collections.abc.Iterable[QModelRoleData]
    ) -> None: ...
    @typing.overload
    def __init__(self, a0: QModelRoleDataSpan) -> None: ...
    def dataForRole(self, role: int) -> typing.Any | None: ...
    def __getitem__(self, index: int) -> QModelRoleData: ...
    def end(self) -> QModelRoleData | None: ...
    def begin(self) -> QModelRoleData | None: ...
    def data(self) -> QModelRoleData | None: ...
    def __len__(self) -> int: ...
    def length(self) -> int: ...
    def size(self) -> int: ...

class QAbstractNativeEventFilter(PyQt6.sip.simplewrapper):
    def __init__(self) -> None: ...
    def nativeEventFilter(
        self,
        eventType: QByteArray | bytes | bytearray | memoryview,
        message: PyQt6.sip.voidptr | None,
    ) -> tuple[bool, PyQt6.sip.voidptr | None]: ...

class QAbstractProxyModel(QAbstractItemModel):
    def __init__(self, parent: QObject | None = ...) -> None: ...
    def roleNames(self) -> dict[int, QByteArray]: ...
    def clearItemData(self, index: QModelIndex) -> bool: ...
    def supportedDragActions(self) -> Qt.DropAction: ...
    def dropMimeData(
        self,
        data: QMimeData | None,
        action: Qt.DropAction,
        row: int,
        column: int,
        parent: QModelIndex,
    ) -> bool: ...
    def canDropMimeData(
        self,
        data: QMimeData | None,
        action: Qt.DropAction,
        row: int,
        column: int,
        parent: QModelIndex,
    ) -> bool: ...
    sourceModelChanged: typing.ClassVar[pyqtSignal]
    def sibling(
        self, row: int, column: int, idx: QModelIndex
    ) -> QModelIndex: ...
    def supportedDropActions(self) -> Qt.DropAction: ...
    def mimeTypes(self) -> list[str]: ...
    def mimeData(
        self, indexes: collections.abc.Iterable[QModelIndex]
    ) -> QMimeData | None: ...
    def hasChildren(self, parent: QModelIndex = ...) -> bool: ...
    def span(self, index: QModelIndex) -> QSize: ...
    def sort(self, column: int, order: Qt.SortOrder = ...) -> None: ...
    def fetchMore(self, parent: QModelIndex) -> None: ...
    def canFetchMore(self, parent: QModelIndex) -> bool: ...
    def buddy(self, index: QModelIndex) -> QModelIndex: ...
    def setItemData(
        self, index: QModelIndex, roles: dict[int, typing.Any]
    ) -> bool: ...
    def flags(self, index: QModelIndex) -> Qt.ItemFlag: ...
    def itemData(self, index: QModelIndex) -> dict[int, typing.Any]: ...
    def setHeaderData(
        self,
        section: int,
        orientation: Qt.Orientation,
        value: typing.Any,
        role: int = ...,
    ) -> bool: ...
    def headerData(
        self, section: int, orientation: Qt.Orientation, role: int = ...
    ) -> typing.Any: ...
    def setData(
        self, index: QModelIndex, value: typing.Any, role: int = ...
    ) -> bool: ...
    def data(self, proxyIndex: QModelIndex, role: int = ...) -> typing.Any: ...
    def revert(self) -> None: ...
    def submit(self) -> bool: ...
    def mapSelectionFromSource(
        self, selection: QItemSelection
    ) -> QItemSelection: ...
    def mapSelectionToSource(
        self, selection: QItemSelection
    ) -> QItemSelection: ...
    def mapFromSource(self, sourceIndex: QModelIndex) -> QModelIndex: ...
    def mapToSource(self, proxyIndex: QModelIndex) -> QModelIndex: ...
    def sourceModel(self) -> QAbstractItemModel | None: ...
    def setSourceModel(
        self, sourceModel: QAbstractItemModel | None
    ) -> None: ...

class QAnimationGroup(QAbstractAnimation):
    def __init__(self, parent: QObject | None = ...) -> None: ...
    def event(self, event: QEvent | None) -> bool: ...
    def clear(self) -> None: ...
    def takeAnimation(self, index: int) -> QAbstractAnimation | None: ...
    def removeAnimation(
        self, animation: QAbstractAnimation | None
    ) -> None: ...
    def insertAnimation(
        self, index: int, animation: QAbstractAnimation | None
    ) -> None: ...
    def addAnimation(self, animation: QAbstractAnimation | None) -> None: ...
    def indexOfAnimation(
        self, animation: QAbstractAnimation | None
    ) -> int: ...
    def animationCount(self) -> int: ...
    def animationAt(self, index: int) -> QAbstractAnimation | None: ...

class QBasicTimer(PyQt6.sip.simplewrapper):
    def __init__(self) -> None: ...
    def id(self) -> int: ...
    def swap(self, other: QBasicTimer) -> None: ...
    def stop(self) -> None: ...
    @typing.overload
    def start(
        self, msec: int, timerType: Qt.TimerType, obj: QObject | None
    ) -> None: ...
    @typing.overload
    def start(self, msec: int, obj: QObject | None) -> None: ...
    def timerId(self) -> int: ...
    def isActive(self) -> bool: ...

class QBitArray(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, size: int, value: bool = ...) -> None: ...
    @typing.overload
    def __init__(self, other: QBitArray) -> None: ...
    def __or__(self, a0: QBitArray) -> QBitArray: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __and__(self, a0: QBitArray) -> QBitArray: ...
    def __xor__(self, a0: QBitArray) -> QBitArray: ...
    def toUInt32(
        self, endianness: QSysInfo.Endian
    ) -> tuple[int, bool | None]: ...
    @staticmethod
    def fromBits(data: bytes | None, len: int) -> QBitArray: ...
    def bits(self) -> bytes: ...
    def swap(self, other: QBitArray) -> None: ...
    def __hash__(self) -> int: ...
    def at(self, i: int) -> bool: ...
    def __getitem__(self, i: int) -> bool: ...
    def toggleBit(self, i: int) -> bool: ...
    def clearBit(self, i: int) -> None: ...
    @typing.overload
    def setBit(self, i: int) -> None: ...
    @typing.overload
    def setBit(self, i: int, val: bool) -> None: ...
    def testBit(self, i: int) -> bool: ...
    def truncate(self, pos: int) -> None: ...
    @typing.overload
    def fill(self, val: bool, first: int, last: int) -> None: ...
    @typing.overload
    def fill(self, val: bool, size: int = ...) -> bool: ...
    def __ixor__(self, a0: QBitArray) -> typing.Self: ...
    def __ior__(self, a0: QBitArray) -> typing.Self: ...
    def __iand__(self, a0: QBitArray) -> typing.Self: ...
    def clear(self) -> None: ...
    def isDetached(self) -> bool: ...
    def detach(self) -> None: ...
    def resize(self, size: int) -> None: ...
    def isNull(self) -> bool: ...
    def isEmpty(self) -> bool: ...
    def __len__(self) -> int: ...
    @typing.overload
    def count(self) -> int: ...
    @typing.overload
    def count(self, on: bool) -> int: ...
    def size(self) -> int: ...

class QIODeviceBase(PyQt6.sip.simplewrapper):
    class OpenModeFlag(enum.Flag):
        NotOpen = ...
        ReadOnly = ...
        WriteOnly = ...
        ReadWrite = ...
        Append = ...
        Truncate = ...
        Text = ...
        Unbuffered = ...
        NewOnly = ...
        ExistingOnly = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QIODeviceBase) -> None: ...

class QIODevice(QObject, QIODeviceBase):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, parent: QObject | None) -> None: ...
    def setErrorString(self, errorString: str | None) -> None: ...
    def setOpenMode(self, openMode: QIODeviceBase.OpenModeFlag) -> None: ...
    def skipData(self, maxSize: int) -> int: ...
    def writeData(self, a0: PyQt6.sip.Buffer) -> int: ...
    def readLineData(self, maxlen: int) -> bytes: ...
    def readData(self, maxlen: int) -> bytes: ...
    readyRead: typing.ClassVar[pyqtSignal]
    readChannelFinished: typing.ClassVar[pyqtSignal]
    channelReadyRead: typing.ClassVar[pyqtSignal]
    channelBytesWritten: typing.ClassVar[pyqtSignal]
    bytesWritten: typing.ClassVar[pyqtSignal]
    aboutToClose: typing.ClassVar[pyqtSignal]
    def errorString(self) -> str: ...
    def getChar(self) -> tuple[bool, bytes | None]: ...
    def putChar(self, c: bytes) -> bool: ...
    def ungetChar(self, c: bytes) -> None: ...
    def waitForBytesWritten(self, msecs: int) -> bool: ...
    def waitForReadyRead(self, msecs: int) -> bool: ...
    def skip(self, maxSize: int) -> int: ...
    def peek(self, maxlen: int) -> bytes: ...
    def write(self, a0: PyQt6.sip.Buffer) -> int: ...
    def isTransactionStarted(self) -> bool: ...
    def rollbackTransaction(self) -> None: ...
    def commitTransaction(self) -> None: ...
    def startTransaction(self) -> None: ...
    def canReadLine(self) -> bool: ...
    def readAll(self) -> QByteArray: ...
    def readLineInto(
        self,
        result: QByteArray | bytes | bytearray | memoryview | None,
        maxSize: int = ...,
    ) -> bool: ...
    @typing.overload
    def readLine(self, maxlen: int) -> bytes: ...
    @typing.overload
    def readLine(self) -> QByteArray: ...
    def read(self, maxlen: int) -> bytes: ...
    def bytesToWrite(self) -> int: ...
    def bytesAvailable(self) -> int: ...
    def reset(self) -> bool: ...
    def atEnd(self) -> bool: ...
    def seek(self, pos: int) -> bool: ...
    def size(self) -> int: ...
    def pos(self) -> int: ...
    def close(self) -> None: ...
    def open(self, mode: QIODeviceBase.OpenModeFlag) -> bool: ...
    def setCurrentWriteChannel(self, channel: int) -> None: ...
    def currentWriteChannel(self) -> int: ...
    def setCurrentReadChannel(self, channel: int) -> None: ...
    def currentReadChannel(self) -> int: ...
    def writeChannelCount(self) -> int: ...
    def readChannelCount(self) -> int: ...
    def isSequential(self) -> bool: ...
    def isWritable(self) -> bool: ...
    def isReadable(self) -> bool: ...
    def isOpen(self) -> bool: ...
    def isTextModeEnabled(self) -> bool: ...
    def setTextModeEnabled(self, enabled: bool) -> None: ...
    def openMode(self) -> QIODeviceBase.OpenModeFlag: ...

class QBuffer(QIODevice):
    @typing.overload
    def __init__(self, parent: QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self, byteArray: QByteArray | None, parent: QObject | None = ...
    ) -> None: ...
    def writeData(self, a0: PyQt6.sip.Buffer) -> int: ...
    def readData(self, maxlen: int) -> bytes: ...
    def canReadLine(self) -> bool: ...
    def atEnd(self) -> bool: ...
    def seek(self, off: int) -> bool: ...
    def pos(self) -> int: ...
    def size(self) -> int: ...
    def close(self) -> None: ...
    def open(self, openMode: QIODeviceBase.OpenModeFlag) -> bool: ...
    @typing.overload
    def setData(
        self, data: QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    @typing.overload
    def setData(self, data: PyQt6.sip.array[bytes] | None) -> None: ...
    def setBuffer(self, a: QByteArray | None) -> None: ...
    def data(self) -> QByteArray: ...
    def buffer(self) -> QByteArray: ...

class QByteArray(PyQt6.sip.simplewrapper):
    class Base64DecodingStatus(enum.Enum):
        Ok = ...
        IllegalInputLength = ...
        IllegalCharacter = ...
        IllegalPadding = ...

    class Base64Option(enum.Flag):
        Base64Encoding = ...
        Base64UrlEncoding = ...
        KeepTrailingEquals = ...
        OmitTrailingEquals = ...
        IgnoreBase64DecodingErrors = ...
        AbortOnBase64DecodingErrors = ...

    class FromBase64Result(PyQt6.sip.simplewrapper):
        decoded: QByteArray | bytes | bytearray | memoryview = ...
        decodingStatus: QByteArray.Base64DecodingStatus = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: QByteArray.FromBase64Result) -> None: ...
        def __eq__(self, other: object) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __hash__(self) -> int: ...
        def __int__(self) -> bool: ...
        def swap(self, other: QByteArray.FromBase64Result) -> None: ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, size: int, c: bytes) -> None: ...
    @typing.overload
    def __init__(
        self, a: QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def __add__(
        self, a2: QByteArray | bytes | bytearray | memoryview
    ) -> QByteArray: ...
    @staticmethod
    def maxSize() -> int: ...
    def max_size(self) -> int: ...
    @typing.overload
    def slice(self, pos: int, n: int) -> QByteArray: ...
    @typing.overload
    def slice(self, pos: int) -> QByteArray: ...
    def assign(
        self, v: QByteArray | bytes | bytearray | memoryview
    ) -> QByteArray: ...
    def removeLast(self) -> QByteArray: ...
    def removeFirst(self) -> QByteArray: ...
    def removeAt(self, pos: int) -> QByteArray: ...
    def percentDecoded(self, percent: str = ...) -> QByteArray: ...
    def isValidUtf8(self) -> bool: ...
    @typing.overload
    def sliced(self, pos: int) -> QByteArray: ...
    @typing.overload
    def sliced(self, pos: int, n: int) -> QByteArray: ...
    @staticmethod
    def fromBase64Encoding(
        base64: QByteArray | bytes | bytearray | memoryview,
        options: QByteArray.Base64Option = ...,
    ) -> QByteArray.FromBase64Result: ...
    def isLower(self) -> bool: ...
    def isUpper(self) -> bool: ...
    def compare(
        self,
        a: QByteArray | bytes | bytearray | memoryview,
        cs: Qt.CaseSensitivity = ...,
    ) -> int: ...
    def chopped(self, len: int) -> QByteArray: ...
    def swap(self, other: QByteArray) -> None: ...
    def repeated(self, times: int) -> QByteArray: ...
    @staticmethod
    def fromPercentEncoding(
        input: QByteArray | bytes | bytearray | memoryview, percent: str = ...
    ) -> QByteArray: ...
    def toPercentEncoding(
        self,
        exclude: QByteArray | bytes | bytearray | memoryview = ...,
        include: QByteArray | bytes | bytearray | memoryview = ...,
        percent: str = ...,
    ) -> QByteArray: ...
    def toHex(self, separator: bytes = ...) -> QByteArray: ...
    def contains(
        self, bv: QByteArray | bytes | bytearray | memoryview
    ) -> bool: ...
    def push_front(
        self, a: QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def push_back(
        self, a: QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def squeeze(self) -> None: ...
    def reserve(self, size: int) -> None: ...
    def capacity(self) -> int: ...
    def data(self) -> bytes: ...
    def isEmpty(self) -> bool: ...
    def __imul__(self, m: int) -> typing.Self: ...
    def __mul__(self, m: int) -> QByteArray: ...
    def __hash__(self) -> int: ...
    def __contains__(
        self, bv: QByteArray | bytes | bytearray | memoryview
    ) -> int: ...
    @typing.overload
    def __getitem__(self, i: int) -> bytes: ...
    @typing.overload
    def __getitem__(self, slice: slice) -> QByteArray: ...
    def at(self, i: int) -> bytes: ...
    def __len__(self) -> int: ...
    def size(self) -> int: ...
    def isNull(self) -> bool: ...
    def length(self) -> int: ...
    @staticmethod
    def fromHex(
        hexEncoded: QByteArray | bytes | bytearray | memoryview,
    ) -> QByteArray: ...
    @staticmethod
    def fromBase64(
        base64: QByteArray | bytes | bytearray | memoryview,
        options: QByteArray.Base64Option = ...,
    ) -> QByteArray: ...
    @typing.overload
    @staticmethod
    def number(
        n: float, format: str = ..., precision: int = ...
    ) -> QByteArray: ...
    @typing.overload
    @staticmethod
    def number(n: int, base: int = ...) -> QByteArray: ...
    @typing.overload
    def setNum(
        self, n: float, format: str = ..., precision: int = ...
    ) -> QByteArray: ...
    @typing.overload
    def setNum(self, n: int, base: int = ...) -> QByteArray: ...
    def toBase64(
        self, options: QByteArray.Base64Option = ...
    ) -> QByteArray: ...
    def toDouble(self) -> tuple[float, bool | None]: ...
    def toFloat(self) -> tuple[float, bool | None]: ...
    def toULongLong(self, base: int = ...) -> tuple[int, bool | None]: ...
    def toLongLong(self, base: int = ...) -> tuple[int, bool | None]: ...
    def toULong(self, base: int = ...) -> tuple[int, bool | None]: ...
    def toLong(self, base: int = ...) -> tuple[int, bool | None]: ...
    def toUInt(self, base: int = ...) -> tuple[int, bool | None]: ...
    def toInt(self, base: int = ...) -> tuple[int, bool | None]: ...
    def toUShort(self, base: int = ...) -> tuple[int, bool | None]: ...
    def toShort(self, base: int = ...) -> tuple[int, bool | None]: ...
    @typing.overload
    def __ge__(self, s2: str | None) -> bool: ...
    @typing.overload
    def __ge__(
        self, a2: QByteArray | bytes | bytearray | memoryview
    ) -> bool: ...
    @typing.overload
    def __le__(self, s2: str | None) -> bool: ...
    @typing.overload
    def __le__(
        self, a2: QByteArray | bytes | bytearray | memoryview
    ) -> bool: ...
    @typing.overload
    def __gt__(self, s2: str | None) -> bool: ...
    @typing.overload
    def __gt__(
        self, a2: QByteArray | bytes | bytearray | memoryview
    ) -> bool: ...
    @typing.overload
    def __lt__(self, s2: str | None) -> bool: ...
    @typing.overload
    def __lt__(
        self, a2: QByteArray | bytes | bytearray | memoryview
    ) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __iadd__(
        self, a: QByteArray | bytes | bytearray | memoryview
    ) -> typing.Self: ...
    def split(self, sep: bytes) -> list[QByteArray]: ...
    @typing.overload
    def replace(
        self,
        before: QByteArray | bytes | bytearray | memoryview,
        after: QByteArray | bytes | bytearray | memoryview,
    ) -> QByteArray: ...
    @typing.overload
    def replace(
        self,
        index: int,
        len: int,
        s: QByteArray | bytes | bytearray | memoryview,
    ) -> QByteArray: ...
    def remove(self, index: int, len: int) -> QByteArray: ...
    @typing.overload
    def insert(
        self, i: int, data: QByteArray | bytes | bytearray | memoryview
    ) -> QByteArray: ...
    @typing.overload
    def insert(self, i: int, count: int, c: bytes) -> QByteArray: ...
    @typing.overload
    def append(
        self, a: QByteArray | bytes | bytearray | memoryview
    ) -> QByteArray: ...
    @typing.overload
    def append(self, count: int, c: bytes) -> QByteArray: ...
    @typing.overload
    def prepend(
        self, a: QByteArray | bytes | bytearray | memoryview
    ) -> QByteArray: ...
    @typing.overload
    def prepend(self, count: int, c: bytes) -> QByteArray: ...
    def rightJustified(
        self, width: int, fill: bytes = ..., truncate: bool = ...
    ) -> QByteArray: ...
    def leftJustified(
        self, width: int, fill: bytes = ..., truncate: bool = ...
    ) -> QByteArray: ...
    def simplified(self) -> QByteArray: ...
    def trimmed(self) -> QByteArray: ...
    def toUpper(self) -> QByteArray: ...
    def toLower(self) -> QByteArray: ...
    def chop(self, n: int) -> None: ...
    def truncate(self, pos: int) -> None: ...
    def endsWith(
        self, bv: QByteArray | bytes | bytearray | memoryview
    ) -> bool: ...
    def startsWith(
        self, bv: QByteArray | bytes | bytearray | memoryview
    ) -> bool: ...
    def last(self, n: int) -> QByteArray: ...
    def first(self, n: int) -> QByteArray: ...
    def mid(self, index: int, length: int = ...) -> QByteArray: ...
    def right(self, len: int) -> QByteArray: ...
    def left(self, len: int) -> QByteArray: ...
    @typing.overload
    def count(
        self, bv: QByteArray | bytes | bytearray | memoryview
    ) -> int: ...
    @typing.overload
    def count(self) -> int: ...
    def lastIndexOf(
        self, bv: QByteArray | bytes | bytearray | memoryview, from_: int = ...
    ) -> int: ...
    def indexOf(
        self, bv: QByteArray | bytes | bytearray | memoryview, from_: int = ...
    ) -> int: ...
    def clear(self) -> None: ...
    def fill(self, c: bytes, size: int = ...) -> QByteArray: ...
    @typing.overload
    def resize(self, size: int) -> None: ...
    @typing.overload
    def resize(self, size: int, c: str) -> None: ...

class QByteArrayMatcher(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self, pattern: bytes | None, length: int = ...) -> None: ...
    @typing.overload
    def __init__(
        self, pattern: QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QByteArrayMatcher) -> None: ...
    def pattern(self) -> QByteArray: ...
    @typing.overload
    def indexIn(
        self,
        data: QByteArray | bytes | bytearray | memoryview,
        from_: int = ...,
    ) -> int: ...
    @typing.overload
    def indexIn(
        self, str: bytes | None, len: int, from_: int = ...
    ) -> int: ...
    def setPattern(
        self, pattern: QByteArray | bytes | bytearray | memoryview
    ) -> None: ...

class QCalendar(PyQt6.sip.simplewrapper):
    class System(enum.Enum):
        Gregorian = ...
        Julian = ...
        Milankovic = ...
        Jalali = ...
        IslamicCivil = ...

    Unspecified: int = ...

    class YearMonthDay(PyQt6.sip.simplewrapper):
        day: int = ...
        month: int = ...
        year: int = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(
            self, year: int, month: int = ..., day: int = ...
        ) -> None: ...
        @typing.overload
        def __init__(self, a0: QCalendar.YearMonthDay) -> None: ...
        def isValid(self) -> bool: ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, system: QCalendar.System) -> None: ...
    @typing.overload
    def __init__(
        self, name: QByteArray | bytes | bytearray | memoryview | str | None
    ) -> None: ...
    @typing.overload
    def __init__(self, a0: QCalendar) -> None: ...
    def matchCenturyToWeekday(
        self, parts: QCalendar.YearMonthDay, dow: int
    ) -> QDate: ...
    @staticmethod
    def availableCalendars() -> list[str]: ...
    def dateTimeToString(
        self,
        format: str,
        datetime: QDateTime | datetime.datetime,
        dateOnly: QDate | datetime.date,
        timeOnly: QTime | datetime.time,
        locale: QLocale,
    ) -> str: ...
    def standaloneWeekDayName(
        self, locale: QLocale, day: int, format: QLocale.FormatType = ...
    ) -> str: ...
    def weekDayName(
        self, locale: QLocale, day: int, format: QLocale.FormatType = ...
    ) -> str: ...
    def standaloneMonthName(
        self,
        locale: QLocale,
        month: int,
        year: int = ...,
        format: QLocale.FormatType = ...,
    ) -> str: ...
    def monthName(
        self,
        locale: QLocale,
        month: int,
        year: int = ...,
        format: QLocale.FormatType = ...,
    ) -> str: ...
    def dayOfWeek(self, date: QDate | datetime.date) -> int: ...
    def partsFromDate(
        self, date: QDate | datetime.date
    ) -> QCalendar.YearMonthDay: ...
    @typing.overload
    def dateFromParts(self, year: int, month: int, day: int) -> QDate: ...
    @typing.overload
    def dateFromParts(self, parts: QCalendar.YearMonthDay) -> QDate: ...
    def name(self) -> str: ...
    def maximumMonthsInYear(self) -> int: ...
    def minimumDaysInMonth(self) -> int: ...
    def maximumDaysInMonth(self) -> int: ...
    def hasYearZero(self) -> bool: ...
    def isProleptic(self) -> bool: ...
    def isSolar(self) -> bool: ...
    def isLuniSolar(self) -> bool: ...
    def isLunar(self) -> bool: ...
    def isGregorian(self) -> bool: ...
    def isLeapYear(self, year: int) -> bool: ...
    def isDateValid(self, year: int, month: int, day: int) -> bool: ...
    def monthsInYear(self, year: int) -> int: ...
    def daysInYear(self, year: int) -> int: ...
    def daysInMonth(self, month: int, year: int = ...) -> int: ...

class QCborError(PyQt6.sip.simplewrapper):
    class Code(enum.Enum):
        UnknownError = ...
        AdvancePastEnd = ...
        InputOutputError = ...
        GarbageAtEnd = ...
        EndOfFile = ...
        UnexpectedBreak = ...
        UnknownType = ...
        IllegalType = ...
        IllegalNumber = ...
        IllegalSimpleType = ...
        InvalidUtf8String = ...
        DataTooLarge = ...
        NestingTooDeep = ...
        UnsupportedType = ...
        NoError = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QCborError) -> None: ...
    def toString(self) -> str: ...
    def code(self) -> QCborError.Code: ...

class QCborStreamReader(PyQt6.sip.simplewrapper):
    class StringResultCode(enum.Enum):
        EndOfString = ...
        Ok = ...
        Error = ...

    class Type(enum.Enum):
        UnsignedInteger = ...
        NegativeInteger = ...
        ByteString = ...
        ByteArray = ...
        TextString = ...
        String = ...
        Array = ...
        Map = ...
        Tag = ...
        SimpleType = ...
        HalfFloat = ...
        Float16 = ...
        Float = ...
        Double = ...
        Invalid = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, data: QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    @typing.overload
    def __init__(self, device: QIODevice | None) -> None: ...
    def readAllByteArray(self) -> QByteArray: ...
    def readAllUtf8String(self) -> QByteArray: ...
    def readAllString(self) -> str: ...
    def readAndAppendToByteArray(
        self, dst: QByteArray | bytes | bytearray | memoryview
    ) -> bool: ...
    def readAndAppendToUtf8String(
        self, dst: QByteArray | bytes | bytearray | memoryview
    ) -> bool: ...
    def readAndAppendToString(self, dst: str | None) -> bool: ...
    def toInteger(self) -> int: ...
    def toDouble(self) -> float: ...
    def toSimpleType(self) -> QCborSimpleType: ...
    def toUnsignedInteger(self) -> int: ...
    def toBool(self) -> bool: ...
    def readUtf8String(
        self,
    ) -> tuple[QByteArray, QCborStreamReader.StringResultCode]: ...
    def readByteArray(
        self,
    ) -> tuple[QByteArray, QCborStreamReader.StringResultCode]: ...
    def readString(self) -> tuple[str, QCborStreamReader.StringResultCode]: ...
    def leaveContainer(self) -> bool: ...
    def enterContainer(self) -> bool: ...
    def isContainer(self) -> bool: ...
    def __len__(self) -> int: ...
    def length(self) -> int: ...
    def isLengthKnown(self) -> bool: ...
    def isUndefined(self) -> bool: ...
    def isNull(self) -> bool: ...
    def isBool(self) -> bool: ...
    def isTrue(self) -> bool: ...
    def isFalse(self) -> bool: ...
    def isInvalid(self) -> bool: ...
    def isDouble(self) -> bool: ...
    def isFloat(self) -> bool: ...
    def isFloat16(self) -> bool: ...
    @typing.overload
    def isSimpleType(self) -> bool: ...
    @typing.overload
    def isSimpleType(self, st: QCborSimpleType) -> bool: ...
    def isTag(self) -> bool: ...
    def isMap(self) -> bool: ...
    def isArray(self) -> bool: ...
    def isString(self) -> bool: ...
    def isByteArray(self) -> bool: ...
    def isInteger(self) -> bool: ...
    def isNegativeInteger(self) -> bool: ...
    def isUnsignedInteger(self) -> bool: ...
    def type(self) -> QCborStreamReader.Type: ...
    def next(self, maxRecursion: int = ...) -> bool: ...
    def hasNext(self) -> bool: ...
    def parentContainerType(self) -> QCborStreamReader.Type: ...
    def containerDepth(self) -> int: ...
    def isValid(self) -> bool: ...
    def currentOffset(self) -> int: ...
    def lastError(self) -> QCborError: ...
    def reset(self) -> None: ...
    def clear(self) -> None: ...
    def reparse(self) -> None: ...
    def addData(
        self, data: QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def device(self) -> QIODevice | None: ...
    def setDevice(self, device: QIODevice | None) -> None: ...

class QCborStreamWriter(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self, device: QIODevice | None) -> None: ...
    @typing.overload
    def __init__(self, data: QByteArray | None) -> None: ...
    def endMap(self) -> bool: ...
    @typing.overload
    def startMap(self) -> None: ...
    @typing.overload
    def startMap(self, count: int) -> None: ...
    def endArray(self) -> bool: ...
    @typing.overload
    def startArray(self) -> None: ...
    @typing.overload
    def startArray(self, count: int) -> None: ...
    def appendUndefined(self) -> None: ...
    def appendNull(self) -> None: ...
    @typing.overload
    def append(
        self, ba: QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    @typing.overload
    def append(self, str: str) -> None: ...
    @typing.overload
    def append(self, tag: QCborKnownTags) -> None: ...
    @typing.overload
    def append(self, st: QCborSimpleType) -> None: ...
    @typing.overload
    def append(self, b: bool) -> None: ...
    @typing.overload
    def append(self, d: float) -> None: ...
    @typing.overload
    def append(self, a0: int) -> None: ...
    def device(self) -> QIODevice | None: ...
    def setDevice(self, device: QIODevice | None) -> None: ...

class QChar(PyQt6.sip.simplewrapper):
    class Script(enum.Enum):
        Script_Unknown = ...
        Script_Inherited = ...
        Script_Common = ...
        Script_Latin = ...
        Script_Greek = ...
        Script_Cyrillic = ...
        Script_Armenian = ...
        Script_Hebrew = ...
        Script_Arabic = ...
        Script_Syriac = ...
        Script_Thaana = ...
        Script_Devanagari = ...
        Script_Bengali = ...
        Script_Gurmukhi = ...
        Script_Gujarati = ...
        Script_Oriya = ...
        Script_Tamil = ...
        Script_Telugu = ...
        Script_Kannada = ...
        Script_Malayalam = ...
        Script_Sinhala = ...
        Script_Thai = ...
        Script_Lao = ...
        Script_Tibetan = ...
        Script_Myanmar = ...
        Script_Georgian = ...
        Script_Hangul = ...
        Script_Ethiopic = ...
        Script_Cherokee = ...
        Script_CanadianAboriginal = ...
        Script_Ogham = ...
        Script_Runic = ...
        Script_Khmer = ...
        Script_Mongolian = ...
        Script_Hiragana = ...
        Script_Katakana = ...
        Script_Bopomofo = ...
        Script_Han = ...
        Script_Yi = ...
        Script_OldItalic = ...
        Script_Gothic = ...
        Script_Deseret = ...
        Script_Tagalog = ...
        Script_Hanunoo = ...
        Script_Buhid = ...
        Script_Tagbanwa = ...
        Script_Coptic = ...
        Script_Limbu = ...
        Script_TaiLe = ...
        Script_LinearB = ...
        Script_Ugaritic = ...
        Script_Shavian = ...
        Script_Osmanya = ...
        Script_Cypriot = ...
        Script_Braille = ...
        Script_Buginese = ...
        Script_NewTaiLue = ...
        Script_Glagolitic = ...
        Script_Tifinagh = ...
        Script_SylotiNagri = ...
        Script_OldPersian = ...
        Script_Kharoshthi = ...
        Script_Balinese = ...
        Script_Cuneiform = ...
        Script_Phoenician = ...
        Script_PhagsPa = ...
        Script_Nko = ...
        Script_Sundanese = ...
        Script_Lepcha = ...
        Script_OlChiki = ...
        Script_Vai = ...
        Script_Saurashtra = ...
        Script_KayahLi = ...
        Script_Rejang = ...
        Script_Lycian = ...
        Script_Carian = ...
        Script_Lydian = ...
        Script_Cham = ...
        Script_TaiTham = ...
        Script_TaiViet = ...
        Script_Avestan = ...
        Script_EgyptianHieroglyphs = ...
        Script_Samaritan = ...
        Script_Lisu = ...
        Script_Bamum = ...
        Script_Javanese = ...
        Script_MeeteiMayek = ...
        Script_ImperialAramaic = ...
        Script_OldSouthArabian = ...
        Script_InscriptionalParthian = ...
        Script_InscriptionalPahlavi = ...
        Script_OldTurkic = ...
        Script_Kaithi = ...
        Script_Batak = ...
        Script_Brahmi = ...
        Script_Mandaic = ...
        Script_Chakma = ...
        Script_MeroiticCursive = ...
        Script_MeroiticHieroglyphs = ...
        Script_Miao = ...
        Script_Sharada = ...
        Script_SoraSompeng = ...
        Script_Takri = ...
        Script_CaucasianAlbanian = ...
        Script_BassaVah = ...
        Script_Duployan = ...
        Script_Elbasan = ...
        Script_Grantha = ...
        Script_PahawhHmong = ...
        Script_Khojki = ...
        Script_LinearA = ...
        Script_Mahajani = ...
        Script_Manichaean = ...
        Script_MendeKikakui = ...
        Script_Modi = ...
        Script_Mro = ...
        Script_OldNorthArabian = ...
        Script_Nabataean = ...
        Script_Palmyrene = ...
        Script_PauCinHau = ...
        Script_OldPermic = ...
        Script_PsalterPahlavi = ...
        Script_Siddham = ...
        Script_Khudawadi = ...
        Script_Tirhuta = ...
        Script_WarangCiti = ...
        Script_Ahom = ...
        Script_AnatolianHieroglyphs = ...
        Script_Hatran = ...
        Script_Multani = ...
        Script_OldHungarian = ...
        Script_SignWriting = ...
        Script_Adlam = ...
        Script_Bhaiksuki = ...
        Script_Marchen = ...
        Script_Newa = ...
        Script_Osage = ...
        Script_Tangut = ...
        Script_MasaramGondi = ...
        Script_Nushu = ...
        Script_Soyombo = ...
        Script_ZanabazarSquare = ...
        Script_Dogra = ...
        Script_GunjalaGondi = ...
        Script_HanifiRohingya = ...
        Script_Makasar = ...
        Script_Medefaidrin = ...
        Script_OldSogdian = ...
        Script_Sogdian = ...
        Script_Elymaic = ...
        Script_Nandinagari = ...
        Script_NyiakengPuachueHmong = ...
        Script_Wancho = ...
        Script_Chorasmian = ...
        Script_DivesAkuru = ...
        Script_KhitanSmallScript = ...
        Script_Yezidi = ...
        Script_CyproMinoan = ...
        Script_NagMundari = ...
        Script_OldUyghur = ...
        Script_Tangsa = ...
        Script_Toto = ...
        Script_Vithkuqi = ...
        Script_Kawi = ...
        Script_Garay = ...
        Script_GurungKhema = ...
        Script_KiratRai = ...
        Script_OlOnal = ...
        Script_Sunuwar = ...
        Script_Todhri = ...
        Script_TuluTigalari = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QChar) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __ge__(self, rhs: str) -> bool: ...
    def __le__(self, rhs: str) -> bool: ...
    def __gt__(self, rhs: str) -> bool: ...
    def __lt__(self, rhs: str) -> bool: ...

class QCollatorSortKey(PyQt6.sip.simplewrapper):
    def __init__(self, other: QCollatorSortKey) -> None: ...
    def __ge__(self, rhs: QCollatorSortKey) -> bool: ...
    def __lt__(self, rhs: QCollatorSortKey) -> bool: ...
    def compare(self, key: QCollatorSortKey) -> int: ...
    def swap(self, other: QCollatorSortKey) -> None: ...

class QCollator(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, locale: QLocale) -> None: ...
    @typing.overload
    def __init__(self, a0: QCollator) -> None: ...
    @staticmethod
    def defaultSortKey(key: str) -> QCollatorSortKey: ...
    @staticmethod
    def defaultCompare(s1: str, s2: str) -> int: ...
    def sortKey(self, string: str | None) -> QCollatorSortKey: ...
    def compare(self, s1: str | None, s2: str | None) -> int: ...
    def ignorePunctuation(self) -> bool: ...
    def setIgnorePunctuation(self, on: bool) -> None: ...
    def numericMode(self) -> bool: ...
    def setNumericMode(self, on: bool) -> None: ...
    def setCaseSensitivity(self, cs: Qt.CaseSensitivity) -> None: ...
    def caseSensitivity(self) -> Qt.CaseSensitivity: ...
    def locale(self) -> QLocale: ...
    def setLocale(self, locale: QLocale) -> None: ...
    def swap(self, other: QCollator) -> None: ...

class QCommandLineOption(PyQt6.sip.simplewrapper):
    class Flag(enum.Flag):
        HiddenFromHelp = ...
        ShortOptionStyle = ...
        IgnoreOptionsAfter = ...

    @typing.overload
    def __init__(self, name: str | None) -> None: ...
    @typing.overload
    def __init__(
        self, names: collections.abc.Iterable[str | None]
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        name: str | None,
        description: str | None,
        valueName: str | None = ...,
        defaultValue: str | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        names: collections.abc.Iterable[str | None],
        description: str | None,
        valueName: str | None = ...,
        defaultValue: str | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QCommandLineOption) -> None: ...
    def setFlags(self, aflags: QCommandLineOption.Flag) -> None: ...
    def flags(self) -> QCommandLineOption.Flag: ...
    def defaultValues(self) -> list[str]: ...
    def setDefaultValues(
        self, defaultValues: collections.abc.Iterable[str | None]
    ) -> None: ...
    def setDefaultValue(self, defaultValue: str | None) -> None: ...
    def description(self) -> str: ...
    def setDescription(self, description: str | None) -> None: ...
    def valueName(self) -> str: ...
    def setValueName(self, name: str | None) -> None: ...
    def names(self) -> list[str]: ...
    def swap(self, other: QCommandLineOption) -> None: ...

class QCommandLineParser(PyQt6.sip.simplewrapper):
    class MessageType(enum.Enum):
        Information = ...
        Error = ...

    class OptionsAfterPositionalArgumentsMode(enum.Enum):
        ParseAsOptions = ...
        ParseAsPositionalArguments = ...

    class SingleDashWordOptionMode(enum.Enum):
        ParseAsCompactedShortOptions = ...
        ParseAsLongOptions = ...

    def __init__(self) -> None: ...
    @staticmethod
    def showMessageAndExit(
        type: QCommandLineParser.MessageType,
        message: str | None,
        exitCode: int = ...,
    ) -> None: ...
    def setOptionsAfterPositionalArgumentsMode(
        self, mode: QCommandLineParser.OptionsAfterPositionalArgumentsMode
    ) -> None: ...
    def showVersion(self) -> None: ...
    def addOptions(
        self, options: collections.abc.Iterable[QCommandLineOption]
    ) -> bool: ...
    def helpText(self) -> str: ...
    def showHelp(self, exitCode: int = ...) -> None: ...
    def unknownOptionNames(self) -> list[str]: ...
    def optionNames(self) -> list[str]: ...
    def positionalArguments(self) -> list[str]: ...
    @typing.overload
    def values(self, name: str | None) -> list[str]: ...
    @typing.overload
    def values(self, option: QCommandLineOption) -> list[str]: ...
    @typing.overload
    def value(self, name: str | None) -> str: ...
    @typing.overload
    def value(self, option: QCommandLineOption) -> str: ...
    @typing.overload
    def isSet(self, name: str | None) -> bool: ...
    @typing.overload
    def isSet(self, option: QCommandLineOption) -> bool: ...
    def errorText(self) -> str: ...
    def parse(
        self, arguments: collections.abc.Iterable[str | None]
    ) -> bool: ...
    @typing.overload
    def process(
        self, arguments: collections.abc.Iterable[str | None]
    ) -> None: ...
    @typing.overload
    def process(self, app: QCoreApplication) -> None: ...
    def clearPositionalArguments(self) -> None: ...
    def addPositionalArgument(
        self,
        name: str | None,
        description: str | None,
        syntax: str | None = ...,
    ) -> None: ...
    def applicationDescription(self) -> str: ...
    def setApplicationDescription(self, description: str | None) -> None: ...
    def addHelpOption(self) -> QCommandLineOption: ...
    def addVersionOption(self) -> QCommandLineOption: ...
    def addOption(self, commandLineOption: QCommandLineOption) -> bool: ...
    def setSingleDashWordOptionMode(
        self, parsingMode: QCommandLineParser.SingleDashWordOptionMode
    ) -> None: ...

class QConcatenateTablesProxyModel(QAbstractItemModel):
    def __init__(self, parent: QObject | None = ...) -> None: ...
    def roleNames(self) -> dict[int, QByteArray]: ...
    def sourceModels(self) -> list[QAbstractItemModel]: ...
    def span(self, index: QModelIndex) -> QSize: ...
    def dropMimeData(
        self,
        data: QMimeData | None,
        action: Qt.DropAction,
        row: int,
        column: int,
        parent: QModelIndex,
    ) -> bool: ...
    def canDropMimeData(
        self,
        data: QMimeData | None,
        action: Qt.DropAction,
        row: int,
        column: int,
        parent: QModelIndex,
    ) -> bool: ...
    def mimeData(
        self, indexes: collections.abc.Iterable[QModelIndex]
    ) -> QMimeData | None: ...
    def mimeTypes(self) -> list[str]: ...
    def columnCount(self, parent: QModelIndex = ...) -> int: ...
    def headerData(
        self, section: int, orientation: Qt.Orientation, role: int = ...
    ) -> typing.Any: ...
    def rowCount(self, parent: QModelIndex = ...) -> int: ...
    def parent(self, index: QModelIndex) -> QModelIndex: ...
    def index(
        self, row: int, column: int, parent: QModelIndex = ...
    ) -> QModelIndex: ...
    def flags(self, index: QModelIndex) -> Qt.ItemFlag: ...
    def setItemData(
        self, index: QModelIndex, roles: dict[int, typing.Any]
    ) -> bool: ...
    def itemData(self, proxyIndex: QModelIndex) -> dict[int, typing.Any]: ...
    def setData(
        self, index: QModelIndex, value: typing.Any, role: int = ...
    ) -> bool: ...
    def data(self, index: QModelIndex, role: int = ...) -> typing.Any: ...
    def mapToSource(self, proxyIndex: QModelIndex) -> QModelIndex: ...
    def mapFromSource(self, sourceIndex: QModelIndex) -> QModelIndex: ...
    def removeSourceModel(
        self, sourceModel: QAbstractItemModel | None
    ) -> None: ...
    def addSourceModel(
        self, sourceModel: QAbstractItemModel | None
    ) -> None: ...

class QCoreApplication(QObject):
    def __init__(self, argv: list[str]) -> None: ...
    def requestPermission(
        self,
        permission: QBluetoothPermission
        | QCalendarPermission
        | QCameraPermission
        | QContactsPermission
        | QLocationPermission
        | QMicrophonePermission,
        handler: collections.abc.Callable[
            [
                QBluetoothPermission
                | QCalendarPermission
                | QCameraPermission
                | QContactsPermission
                | QLocationPermission
                | QMicrophonePermission
            ],
            None,
        ],
    ) -> None: ...
    def checkPermission(
        self,
        permission: QBluetoothPermission
        | QCalendarPermission
        | QCameraPermission
        | QContactsPermission
        | QLocationPermission
        | QMicrophonePermission,
    ) -> Qt.PermissionStatus: ...
    def __exit__(
        self, type: typing.Any, value: typing.Any, traceback: typing.Any
    ) -> None: ...
    def __enter__(self) -> typing.Any: ...
    @staticmethod
    def isSetuidAllowed() -> bool: ...
    @staticmethod
    def setSetuidAllowed(allow: bool) -> None: ...
    def removeNativeEventFilter(
        self, filterObj: QAbstractNativeEventFilter | None
    ) -> None: ...
    def installNativeEventFilter(
        self, filterObj: QAbstractNativeEventFilter | None
    ) -> None: ...
    @staticmethod
    def setQuitLockEnabled(enabled: bool) -> None: ...
    @staticmethod
    def isQuitLockEnabled() -> bool: ...
    @staticmethod
    def setEventDispatcher(
        eventDispatcher: QAbstractEventDispatcher | None,
    ) -> None: ...
    @staticmethod
    def eventDispatcher() -> QAbstractEventDispatcher | None: ...
    @staticmethod
    def applicationPid() -> int: ...
    @staticmethod
    def applicationVersion() -> str: ...
    @staticmethod
    def setApplicationVersion(version: str | None) -> None: ...
    def event(self, a0: QEvent | None) -> bool: ...
    aboutToQuit: typing.ClassVar[pyqtSignal]
    @staticmethod
    def exit(returnCode: int = ...) -> None: ...
    @staticmethod
    def quit() -> None: ...
    @staticmethod
    def testAttribute(attribute: Qt.ApplicationAttribute) -> bool: ...
    @staticmethod
    def setAttribute(
        attribute: Qt.ApplicationAttribute, on: bool = ...
    ) -> None: ...
    @staticmethod
    def translate(
        context: str | None,
        sourceText: str | None,
        disambiguation: str | None = ...,
        n: int = ...,
    ) -> str: ...
    @staticmethod
    def removeTranslator(messageFile: QTranslator | None) -> bool: ...
    @staticmethod
    def installTranslator(messageFile: QTranslator | None) -> bool: ...
    @staticmethod
    def removeLibraryPath(a0: str | None) -> None: ...
    @staticmethod
    def addLibraryPath(a0: str | None) -> None: ...
    @staticmethod
    def libraryPaths() -> list[str]: ...
    @staticmethod
    def setLibraryPaths(a0: collections.abc.Iterable[str | None]) -> None: ...
    @staticmethod
    def applicationFilePath() -> str: ...
    @staticmethod
    def applicationDirPath() -> str: ...
    @staticmethod
    def closingDown() -> bool: ...
    @staticmethod
    def startingUp() -> bool: ...
    def notify(self, a0: QObject | None, a1: QEvent | None) -> bool: ...
    @staticmethod
    def removePostedEvents(
        receiver: QObject | None, eventType: int = ...
    ) -> None: ...
    @staticmethod
    def sendPostedEvents(
        receiver: QObject | None = ..., eventType: int = ...
    ) -> None: ...
    @staticmethod
    def postEvent(
        receiver: QObject | None, event: QEvent | None, priority: int = ...
    ) -> None: ...
    @staticmethod
    def sendEvent(receiver: QObject | None, event: QEvent | None) -> bool: ...
    @typing.overload
    @staticmethod
    def processEvents(flags: QEventLoop.ProcessEventsFlag = ...) -> None: ...
    @typing.overload
    @staticmethod
    def processEvents(
        flags: QEventLoop.ProcessEventsFlag, maxtime: int
    ) -> None: ...
    @typing.overload
    @staticmethod
    def processEvents(
        flags: QEventLoop.ProcessEventsFlag, deadline: QDeadlineTimer
    ) -> None: ...
    @staticmethod
    def exec() -> int: ...
    @staticmethod
    def instance() -> QCoreApplication | None: ...
    @staticmethod
    def arguments() -> list[str]: ...
    @staticmethod
    def applicationName() -> str: ...
    @staticmethod
    def setApplicationName(application: str | None) -> None: ...
    @staticmethod
    def organizationName() -> str: ...
    @staticmethod
    def setOrganizationName(orgName: str | None) -> None: ...
    @staticmethod
    def organizationDomain() -> str: ...
    @staticmethod
    def setOrganizationDomain(orgDomain: str | None) -> None: ...

class QEvent(PyQt6.sip.wrapper):
    class Type(enum.IntEnum):
        None_ = ...
        Timer = ...
        MouseButtonPress = ...
        MouseButtonRelease = ...
        MouseButtonDblClick = ...
        MouseMove = ...
        KeyPress = ...
        KeyRelease = ...
        FocusIn = ...
        FocusOut = ...
        Enter = ...
        Leave = ...
        Paint = ...
        Move = ...
        Resize = ...
        Show = ...
        Hide = ...
        Close = ...
        Quit = ...
        ParentChange = ...
        ParentAboutToChange = ...
        ThreadChange = ...
        WindowActivate = ...
        WindowDeactivate = ...
        ShowToParent = ...
        HideToParent = ...
        Wheel = ...
        WindowTitleChange = ...
        WindowIconChange = ...
        ApplicationWindowIconChange = ...
        ApplicationFontChange = ...
        ApplicationLayoutDirectionChange = ...
        ApplicationPaletteChange = ...
        PaletteChange = ...
        Clipboard = ...
        MetaCall = ...
        SockAct = ...
        WinEventAct = ...
        DeferredDelete = ...
        DragEnter = ...
        DragMove = ...
        DragLeave = ...
        Drop = ...
        ChildAdded = ...
        ChildPolished = ...
        ChildRemoved = ...
        PolishRequest = ...
        Polish = ...
        LayoutRequest = ...
        UpdateRequest = ...
        UpdateLater = ...
        ContextMenu = ...
        InputMethod = ...
        TabletMove = ...
        LocaleChange = ...
        LanguageChange = ...
        LayoutDirectionChange = ...
        TabletPress = ...
        TabletRelease = ...
        OkRequest = ...
        IconDrag = ...
        FontChange = ...
        EnabledChange = ...
        ActivationChange = ...
        StyleChange = ...
        IconTextChange = ...
        ModifiedChange = ...
        MouseTrackingChange = ...
        WindowBlocked = ...
        WindowUnblocked = ...
        WindowStateChange = ...
        ToolTip = ...
        WhatsThis = ...
        StatusTip = ...
        ActionChanged = ...
        ActionAdded = ...
        ActionRemoved = ...
        FileOpen = ...
        Shortcut = ...
        ShortcutOverride = ...
        WhatsThisClicked = ...
        ToolBarChange = ...
        ApplicationActivate = ...
        ApplicationActivated = ...
        ApplicationDeactivate = ...
        ApplicationDeactivated = ...
        QueryWhatsThis = ...
        EnterWhatsThisMode = ...
        LeaveWhatsThisMode = ...
        ZOrderChange = ...
        HoverEnter = ...
        HoverLeave = ...
        HoverMove = ...
        GraphicsSceneMouseMove = ...
        GraphicsSceneMousePress = ...
        GraphicsSceneMouseRelease = ...
        GraphicsSceneMouseDoubleClick = ...
        GraphicsSceneContextMenu = ...
        GraphicsSceneHoverEnter = ...
        GraphicsSceneHoverMove = ...
        GraphicsSceneHoverLeave = ...
        GraphicsSceneHelp = ...
        GraphicsSceneDragEnter = ...
        GraphicsSceneDragMove = ...
        GraphicsSceneDragLeave = ...
        GraphicsSceneDrop = ...
        GraphicsSceneWheel = ...
        GraphicsSceneResize = ...
        GraphicsSceneMove = ...
        KeyboardLayoutChange = ...
        DynamicPropertyChange = ...
        TabletEnterProximity = ...
        TabletLeaveProximity = ...
        NonClientAreaMouseMove = ...
        NonClientAreaMouseButtonPress = ...
        NonClientAreaMouseButtonRelease = ...
        NonClientAreaMouseButtonDblClick = ...
        MacSizeChange = ...
        ContentsRectChange = ...
        CursorChange = ...
        ToolTipChange = ...
        GrabMouse = ...
        UngrabMouse = ...
        GrabKeyboard = ...
        UngrabKeyboard = ...
        StateMachineSignal = ...
        StateMachineWrapped = ...
        TouchBegin = ...
        TouchUpdate = ...
        TouchEnd = ...
        NativeGesture = ...
        RequestSoftwareInputPanel = ...
        CloseSoftwareInputPanel = ...
        WinIdChange = ...
        Gesture = ...
        GestureOverride = ...
        FocusAboutToChange = ...
        ScrollPrepare = ...
        Scroll = ...
        Expose = ...
        InputMethodQuery = ...
        OrientationChange = ...
        TouchCancel = ...
        PlatformPanel = ...
        ApplicationStateChange = ...
        ReadOnlyChange = ...
        PlatformSurface = ...
        TabletTrackingChange = ...
        GraphicsSceneLeave = ...
        EnterEditFocus = ...
        LeaveEditFocus = ...
        DevicePixelRatioChange = ...
        ChildWindowAdded = ...
        ChildWindowRemoved = ...
        ParentWindowAboutToChange = ...
        ParentWindowChange = ...
        SafeAreaMarginsChange = ...
        User = ...
        MaxUser = ...

    @typing.overload
    def __init__(self, type: QEvent.Type) -> None: ...
    @typing.overload
    @deprecated("""""")
    def __init__(self, type: int) -> None: ...
    def clone(self) -> QEvent | None: ...
    def isSinglePointEvent(self) -> bool: ...
    def isPointerEvent(self) -> bool: ...
    def isInputEvent(self) -> bool: ...
    @staticmethod
    def registerEventType(hint: int = ...) -> int: ...
    def ignore(self) -> None: ...
    def accept(self) -> None: ...
    def isAccepted(self) -> bool: ...
    def setAccepted(self, accepted: bool) -> None: ...
    def spontaneous(self) -> bool: ...
    def type(self) -> QEvent.Type: ...

class QTimerEvent(QEvent):
    def __init__(self, timerId: int) -> None: ...
    def matches(self, timer: QBasicTimer) -> bool: ...
    def id(self) -> int: ...
    def clone(self) -> QTimerEvent | None: ...
    def timerId(self) -> int: ...

class QChildEvent(QEvent):
    @typing.overload
    def __init__(self, type: QEvent.Type, child: QObject | None) -> None: ...
    @typing.overload
    def __init__(self, type: int, child: QObject | None) -> None: ...
    def clone(self) -> QChildEvent | None: ...
    def removed(self) -> bool: ...
    def polished(self) -> bool: ...
    def added(self) -> bool: ...
    def child(self) -> QObject | None: ...

class QDynamicPropertyChangeEvent(QEvent):
    def __init__(
        self, name: QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def clone(self) -> QDynamicPropertyChangeEvent | None: ...
    def propertyName(self) -> QByteArray: ...

class QCryptographicHash(PyQt6.sip.simplewrapper):
    class Algorithm(enum.Enum):
        Md4 = ...
        Md5 = ...
        Sha1 = ...
        Sha224 = ...
        Sha256 = ...
        Sha384 = ...
        Sha512 = ...
        Sha3_224 = ...
        Sha3_256 = ...
        Sha3_384 = ...
        Sha3_512 = ...
        Keccak_224 = ...
        Keccak_256 = ...
        Keccak_384 = ...
        Keccak_512 = ...
        Blake2b_160 = ...
        Blake2b_256 = ...
        Blake2b_384 = ...
        Blake2b_512 = ...
        Blake2s_128 = ...
        Blake2s_160 = ...
        Blake2s_224 = ...
        Blake2s_256 = ...

    def __init__(self, method: QCryptographicHash.Algorithm) -> None: ...
    @staticmethod
    def supportsAlgorithm(method: QCryptographicHash.Algorithm) -> bool: ...
    def algorithm(self) -> QCryptographicHash.Algorithm: ...
    def swap(self, other: QCryptographicHash) -> None: ...
    @staticmethod
    def hashLength(method: QCryptographicHash.Algorithm) -> int: ...
    @staticmethod
    def hash(
        data: QByteArray | bytes | bytearray | memoryview,
        method: QCryptographicHash.Algorithm,
    ) -> QByteArray: ...
    def resultView(self) -> QByteArray: ...
    def result(self) -> QByteArray: ...
    @typing.overload
    def addData(
        self, data: QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    @typing.overload
    def addData(self, data: PyQt6.sip.array[bytes] | None) -> None: ...
    @typing.overload
    def addData(self, device: QIODevice | None) -> bool: ...
    def reset(self) -> None: ...

class QDataStream(QIODeviceBase):
    class FloatingPointPrecision(enum.Enum):
        SinglePrecision = ...
        DoublePrecision = ...

    class Status(enum.Enum):
        Ok = ...
        ReadPastEnd = ...
        ReadCorruptData = ...
        WriteFailed = ...
        SizeLimitExceeded = ...

    class ByteOrder(enum.Enum):
        BigEndian = ...
        LittleEndian = ...

    class Version(enum.IntEnum):
        Qt_1_0 = ...
        Qt_2_0 = ...
        Qt_2_1 = ...
        Qt_3_0 = ...
        Qt_3_1 = ...
        Qt_3_3 = ...
        Qt_4_0 = ...
        Qt_4_1 = ...
        Qt_4_2 = ...
        Qt_4_3 = ...
        Qt_4_4 = ...
        Qt_4_5 = ...
        Qt_4_6 = ...
        Qt_4_7 = ...
        Qt_4_8 = ...
        Qt_4_9 = ...
        Qt_5_0 = ...
        Qt_5_1 = ...
        Qt_5_2 = ...
        Qt_5_3 = ...
        Qt_5_4 = ...
        Qt_5_5 = ...
        Qt_5_6 = ...
        Qt_5_7 = ...
        Qt_5_8 = ...
        Qt_5_9 = ...
        Qt_5_10 = ...
        Qt_5_11 = ...
        Qt_5_12 = ...
        Qt_5_13 = ...
        Qt_5_14 = ...
        Qt_5_15 = ...
        Qt_6_0 = ...
        Qt_6_1 = ...
        Qt_6_2 = ...
        Qt_6_3 = ...
        Qt_6_4 = ...
        Qt_6_5 = ...
        Qt_6_6 = ...
        Qt_6_7 = ...
        Qt_6_8 = ...
        Qt_6_9 = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QIODevice | None) -> None: ...
    @typing.overload
    def __init__(
        self, a0: QByteArray | None, flags: QIODeviceBase.OpenModeFlag
    ) -> None: ...
    @typing.overload
    def __init__(
        self, a0: QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    @typing.overload
    def __lshift__(self, a0: QBitArray) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, a0: QByteArray) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, a0: str) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, combination: QKeyCombination) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, a0: QDate | datetime.date) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, a0: QTime | datetime.time) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, a0: QDateTime | datetime.datetime) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, a0: QEasingCurve) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, a0: QJsonDocument) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, a0: QJsonValue | None) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, a0: QLine) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, a0: QLineF) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, a0: QLocale) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, a0: QMargins) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, a0: QMarginsF) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, a0: QPoint) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, a0: QPointF) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, a0: QRect) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, a0: QRectF) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, re: QRegularExpression) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, a0: QSize) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, a0: QSizeF) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, tz: QTimeZone) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, revision: QTypeRevision) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, a0: QUrl) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, a0: QUuid) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, p: QVariant | None) -> QDataStream: ...
    @typing.overload
    def __lshift__(self, version: QVersionNumber) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, a0: QBitArray) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, a0: QByteArray) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, a0: QChar) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, combination: QKeyCombination) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, a0: QDate) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, a0: QTime) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, a0: QDateTime) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, a0: QEasingCurve) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, a0: QJsonDocument) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, a0: QJsonValue | None) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, a0: QLine) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, a0: QLineF) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, a0: QLocale) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, a0: QMargins) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, a0: QMarginsF) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, a0: QPoint) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, a0: QPointF) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, a0: QRect) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, a0: QRectF) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, re: QRegularExpression) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, a0: QSize) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, a0: QSizeF) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, tz: QTimeZone) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, revision: QTypeRevision) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, a0: QUrl) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, a0: QUuid) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, p: QVariant | None) -> QDataStream: ...
    @typing.overload
    def __rshift__(self, version: QVersionNumber) -> QDataStream: ...
    def writeQVariantHash(
        self, qvarhash: dict[str | None, typing.Any]
    ) -> None: ...
    def readQVariantHash(self) -> dict[str, typing.Any]: ...
    def writeQVariantMap(
        self, qvarmap: dict[str | None, typing.Any]
    ) -> None: ...
    def readQVariantMap(self) -> dict[str, typing.Any]: ...
    def writeQVariantList(
        self, qvarlst: collections.abc.Iterable[typing.Any]
    ) -> None: ...
    def readQVariantList(self) -> list[typing.Any]: ...
    def writeQVariant(self, qvar: typing.Any) -> None: ...
    def readQVariant(self) -> typing.Any: ...
    def writeQStringList(
        self, qstrlst: collections.abc.Iterable[str | None]
    ) -> None: ...
    def readQStringList(self) -> list[str]: ...
    def writeQString(self, qstr: str | None) -> None: ...
    def readQString(self) -> str: ...
    def writeString(self, str: bytes | None) -> None: ...
    def writeDouble(self, f: float) -> None: ...
    def writeFloat(self, f: float) -> None: ...
    def writeBool(self, i: bool) -> None: ...
    def writeUInt64(self, i: int) -> None: ...
    def writeInt64(self, i: int) -> None: ...
    def writeUInt32(self, i: int) -> None: ...
    def writeInt32(self, i: int) -> None: ...
    def writeUInt16(self, i: int) -> None: ...
    def writeInt16(self, i: int) -> None: ...
    def writeUInt8(self, i: int) -> None: ...
    def writeInt8(self, i: int) -> None: ...
    def writeInt(self, i: int) -> None: ...
    def readString(self) -> bytes: ...
    def readDouble(self) -> float: ...
    def readFloat(self) -> float: ...
    def readBool(self) -> bool: ...
    def readUInt64(self) -> int: ...
    def readInt64(self) -> int: ...
    def readUInt32(self) -> int: ...
    def readInt32(self) -> int: ...
    def readUInt16(self) -> int: ...
    def readInt16(self) -> int: ...
    def readUInt8(self) -> int: ...
    def readInt8(self) -> int: ...
    def readInt(self) -> int: ...
    def abortTransaction(self) -> None: ...
    def rollbackTransaction(self) -> None: ...
    def commitTransaction(self) -> bool: ...
    def startTransaction(self) -> None: ...
    def skipRawData(self, len: int) -> int: ...
    def writeRawData(self, a0: PyQt6.sip.Buffer) -> int: ...
    def writeBytes(self, a0: PyQt6.sip.Buffer) -> QDataStream: ...
    def readRawData(self, len: int) -> bytes: ...
    def readBytes(self) -> bytes: ...
    def setVersion(self, a0: int) -> None: ...
    def version(self) -> int: ...
    def setByteOrder(self, a0: QDataStream.ByteOrder) -> None: ...
    def byteOrder(self) -> QDataStream.ByteOrder: ...
    def setFloatingPointPrecision(
        self, precision: QDataStream.FloatingPointPrecision
    ) -> None: ...
    def floatingPointPrecision(self) -> QDataStream.FloatingPointPrecision: ...
    def resetStatus(self) -> None: ...
    def setStatus(self, status: QDataStream.Status) -> None: ...
    def status(self) -> QDataStream.Status: ...
    def atEnd(self) -> bool: ...
    def setDevice(self, a0: QIODevice | None) -> None: ...
    def device(self) -> QIODevice | None: ...

class QDate(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, y: int, m: int, d: int) -> None: ...
    @typing.overload
    def __init__(self, y: int, m: int, d: int, cal: QCalendar) -> None: ...
    @typing.overload
    def __init__(self, a0: QDate) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __ge__(self, rhs: QDate | datetime.date) -> bool: ...
    def __le__(self, rhs: QDate | datetime.date) -> bool: ...
    def __gt__(self, rhs: QDate | datetime.date) -> bool: ...
    def __lt__(self, rhs: QDate | datetime.date) -> bool: ...
    def daysTo(self, d: QDate | datetime.date) -> int: ...
    @typing.overload
    def endOfDay(
        self, spec: Qt.TimeSpec = ..., offsetSeconds: int = ...
    ) -> QDateTime: ...
    @typing.overload
    def endOfDay(self, zone: QTimeZone) -> QDateTime: ...
    @typing.overload
    def startOfDay(
        self, spec: Qt.TimeSpec = ..., offsetSeconds: int = ...
    ) -> QDateTime: ...
    @typing.overload
    def startOfDay(self, zone: QTimeZone) -> QDateTime: ...
    def getDate(self) -> tuple[int | None, int | None, int | None]: ...
    @typing.overload
    def setDate(self, year: int, month: int, date: int) -> bool: ...
    @typing.overload
    def setDate(
        self, year: int, month: int, day: int, cal: QCalendar
    ) -> bool: ...
    def toJulianDay(self) -> int: ...
    @staticmethod
    def fromJulianDay(jd: int) -> QDate: ...
    @staticmethod
    def isLeapYear(year: int) -> bool: ...
    @typing.overload
    @staticmethod
    def fromString(
        string: str | None, format: Qt.DateFormat = ...
    ) -> QDate: ...
    @typing.overload
    @staticmethod
    def fromString(
        string: str | None, format: str | None, cal: QCalendar = ...
    ) -> QDate: ...
    @typing.overload
    @staticmethod
    def fromString(
        string: str | None,
        format: str | None,
        baseYear: int,
        cal: QCalendar = ...,
    ) -> QDate: ...
    @staticmethod
    def currentDate() -> QDate: ...
    @typing.overload
    def addYears(self, years: int) -> QDate: ...
    @typing.overload
    def addYears(self, years: int, cal: QCalendar) -> QDate: ...
    @typing.overload
    def addMonths(self, months: int) -> QDate: ...
    @typing.overload
    def addMonths(self, months: int, cal: QCalendar) -> QDate: ...
    def addDays(self, days: int) -> QDate: ...
    @typing.overload
    def toString(self, format: str | None, cal: QCalendar = ...) -> str: ...
    @typing.overload
    def toString(self, format: Qt.DateFormat = ...) -> str: ...
    def weekNumber(self) -> tuple[int, int | None]: ...
    @typing.overload
    def daysInYear(self) -> int: ...
    @typing.overload
    def daysInYear(self, cal: QCalendar) -> int: ...
    @typing.overload
    def daysInMonth(self) -> int: ...
    @typing.overload
    def daysInMonth(self, cal: QCalendar) -> int: ...
    @typing.overload
    def dayOfYear(self) -> int: ...
    @typing.overload
    def dayOfYear(self, cal: QCalendar) -> int: ...
    @typing.overload
    def dayOfWeek(self) -> int: ...
    @typing.overload
    def dayOfWeek(self, cal: QCalendar) -> int: ...
    @typing.overload
    def day(self) -> int: ...
    @typing.overload
    def day(self, cal: QCalendar) -> int: ...
    @typing.overload
    def month(self) -> int: ...
    @typing.overload
    def month(self, cal: QCalendar) -> int: ...
    @typing.overload
    def year(self) -> int: ...
    @typing.overload
    def year(self, cal: QCalendar) -> int: ...
    @typing.overload
    def isValid(self) -> bool: ...
    @typing.overload
    @staticmethod
    def isValid(y: int, m: int, d: int) -> bool: ...
    def __bool__(self) -> int: ...
    def isNull(self) -> bool: ...
    def toPyDate(self) -> datetime.date: ...
    def __hash__(self) -> int: ...

class QTime(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, h: int, m: int, second: int = ..., msec: int = ...
    ) -> None: ...
    @typing.overload
    def __init__(self, a0: QTime) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __ge__(self, rhs: QTime | datetime.time) -> bool: ...
    def __le__(self, rhs: QTime | datetime.time) -> bool: ...
    def __gt__(self, rhs: QTime | datetime.time) -> bool: ...
    def __lt__(self, rhs: QTime | datetime.time) -> bool: ...
    def msecsTo(self, t: QTime | datetime.time) -> int: ...
    def secsTo(self, t: QTime | datetime.time) -> int: ...
    def msecsSinceStartOfDay(self) -> int: ...
    @staticmethod
    def fromMSecsSinceStartOfDay(msecs: int) -> QTime: ...
    @typing.overload
    @staticmethod
    def fromString(
        string: str | None, format: Qt.DateFormat = ...
    ) -> QTime: ...
    @typing.overload
    @staticmethod
    def fromString(s: str | None, format: str | None) -> QTime: ...
    @staticmethod
    def currentTime() -> QTime: ...
    def addMSecs(self, ms: int) -> QTime: ...
    def addSecs(self, secs: int) -> QTime: ...
    def setHMS(self, h: int, m: int, s: int, msec: int = ...) -> bool: ...
    @typing.overload
    def toString(self, format: Qt.DateFormat = ...) -> str: ...
    @typing.overload
    def toString(self, format: str | None) -> str: ...
    def msec(self) -> int: ...
    def second(self) -> int: ...
    def minute(self) -> int: ...
    def hour(self) -> int: ...
    @typing.overload
    def isValid(self) -> bool: ...
    @typing.overload
    @staticmethod
    def isValid(h: int, m: int, s: int, msec: int = ...) -> bool: ...
    def __bool__(self) -> int: ...
    def isNull(self) -> bool: ...
    def toPyTime(self) -> datetime.time: ...
    def __hash__(self) -> int: ...

class QDateTime(PyQt6.sip.simplewrapper):
    class YearRange(enum.Enum):
        First = ...
        Last = ...

    class TransitionResolution(enum.Enum):
        Reject = ...
        RelativeToBefore = ...
        RelativeToAfter = ...
        PreferBefore = ...
        PreferAfter = ...
        PreferStandard = ...
        PreferDaylightSaving = ...
        LegacyBehavior = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QDateTime | datetime.datetime) -> None: ...
    @typing.overload
    def __init__(
        self,
        year: int,
        month: int,
        day: int,
        hour: int,
        minute: int,
        second: int = ...,
        msec: int = ...,
        timeSpec: int = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        date: QDate | datetime.date,
        time: QTime | datetime.time,
        resolve: QDateTime.TransitionResolution,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        date: QDate | datetime.date,
        time: QTime | datetime.time,
        spec: Qt.TimeSpec = ...,
        offsetSeconds: int = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        date: QDate | datetime.date,
        time: QTime | datetime.time,
        timeZone: QTimeZone,
        resolve: QDateTime.TransitionResolution = ...,
    ) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __ge__(self, rhs: QDateTime | datetime.datetime) -> bool: ...
    def __le__(self, rhs: QDateTime | datetime.datetime) -> bool: ...
    def __gt__(self, rhs: QDateTime | datetime.datetime) -> bool: ...
    def __lt__(self, rhs: QDateTime | datetime.datetime) -> bool: ...
    def timeRepresentation(self) -> QTimeZone: ...
    def setTime(
        self,
        time: QTime | datetime.time,
        resolve: QDateTime.TransitionResolution = ...,
    ) -> None: ...
    def setDate(
        self,
        date: QDate | datetime.date,
        resolve: QDateTime.TransitionResolution = ...,
    ) -> None: ...
    @staticmethod
    def currentSecsSinceEpoch() -> int: ...
    @typing.overload
    @staticmethod
    def fromSecsSinceEpoch(
        secs: int, spec: Qt.TimeSpec = ..., offsetSeconds: int = ...
    ) -> QDateTime: ...
    @typing.overload
    @staticmethod
    def fromSecsSinceEpoch(secs: int, timeZone: QTimeZone) -> QDateTime: ...
    def setSecsSinceEpoch(self, secs: int) -> None: ...
    def toSecsSinceEpoch(self) -> int: ...
    @typing.overload
    @staticmethod
    def fromMSecsSinceEpoch(
        msecs: int, spec: Qt.TimeSpec = ..., offsetSeconds: int = ...
    ) -> QDateTime: ...
    @typing.overload
    @staticmethod
    def fromMSecsSinceEpoch(msecs: int, timeZone: QTimeZone) -> QDateTime: ...
    def toTimeZone(self, toZone: QTimeZone) -> QDateTime: ...
    def toOffsetFromUtc(self, offsetSeconds: int) -> QDateTime: ...
    def setTimeZone(
        self, toZone: QTimeZone, resolve: QDateTime.TransitionResolution = ...
    ) -> None: ...
    def setOffsetFromUtc(self, offsetSeconds: int) -> None: ...
    def isDaylightTime(self) -> bool: ...
    def timeZoneAbbreviation(self) -> str: ...
    def timeZone(self) -> QTimeZone: ...
    def offsetFromUtc(self) -> int: ...
    def swap(self, other: QDateTime) -> None: ...
    @staticmethod
    def currentMSecsSinceEpoch() -> int: ...
    @staticmethod
    def currentDateTimeUtc() -> QDateTime: ...
    def msecsTo(self, a0: QDateTime | datetime.datetime) -> int: ...
    def setMSecsSinceEpoch(self, msecs: int) -> None: ...
    def toMSecsSinceEpoch(self) -> int: ...
    @typing.overload
    @staticmethod
    def fromString(
        string: str | None, format: Qt.DateFormat = ...
    ) -> QDateTime: ...
    @typing.overload
    @staticmethod
    def fromString(
        string: str | None, format: str | None, cal: QCalendar = ...
    ) -> QDateTime: ...
    @typing.overload
    @staticmethod
    def fromString(
        string: str | None,
        format: str | None,
        baseYear: int,
        cal: QCalendar = ...,
    ) -> QDateTime: ...
    @typing.overload
    @staticmethod
    def currentDateTime() -> QDateTime: ...
    @typing.overload
    @staticmethod
    def currentDateTime(zone: QTimeZone) -> QDateTime: ...
    def secsTo(self, a0: QDateTime | datetime.datetime) -> int: ...
    def daysTo(self, a0: QDateTime | datetime.datetime) -> int: ...
    def toUTC(self) -> QDateTime: ...
    def toLocalTime(self) -> QDateTime: ...
    def toTimeSpec(self, spec: Qt.TimeSpec) -> QDateTime: ...
    def addMSecs(self, msecs: int) -> QDateTime: ...
    def addSecs(self, secs: int) -> QDateTime: ...
    def addYears(self, years: int) -> QDateTime: ...
    def addMonths(self, months: int) -> QDateTime: ...
    def addDays(self, days: int) -> QDateTime: ...
    @typing.overload
    def toString(self, format: str | None, cal: QCalendar = ...) -> str: ...
    @typing.overload
    def toString(self, format: Qt.DateFormat = ...) -> str: ...
    def setTimeSpec(self, spec: Qt.TimeSpec) -> None: ...
    def timeSpec(self) -> Qt.TimeSpec: ...
    def time(self) -> QTime: ...
    def date(self) -> QDate: ...
    def isValid(self) -> bool: ...
    def __bool__(self) -> int: ...
    def isNull(self) -> bool: ...
    def toPyDateTime(self) -> datetime.datetime: ...
    def __hash__(self) -> int: ...

class QDeadlineTimer(PyQt6.sip.simplewrapper):
    class ForeverConstant(enum.Enum):
        Forever = ...

    @typing.overload
    def __init__(self, type: Qt.TimerType = ...) -> None: ...
    @typing.overload
    def __init__(
        self, a0: QDeadlineTimer.ForeverConstant, type: Qt.TimerType = ...
    ) -> None: ...
    @typing.overload
    def __init__(self, msecs: int, type: Qt.TimerType = ...) -> None: ...
    @typing.overload
    def __init__(self, a0: QDeadlineTimer) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __ge__(self, rhs: QDeadlineTimer) -> bool: ...
    def __le__(self, rhs: QDeadlineTimer) -> bool: ...
    def __gt__(self, rhs: QDeadlineTimer) -> bool: ...
    def __lt__(self, rhs: QDeadlineTimer) -> bool: ...
    def __add__(self, msecs: int) -> QDeadlineTimer: ...
    def __radd__(self, msecs: int) -> QDeadlineTimer: ...
    @typing.overload
    def __sub__(self, msecs: int) -> QDeadlineTimer: ...
    @typing.overload
    def __sub__(self, dt2: QDeadlineTimer) -> int: ...
    def __isub__(self, msecs: int) -> typing.Self: ...
    def __iadd__(self, msecs: int) -> typing.Self: ...
    @staticmethod
    def current(type: Qt.TimerType = ...) -> QDeadlineTimer: ...
    @staticmethod
    def addNSecs(dt: QDeadlineTimer, nsecs: int) -> QDeadlineTimer: ...
    def setPreciseDeadline(
        self, secs: int, nsecs: int = ..., type: Qt.TimerType = ...
    ) -> None: ...
    def setDeadline(self, msecs: int, type: Qt.TimerType = ...) -> None: ...
    def deadlineNSecs(self) -> int: ...
    def deadline(self) -> int: ...
    def setPreciseRemainingTime(
        self, secs: int, nsecs: int = ..., type: Qt.TimerType = ...
    ) -> None: ...
    def setRemainingTime(
        self, msecs: int, type: Qt.TimerType = ...
    ) -> None: ...
    def remainingTimeNSecs(self) -> int: ...
    def remainingTime(self) -> int: ...
    def setTimerType(self, type: Qt.TimerType) -> None: ...
    def timerType(self) -> Qt.TimerType: ...
    def hasExpired(self) -> bool: ...
    def isForever(self) -> bool: ...
    def swap(self, other: QDeadlineTimer) -> None: ...

class QDir(PyQt6.sip.simplewrapper):
    class SortFlag(enum.Flag):
        Name = ...
        Time = ...
        Size = ...
        Unsorted = ...
        SortByMask = ...
        DirsFirst = ...
        Reversed = ...
        IgnoreCase = ...
        DirsLast = ...
        LocaleAware = ...
        Type = ...
        NoSort = ...

    class Filter(enum.Flag):
        Dirs = ...
        Files = ...
        Drives = ...
        NoSymLinks = ...
        AllEntries = ...
        TypeMask = ...
        Readable = ...
        Writable = ...
        Executable = ...
        PermissionMask = ...
        Modified = ...
        Hidden = ...
        System = ...
        AccessMask = ...
        AllDirs = ...
        CaseSensitive = ...
        NoDotAndDotDot = ...
        NoFilter = ...
        NoDot = ...
        NoDotDot = ...

    @typing.overload
    def __init__(
        self,
        path: str | None,
        nameFilter: str | None,
        sort: QDir.SortFlag = ...,
        filters: QDir.Filter = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, a0: QDir) -> None: ...
    @typing.overload
    def __init__(self, path: str | None = ...) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def isEmpty(self, filters: QDir.Filter = ...) -> bool: ...
    @staticmethod
    def listSeparator() -> str: ...
    def swap(self, other: QDir) -> None: ...
    def removeRecursively(self) -> bool: ...
    @staticmethod
    def searchPaths(prefix: str | None) -> list[str]: ...
    @staticmethod
    def addSearchPath(prefix: str | None, path: str | None) -> None: ...
    @staticmethod
    def setSearchPaths(
        prefix: str | None, searchPaths: collections.abc.Iterable[str | None]
    ) -> None: ...
    @staticmethod
    def fromNativeSeparators(pathName: str | None) -> str: ...
    @staticmethod
    def toNativeSeparators(pathName: str | None) -> str: ...
    @staticmethod
    def cleanPath(path: str | None) -> str: ...
    @typing.overload
    @staticmethod
    def match(
        filters: collections.abc.Iterable[str | None], fileName: str | None
    ) -> bool: ...
    @typing.overload
    @staticmethod
    def match(filter: str | None, fileName: str | None) -> bool: ...
    @staticmethod
    def tempPath() -> str: ...
    @staticmethod
    def temp() -> QDir: ...
    @staticmethod
    def rootPath() -> str: ...
    @staticmethod
    def root() -> QDir: ...
    @staticmethod
    def homePath() -> str: ...
    @staticmethod
    def home() -> QDir: ...
    @staticmethod
    def currentPath() -> str: ...
    @staticmethod
    def current() -> QDir: ...
    @staticmethod
    def setCurrent(path: str | None) -> bool: ...
    @staticmethod
    def separator() -> str: ...
    @staticmethod
    def drives() -> list[QFileInfo]: ...
    def refresh(self) -> None: ...
    def rename(self, oldName: str | None, newName: str | None) -> bool: ...
    def remove(self, fileName: str | None) -> bool: ...
    def makeAbsolute(self) -> bool: ...
    def isAbsolute(self) -> bool: ...
    def isRelative(self) -> bool: ...
    @staticmethod
    def isAbsolutePath(path: str | None) -> bool: ...
    @staticmethod
    def isRelativePath(path: str | None) -> bool: ...
    def isRoot(self) -> bool: ...
    @typing.overload
    def exists(self) -> bool: ...
    @typing.overload
    def exists(self, name: str | None) -> bool: ...
    def isReadable(self) -> bool: ...
    def rmpath(self, dirPath: str | None) -> bool: ...
    def mkpath(self, dirPath: str | None) -> bool: ...
    def rmdir(self, dirName: str | None) -> bool: ...
    @typing.overload
    def mkdir(
        self, dirName: str | None, permissions: QFileDevice.Permission
    ) -> bool: ...
    @typing.overload
    def mkdir(self, dirName: str | None) -> bool: ...
    @typing.overload
    def entryInfoList(
        self, filters: QDir.Filter = ..., sort: QDir.SortFlag = ...
    ) -> list[QFileInfo]: ...
    @typing.overload
    def entryInfoList(
        self,
        nameFilters: collections.abc.Iterable[str | None],
        filters: QDir.Filter = ...,
        sort: QDir.SortFlag = ...,
    ) -> list[QFileInfo]: ...
    @typing.overload
    def entryList(
        self, filters: QDir.Filter = ..., sort: QDir.SortFlag = ...
    ) -> list[str]: ...
    @typing.overload
    def entryList(
        self,
        nameFilters: collections.abc.Iterable[str | None],
        filters: QDir.Filter = ...,
        sort: QDir.SortFlag = ...,
    ) -> list[str]: ...
    @staticmethod
    def nameFiltersFromString(nameFilter: str | None) -> list[str]: ...
    def __contains__(self, a0: str | None) -> int: ...
    @typing.overload
    def __getitem__(self, a0: int) -> str: ...
    @typing.overload
    def __getitem__(self, a0: slice) -> list[str]: ...
    def __len__(self) -> int: ...
    def count(self) -> int: ...
    def setSorting(self, sort: QDir.SortFlag) -> None: ...
    def sorting(self) -> QDir.SortFlag: ...
    def setFilter(self, filter: QDir.Filter) -> None: ...
    def filter(self) -> QDir.Filter: ...
    def setNameFilters(
        self, nameFilters: collections.abc.Iterable[str | None]
    ) -> None: ...
    def nameFilters(self) -> list[str]: ...
    def cdUp(self) -> bool: ...
    def cd(self, dirName: str | None) -> bool: ...
    def relativeFilePath(self, fileName: str | None) -> str: ...
    def absoluteFilePath(self, fileName: str | None) -> str: ...
    def filePath(self, fileName: str | None) -> str: ...
    def dirName(self) -> str: ...
    def canonicalPath(self) -> str: ...
    def absolutePath(self) -> str: ...
    def path(self) -> str: ...
    def setPath(self, path: str | None) -> None: ...

class QDirIterator(PyQt6.sip.simplewrapper):
    class IteratorFlag(enum.Flag):
        NoIteratorFlags = ...
        FollowSymlinks = ...
        Subdirectories = ...

    @typing.overload
    def __init__(
        self, dir: QDir, flags: QDirIterator.IteratorFlag = ...
    ) -> None: ...
    @typing.overload
    def __init__(
        self, path: str | None, flags: QDirIterator.IteratorFlag = ...
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        path: str | None,
        filter: QDir.Filter,
        flags: QDirIterator.IteratorFlag = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        path: str | None,
        nameFilters: collections.abc.Iterable[str | None],
        filters: QDir.Filter = ...,
        flags: QDirIterator.IteratorFlag = ...,
    ) -> None: ...
    def path(self) -> str: ...
    def fileInfo(self) -> QFileInfo: ...
    def filePath(self) -> str: ...
    def fileName(self) -> str: ...
    def hasNext(self) -> bool: ...
    def nextFileInfo(self) -> QFileInfo: ...
    def next(self) -> str: ...

class QEasingCurve(PyQt6.sip.simplewrapper):
    class Type(enum.Enum):
        Linear = ...
        InQuad = ...
        OutQuad = ...
        InOutQuad = ...
        OutInQuad = ...
        InCubic = ...
        OutCubic = ...
        InOutCubic = ...
        OutInCubic = ...
        InQuart = ...
        OutQuart = ...
        InOutQuart = ...
        OutInQuart = ...
        InQuint = ...
        OutQuint = ...
        InOutQuint = ...
        OutInQuint = ...
        InSine = ...
        OutSine = ...
        InOutSine = ...
        OutInSine = ...
        InExpo = ...
        OutExpo = ...
        InOutExpo = ...
        OutInExpo = ...
        InCirc = ...
        OutCirc = ...
        InOutCirc = ...
        OutInCirc = ...
        InElastic = ...
        OutElastic = ...
        InOutElastic = ...
        OutInElastic = ...
        InBack = ...
        OutBack = ...
        InOutBack = ...
        OutInBack = ...
        InBounce = ...
        OutBounce = ...
        InOutBounce = ...
        OutInBounce = ...
        InCurve = ...
        OutCurve = ...
        SineCurve = ...
        CosineCurve = ...
        BezierSpline = ...
        TCBSpline = ...
        Custom = ...

    @typing.overload
    def __init__(self, type: QEasingCurve.Type = ...) -> None: ...
    @typing.overload
    def __init__(self, other: QEasingCurve | QEasingCurve.Type) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def toCubicSpline(self) -> list[QPointF]: ...
    def addTCBSegment(
        self, nextPoint: QPointF, t: float, c: float, b: float
    ) -> None: ...
    def addCubicBezierSegment(
        self, c1: QPointF, c2: QPointF, endPoint: QPointF
    ) -> None: ...
    def swap(self, other: QEasingCurve) -> None: ...
    def valueForProgress(self, progress: float) -> float: ...
    def customType(self) -> collections.abc.Callable[[float], float]: ...
    def setCustomType(
        self, func: collections.abc.Callable[[float], float]
    ) -> None: ...
    def setType(self, type: QEasingCurve.Type) -> None: ...
    def type(self) -> QEasingCurve.Type: ...
    def setOvershoot(self, overshoot: float) -> None: ...
    def overshoot(self) -> float: ...
    def setPeriod(self, period: float) -> None: ...
    def period(self) -> float: ...
    def setAmplitude(self, amplitude: float) -> None: ...
    def amplitude(self) -> float: ...

class QElapsedTimer(PyQt6.sip.simplewrapper):
    class ClockType(enum.Enum):
        SystemTime = ...
        MonotonicClock = ...
        TickCounter = ...
        MachAbsoluteTime = ...
        PerformanceCounter = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QElapsedTimer) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __ge__(self, rhs: QElapsedTimer) -> bool: ...
    def __le__(self, rhs: QElapsedTimer) -> bool: ...
    def __gt__(self, rhs: QElapsedTimer) -> bool: ...
    def __lt__(self, v2: QElapsedTimer) -> bool: ...
    def nsecsElapsed(self) -> int: ...
    def secsTo(self, other: QElapsedTimer) -> int: ...
    def msecsTo(self, other: QElapsedTimer) -> int: ...
    def msecsSinceReference(self) -> int: ...
    def hasExpired(self, timeout: int) -> bool: ...
    def elapsed(self) -> int: ...
    def isValid(self) -> bool: ...
    def invalidate(self) -> None: ...
    def restart(self) -> int: ...
    def start(self) -> None: ...
    @staticmethod
    def isMonotonic() -> bool: ...
    @staticmethod
    def clockType() -> QElapsedTimer.ClockType: ...

class QEventLoop(QObject):
    class ProcessEventsFlag(enum.Flag):
        AllEvents = ...
        ExcludeUserInputEvents = ...
        ExcludeSocketNotifiers = ...
        WaitForMoreEvents = ...

    def __init__(self, parent: QObject | None = ...) -> None: ...
    def event(self, event: QEvent | None) -> bool: ...
    def quit(self) -> None: ...
    def wakeUp(self) -> None: ...
    def isRunning(self) -> bool: ...
    def exit(self, returnCode: int = ...) -> None: ...
    def exec(self, flags: QEventLoop.ProcessEventsFlag = ...) -> int: ...
    @typing.overload
    def processEvents(
        self, flags: QEventLoop.ProcessEventsFlag = ...
    ) -> bool: ...
    @typing.overload
    def processEvents(
        self, flags: QEventLoop.ProcessEventsFlag, maximumTime: int
    ) -> None: ...
    @typing.overload
    def processEvents(
        self, flags: QEventLoop.ProcessEventsFlag, deadline: QDeadlineTimer
    ) -> None: ...

class QEventLoopLocker(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, loop: QEventLoop | None) -> None: ...
    @typing.overload
    def __init__(self, thread: QThread | None) -> None: ...
    def swap(self, other: QEventLoopLocker) -> None: ...

class QFileDevice(QIODevice):
    class MemoryMapFlag(enum.Flag):
        NoOptions = ...
        MapPrivateOption = ...

    class FileTime(enum.Enum):
        FileAccessTime = ...
        FileBirthTime = ...
        FileMetadataChangeTime = ...
        FileModificationTime = ...

    class FileHandleFlag(enum.Flag):
        AutoCloseHandle = ...
        DontCloseHandle = ...

    class Permission(enum.Flag):
        ReadOwner = ...
        WriteOwner = ...
        ExeOwner = ...
        ReadUser = ...
        WriteUser = ...
        ExeUser = ...
        ReadGroup = ...
        WriteGroup = ...
        ExeGroup = ...
        ReadOther = ...
        WriteOther = ...
        ExeOther = ...

    class FileError(enum.Enum):
        NoError = ...
        ReadError = ...
        WriteError = ...
        FatalError = ...
        ResourceError = ...
        OpenError = ...
        AbortError = ...
        TimeOutError = ...
        UnspecifiedError = ...
        RemoveError = ...
        RenameError = ...
        PositionError = ...
        ResizeError = ...
        PermissionsError = ...
        CopyError = ...

    def setFileTime(
        self,
        newDate: QDateTime | datetime.datetime,
        fileTime: QFileDevice.FileTime,
    ) -> bool: ...
    def fileTime(self, time: QFileDevice.FileTime) -> QDateTime: ...
    def writeData(self, a0: PyQt6.sip.Buffer) -> int: ...
    def readLineData(self, maxlen: int) -> bytes: ...
    def readData(self, maxlen: int) -> bytes: ...
    def unmap(self, address: PyQt6.sip.voidptr | None) -> bool: ...
    def map(
        self, offset: int, size: int, flags: QFileDevice.MemoryMapFlag = ...
    ) -> PyQt6.sip.voidptr | None: ...
    def setPermissions(
        self, permissionSpec: QFileDevice.Permission
    ) -> bool: ...
    def permissions(self) -> QFileDevice.Permission: ...
    def resize(self, sz: int) -> bool: ...
    def size(self) -> int: ...
    def flush(self) -> bool: ...
    def atEnd(self) -> bool: ...
    def seek(self, offset: int) -> bool: ...
    def pos(self) -> int: ...
    def fileName(self) -> str: ...
    def handle(self) -> int: ...
    def isSequential(self) -> bool: ...
    def close(self) -> None: ...
    def unsetError(self) -> None: ...
    def error(self) -> QFileDevice.FileError: ...

class QFile(QFileDevice):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, name: str | None) -> None: ...
    @typing.overload
    def __init__(self, parent: QObject | None) -> None: ...
    @typing.overload
    def __init__(self, name: str | None, parent: QObject | None) -> None: ...
    @staticmethod
    def supportsMoveToTrash() -> bool: ...
    @typing.overload
    def moveToTrash(self) -> bool: ...
    @typing.overload
    @staticmethod
    def moveToTrash(fileName: str | None) -> tuple[bool, str | None]: ...
    @typing.overload
    def setPermissions(
        self, permissionSpec: QFileDevice.Permission
    ) -> bool: ...
    @typing.overload
    @staticmethod
    def setPermissions(
        filename: str | None, permissionSpec: QFileDevice.Permission
    ) -> bool: ...
    @typing.overload
    def permissions(self) -> QFileDevice.Permission: ...
    @typing.overload
    @staticmethod
    def permissions(filename: str | None) -> QFileDevice.Permission: ...
    @typing.overload
    def resize(self, sz: int) -> bool: ...
    @typing.overload
    @staticmethod
    def resize(filename: str | None, sz: int) -> bool: ...
    def size(self) -> int: ...
    @typing.overload
    def open(
        self,
        flags: QIODeviceBase.OpenModeFlag,
        permissions: QFileDevice.Permission,
    ) -> bool: ...
    @typing.overload
    def open(self, flags: QIODeviceBase.OpenModeFlag) -> bool: ...
    @typing.overload
    def open(
        self,
        fd: int,
        ioFlags: QIODeviceBase.OpenModeFlag,
        handleFlags: QFileDevice.FileHandleFlag = ...,
    ) -> bool: ...
    @typing.overload
    def copy(self, newName: str | None) -> bool: ...
    @typing.overload
    @staticmethod
    def copy(fileName: str | None, newName: str | None) -> bool: ...
    @typing.overload
    def link(self, newName: str | None) -> bool: ...
    @typing.overload
    @staticmethod
    def link(oldname: str | None, newName: str | None) -> bool: ...
    @typing.overload
    def rename(self, newName: str | None) -> bool: ...
    @typing.overload
    @staticmethod
    def rename(oldName: str | None, newName: str | None) -> bool: ...
    @typing.overload
    def remove(self) -> bool: ...
    @typing.overload
    @staticmethod
    def remove(fileName: str | None) -> bool: ...
    @typing.overload
    def symLinkTarget(self) -> str: ...
    @typing.overload
    @staticmethod
    def symLinkTarget(fileName: str | None) -> str: ...
    @typing.overload
    def exists(self) -> bool: ...
    @typing.overload
    @staticmethod
    def exists(fileName: str | None) -> bool: ...
    @typing.overload
    @staticmethod
    def decodeName(
        localFileName: QByteArray | bytes | bytearray | memoryview,
    ) -> str: ...
    @typing.overload
    @staticmethod
    def decodeName(localFileName: str | None) -> str: ...
    @staticmethod
    def encodeName(fileName: str | None) -> QByteArray: ...
    def setFileName(self, name: str | None) -> None: ...
    def fileName(self) -> str: ...

class QFileInfo(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, file: QFileDevice) -> None: ...
    @typing.overload
    def __init__(self, file: str | None) -> None: ...
    @typing.overload
    def __init__(self, dir: QDir, file: str | None) -> None: ...
    @typing.overload
    def __init__(self, fileinfo: QFileInfo) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def readSymLink(self) -> str: ...
    def isAlias(self) -> bool: ...
    def junctionTarget(self) -> str: ...
    def stat(self) -> None: ...
    def isJunction(self) -> bool: ...
    def isShortcut(self) -> bool: ...
    def isSymbolicLink(self) -> bool: ...
    @typing.overload
    def fileTime(self, time: QFileDevice.FileTime) -> QDateTime: ...
    @typing.overload
    def fileTime(
        self, time: QFileDevice.FileTime, tz: QTimeZone
    ) -> QDateTime: ...
    @typing.overload
    def metadataChangeTime(self) -> QDateTime: ...
    @typing.overload
    def metadataChangeTime(self, tz: QTimeZone) -> QDateTime: ...
    @typing.overload
    def birthTime(self) -> QDateTime: ...
    @typing.overload
    def birthTime(self, tz: QTimeZone) -> QDateTime: ...
    def swap(self, other: QFileInfo) -> None: ...
    def isNativePath(self) -> bool: ...
    def isBundle(self) -> bool: ...
    def bundleName(self) -> str: ...
    def symLinkTarget(self) -> str: ...
    def setCaching(self, on: bool) -> None: ...
    def caching(self) -> bool: ...
    @typing.overload
    def lastRead(self) -> QDateTime: ...
    @typing.overload
    def lastRead(self, tz: QTimeZone) -> QDateTime: ...
    @typing.overload
    def lastModified(self) -> QDateTime: ...
    @typing.overload
    def lastModified(self, tz: QTimeZone) -> QDateTime: ...
    def size(self) -> int: ...
    def permissions(self) -> QFileDevice.Permission: ...
    def permission(self, permissions: QFileDevice.Permission) -> bool: ...
    def groupId(self) -> int: ...
    def group(self) -> str: ...
    def ownerId(self) -> int: ...
    def owner(self) -> str: ...
    def isRoot(self) -> bool: ...
    def isSymLink(self) -> bool: ...
    def isDir(self) -> bool: ...
    def isFile(self) -> bool: ...
    def makeAbsolute(self) -> bool: ...
    def isAbsolute(self) -> bool: ...
    def isRelative(self) -> bool: ...
    def isHidden(self) -> bool: ...
    def isExecutable(self) -> bool: ...
    def isWritable(self) -> bool: ...
    def isReadable(self) -> bool: ...
    def absoluteDir(self) -> QDir: ...
    def dir(self) -> QDir: ...
    def canonicalPath(self) -> str: ...
    def absolutePath(self) -> str: ...
    def path(self) -> str: ...
    def completeSuffix(self) -> str: ...
    def suffix(self) -> str: ...
    def completeBaseName(self) -> str: ...
    def baseName(self) -> str: ...
    def fileName(self) -> str: ...
    def canonicalFilePath(self) -> str: ...
    def absoluteFilePath(self) -> str: ...
    def __fspath__(self) -> typing.Any: ...
    def filePath(self) -> str: ...
    def refresh(self) -> None: ...
    @typing.overload
    def exists(self) -> bool: ...
    @typing.overload
    @staticmethod
    def exists(file: str | None) -> bool: ...
    @typing.overload
    def setFile(self, file: str | None) -> None: ...
    @typing.overload
    def setFile(self, file: QFileDevice) -> None: ...
    @typing.overload
    def setFile(self, dir: QDir, file: str | None) -> None: ...

class QFileSelector(QObject):
    def __init__(self, parent: QObject | None = ...) -> None: ...
    def allSelectors(self) -> list[str]: ...
    def setExtraSelectors(
        self, list: collections.abc.Iterable[str | None]
    ) -> None: ...
    def extraSelectors(self) -> list[str]: ...
    @typing.overload
    def select(self, filePath: str | None) -> str: ...
    @typing.overload
    def select(self, filePath: QUrl) -> QUrl: ...

class QFileSystemWatcher(QObject):
    @typing.overload
    def __init__(self, parent: QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self,
        paths: collections.abc.Iterable[str | None],
        parent: QObject | None = ...,
    ) -> None: ...

    fileChanged: typing.ClassVar[pyqtSignal]
    directoryChanged: typing.ClassVar[pyqtSignal]
    def removePaths(
        self, files: collections.abc.Iterable[str | None]
    ) -> list[str]: ...
    def removePath(self, file: str | None) -> bool: ...
    def files(self) -> list[str]: ...
    def directories(self) -> list[str]: ...
    def addPaths(
        self, files: collections.abc.Iterable[str | None]
    ) -> list[str]: ...
    def addPath(self, file: str | None) -> bool: ...

class QIdentityProxyModel(QAbstractProxyModel):
    def __init__(self, parent: QObject | None = ...) -> None: ...
    def setHandleSourceDataChanges(self, a0: bool) -> None: ...
    def setHandleSourceLayoutChanges(self, a0: bool) -> None: ...
    def handleSourceDataChanges(self) -> bool: ...
    def handleSourceLayoutChanges(self) -> bool: ...
    def moveColumns(
        self,
        sourceParent: QModelIndex,
        sourceColumn: int,
        count: int,
        destinationParent: QModelIndex,
        destinationChild: int,
    ) -> bool: ...
    def moveRows(
        self,
        sourceParent: QModelIndex,
        sourceRow: int,
        count: int,
        destinationParent: QModelIndex,
        destinationChild: int,
    ) -> bool: ...
    def sibling(
        self, row: int, column: int, idx: QModelIndex
    ) -> QModelIndex: ...
    def headerData(
        self, section: int, orientation: Qt.Orientation, role: int = ...
    ) -> typing.Any: ...
    def removeRows(
        self, row: int, count: int, parent: QModelIndex = ...
    ) -> bool: ...
    def removeColumns(
        self, column: int, count: int, parent: QModelIndex = ...
    ) -> bool: ...
    def insertRows(
        self, row: int, count: int, parent: QModelIndex = ...
    ) -> bool: ...
    def insertColumns(
        self, column: int, count: int, parent: QModelIndex = ...
    ) -> bool: ...
    def setSourceModel(
        self, sourceModel: QAbstractItemModel | None
    ) -> None: ...
    def match(
        self,
        start: QModelIndex,
        role: int,
        value: typing.Any,
        hits: int = ...,
        flags: Qt.MatchFlag = ...,
    ) -> list[QModelIndex]: ...
    def mapSelectionToSource(
        self, selection: QItemSelection
    ) -> QItemSelection: ...
    def mapSelectionFromSource(
        self, selection: QItemSelection
    ) -> QItemSelection: ...
    def dropMimeData(
        self,
        data: QMimeData | None,
        action: Qt.DropAction,
        row: int,
        column: int,
        parent: QModelIndex,
    ) -> bool: ...
    def rowCount(self, parent: QModelIndex = ...) -> int: ...
    def parent(self, child: QModelIndex) -> QModelIndex: ...
    def mapToSource(self, proxyIndex: QModelIndex) -> QModelIndex: ...
    def mapFromSource(self, sourceIndex: QModelIndex) -> QModelIndex: ...
    def index(
        self, row: int, column: int, parent: QModelIndex = ...
    ) -> QModelIndex: ...
    def columnCount(self, parent: QModelIndex = ...) -> int: ...

class QItemSelectionRange(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, atopLeft: QModelIndex, abottomRight: QModelIndex
    ) -> None: ...
    @typing.overload
    def __init__(self, index: QModelIndex) -> None: ...
    @typing.overload
    def __init__(self, a0: QItemSelectionRange) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def swap(self, other: QItemSelectionRange) -> None: ...
    def isEmpty(self) -> bool: ...
    def intersected(
        self, other: QItemSelectionRange
    ) -> QItemSelectionRange: ...
    def indexes(self) -> list[QModelIndex]: ...
    def isValid(self) -> bool: ...
    def intersects(self, other: QItemSelectionRange) -> bool: ...
    @typing.overload
    def contains(self, index: QModelIndex) -> bool: ...
    @typing.overload
    def contains(
        self, row: int, column: int, parentIndex: QModelIndex
    ) -> bool: ...
    def model(self) -> QAbstractItemModel | None: ...
    def parent(self) -> QModelIndex: ...
    def bottomRight(self) -> QPersistentModelIndex: ...
    def topLeft(self) -> QPersistentModelIndex: ...
    def height(self) -> int: ...
    def width(self) -> int: ...
    def right(self) -> int: ...
    def bottom(self) -> int: ...
    def left(self) -> int: ...
    def top(self) -> int: ...

class QItemSelectionModel(QObject):
    class SelectionFlag(enum.Flag):
        NoUpdate = ...
        Clear = ...
        Select = ...
        Deselect = ...
        Toggle = ...
        Current = ...
        Rows = ...
        Columns = ...
        SelectCurrent = ...
        ToggleCurrent = ...
        ClearAndSelect = ...

    @typing.overload
    def __init__(self, model: QAbstractItemModel | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self, model: QAbstractItemModel | None, parent: QObject | None
    ) -> None: ...

    modelChanged: typing.ClassVar[pyqtSignal]
    def setModel(self, model: QAbstractItemModel | None) -> None: ...
    def selectedColumns(self, row: int = ...) -> list[QModelIndex]: ...
    def selectedRows(self, column: int = ...) -> list[QModelIndex]: ...
    def hasSelection(self) -> bool: ...
    def emitSelectionChanged(
        self, newSelection: QItemSelection, oldSelection: QItemSelection
    ) -> None: ...
    currentColumnChanged: typing.ClassVar[pyqtSignal]
    currentRowChanged: typing.ClassVar[pyqtSignal]
    currentChanged: typing.ClassVar[pyqtSignal]
    selectionChanged: typing.ClassVar[pyqtSignal]
    def clearCurrentIndex(self) -> None: ...
    def setCurrentIndex(
        self, index: QModelIndex, command: QItemSelectionModel.SelectionFlag
    ) -> None: ...
    @typing.overload
    def select(
        self, index: QModelIndex, command: QItemSelectionModel.SelectionFlag
    ) -> None: ...
    @typing.overload
    def select(
        self,
        selection: QItemSelection,
        command: QItemSelectionModel.SelectionFlag,
    ) -> None: ...
    def reset(self) -> None: ...
    def clearSelection(self) -> None: ...
    def clear(self) -> None: ...
    def model(self) -> QAbstractItemModel | None: ...
    def selection(self) -> QItemSelection: ...
    def selectedIndexes(self) -> list[QModelIndex]: ...
    def columnIntersectsSelection(
        self, column: int, parent: QModelIndex = ...
    ) -> bool: ...
    def rowIntersectsSelection(
        self, row: int, parent: QModelIndex = ...
    ) -> bool: ...
    def isColumnSelected(
        self, column: int, parent: QModelIndex = ...
    ) -> bool: ...
    def isRowSelected(self, row: int, parent: QModelIndex = ...) -> bool: ...
    def isSelected(self, index: QModelIndex) -> bool: ...
    def currentIndex(self) -> QModelIndex: ...

class QItemSelection(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, topLeft: QModelIndex, bottomRight: QModelIndex
    ) -> None: ...
    @typing.overload
    def __init__(self, a0: QItemSelection) -> None: ...
    @typing.overload
    def __iadd__(self, other: QItemSelection) -> QItemSelection: ...
    @typing.overload
    def __iadd__(self, value: QItemSelectionRange) -> QItemSelection: ...
    def lastIndexOf(
        self, value: QItemSelectionRange, from_: int = ...
    ) -> int: ...
    def indexOf(self, value: QItemSelectionRange, from_: int = ...) -> int: ...
    def last(self) -> QItemSelectionRange: ...
    def first(self) -> QItemSelectionRange: ...
    def __len__(self) -> int: ...
    @typing.overload
    def count(self, range: QItemSelectionRange) -> int: ...
    @typing.overload
    def count(self) -> int: ...
    def move(self, from_: int, to: int) -> None: ...
    def takeLast(self) -> QItemSelectionRange: ...
    def takeFirst(self) -> QItemSelectionRange: ...
    def takeAt(self, i: int) -> QItemSelectionRange: ...
    def removeAll(self, range: QItemSelectionRange) -> int: ...
    def removeAt(self, i: int) -> None: ...
    def replace(self, i: int, range: QItemSelectionRange) -> None: ...
    def insert(self, i: int, range: QItemSelectionRange) -> None: ...
    def prepend(self, range: QItemSelectionRange) -> None: ...
    def append(self, range: QItemSelectionRange) -> None: ...
    def isEmpty(self) -> bool: ...
    def clear(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @typing.overload
    def __getitem__(self, i: int) -> QItemSelectionRange: ...
    @typing.overload
    def __getitem__(self, slice: slice) -> QItemSelection: ...
    @typing.overload
    def __delitem__(self, i: int) -> None: ...
    @typing.overload
    def __delitem__(self, slice: slice) -> None: ...
    @typing.overload
    def __setitem__(self, i: int, range: QItemSelectionRange) -> None: ...
    @typing.overload
    def __setitem__(self, slice: slice, list: QItemSelection) -> None: ...
    @staticmethod
    def split(
        range: QItemSelectionRange,
        other: QItemSelectionRange,
        result: QItemSelection | None,
    ) -> None: ...
    def merge(
        self, other: QItemSelection, command: QItemSelectionModel.SelectionFlag
    ) -> None: ...
    def indexes(self) -> list[QModelIndex]: ...
    def __contains__(self, index: QModelIndex) -> int: ...
    def contains(self, index: QModelIndex) -> bool: ...
    def select(
        self, topLeft: QModelIndex, bottomRight: QModelIndex
    ) -> None: ...

class QJsonDocument(PyQt6.sip.simplewrapper):
    class JsonFormat(enum.Enum):
        Indented = ...
        Compact = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self,
        object: dict[
            str | None,
            QJsonValue
            | QJsonValue.Type
            | collections.abc.Iterable[QJsonValue]
            | dict[str | None, QJsonValue]
            | bool
            | int
            | float
            | None
            | str,
        ],
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        array: collections.abc.Iterable[
            QJsonValue
            | QJsonValue.Type
            | collections.abc.Iterable[QJsonValue]
            | dict[str | None, QJsonValue]
            | bool
            | int
            | float
            | None
            | str
        ],
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QJsonDocument) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @typing.overload
    def __getitem__(self, i: int) -> QJsonValue | None: ...
    @typing.overload
    def __getitem__(self, key: str | None) -> QJsonValue | None: ...
    def swap(self, other: QJsonDocument) -> None: ...
    def isNull(self) -> bool: ...
    def setArray(
        self,
        array: collections.abc.Iterable[
            QJsonValue
            | QJsonValue.Type
            | collections.abc.Iterable[QJsonValue]
            | dict[str | None, QJsonValue]
            | bool
            | int
            | float
            | None
            | str
        ],
    ) -> None: ...
    def setObject(
        self,
        object: dict[
            str | None,
            QJsonValue
            | QJsonValue.Type
            | collections.abc.Iterable[QJsonValue]
            | dict[str | None, QJsonValue]
            | bool
            | int
            | float
            | None
            | str,
        ],
    ) -> None: ...
    def array(self) -> list[QJsonValue]: ...
    def object(self) -> dict[str, QJsonValue]: ...
    def isObject(self) -> bool: ...
    def isArray(self) -> bool: ...
    def isEmpty(self) -> bool: ...
    def toJson(self, format: QJsonDocument.JsonFormat = ...) -> QByteArray: ...
    @staticmethod
    def fromJson(
        json: QByteArray | bytes | bytearray | memoryview,
        error: QJsonParseError | None = ...,
    ) -> QJsonDocument: ...
    def toVariant(self) -> typing.Any: ...
    @staticmethod
    def fromVariant(variant: typing.Any) -> QJsonDocument: ...

class QJsonParseError(PyQt6.sip.simplewrapper):
    class ParseError(enum.Enum):
        NoError = ...
        UnterminatedObject = ...
        MissingNameSeparator = ...
        UnterminatedArray = ...
        MissingValueSeparator = ...
        IllegalValue = ...
        TerminationByNumber = ...
        IllegalNumber = ...
        IllegalEscapeSequence = ...
        IllegalUTF8String = ...
        UnterminatedString = ...
        MissingObject = ...
        DeepNesting = ...
        DocumentTooLarge = ...
        GarbageAtEnd = ...

    error: QJsonParseError.ParseError = ...
    offset: int = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QJsonParseError) -> None: ...
    def errorString(self) -> str: ...

class QJsonValue(PyQt6.sip.simplewrapper):
    class Type(enum.Enum):
        Null = ...
        Bool = ...
        Double = ...
        String = ...
        Array = ...
        Object = ...
        Undefined = ...

    @typing.overload
    def __init__(self, type: QJsonValue.Type = ...) -> None: ...
    @typing.overload
    def __init__(
        self,
        other: QJsonValue
        | QJsonValue.Type
        | collections.abc.Iterable[QJsonValue]
        | dict[str | None, QJsonValue]
        | bool
        | float
        | None
        | str,
    ) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def toJson(self, format: QJsonDocument.JsonFormat = ...) -> QByteArray: ...
    @staticmethod
    def fromJson(
        json: QByteArray | bytes | bytearray | memoryview,
    ) -> tuple[QJsonValue | None, QJsonParseError | None]: ...
    def __hash__(self) -> int: ...
    @typing.overload
    def __getitem__(self, i: int) -> QJsonValue | None: ...
    @typing.overload
    def __getitem__(self, key: str | None) -> QJsonValue | None: ...
    def swap(self, other: QJsonValue | None) -> None: ...
    @typing.overload
    def toString(self) -> str: ...
    @typing.overload
    def toString(self, defaultValue: str | None) -> str: ...
    @typing.overload
    def toObject(self) -> dict[str, QJsonValue]: ...
    @typing.overload
    def toObject(
        self,
        defaultValue: dict[
            str | None,
            QJsonValue
            | QJsonValue.Type
            | collections.abc.Iterable[QJsonValue]
            | dict[str | None, QJsonValue]
            | bool
            | int
            | float
            | None
            | str,
        ],
    ) -> dict[str, QJsonValue]: ...
    @typing.overload
    def toArray(self) -> list[QJsonValue]: ...
    @typing.overload
    def toArray(
        self,
        defaultValue: collections.abc.Iterable[
            QJsonValue
            | QJsonValue.Type
            | collections.abc.Iterable[QJsonValue]
            | dict[str | None, QJsonValue]
            | bool
            | int
            | float
            | None
            | str
        ],
    ) -> list[QJsonValue]: ...
    def toDouble(self, defaultValue: float = ...) -> float: ...
    def toInteger(self, defaultValue: int = ...) -> int: ...
    def toInt(self, defaultValue: int = ...) -> int: ...
    def toBool(self, defaultValue: bool = ...) -> bool: ...
    def isUndefined(self) -> bool: ...
    def isObject(self) -> bool: ...
    def isArray(self) -> bool: ...
    def isString(self) -> bool: ...
    def isDouble(self) -> bool: ...
    def isBool(self) -> bool: ...
    def isNull(self) -> bool: ...
    def type(self) -> QJsonValue.Type: ...
    def toVariant(self) -> typing.Any: ...
    @staticmethod
    def fromVariant(variant: typing.Any) -> QJsonValue | None: ...

class QLibrary(QObject):
    class LoadHint(enum.Flag):
        ResolveAllSymbolsHint = ...
        ExportExternalSymbolsHint = ...
        LoadArchiveMemberHint = ...
        PreventUnloadHint = ...
        DeepBindHint = ...

    @typing.overload
    def __init__(self, parent: QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self, fileName: str | None, parent: QObject | None = ...
    ) -> None: ...
    @typing.overload
    def __init__(
        self, fileName: str | None, verNum: int, parent: QObject | None = ...
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        fileName: str | None,
        version: str | None,
        parent: QObject | None = ...,
    ) -> None: ...
    def setLoadHints(self, hints: QLibrary.LoadHint) -> None: ...
    @typing.overload
    def setFileNameAndVersion(
        self, fileName: str | None, verNum: int
    ) -> None: ...
    @typing.overload
    def setFileNameAndVersion(
        self, fileName: str | None, version: str | None
    ) -> None: ...
    def setFileName(self, fileName: str | None) -> None: ...
    @staticmethod
    def isLibrary(fileName: str | None) -> bool: ...
    def unload(self) -> bool: ...
    @typing.overload
    def resolve(self, symbol: str | None) -> PyQt6.sip.voidptr | None: ...
    @typing.overload
    @staticmethod
    def resolve(
        fileName: str | None, symbol: str | None
    ) -> PyQt6.sip.voidptr | None: ...
    @typing.overload
    @staticmethod
    def resolve(
        fileName: str | None, verNum: int, symbol: str | None
    ) -> PyQt6.sip.voidptr | None: ...
    @typing.overload
    @staticmethod
    def resolve(
        fileName: str | None, version: str | None, symbol: str | None
    ) -> PyQt6.sip.voidptr | None: ...
    def loadHints(self) -> QLibrary.LoadHint: ...
    def load(self) -> bool: ...
    def isLoaded(self) -> bool: ...
    def fileName(self) -> str: ...
    def errorString(self) -> str: ...

class QLibraryInfo(PyQt6.sip.simplewrapper):
    class LibraryPath(enum.Enum):
        PrefixPath = ...
        DocumentationPath = ...
        HeadersPath = ...
        LibrariesPath = ...
        LibraryExecutablesPath = ...
        BinariesPath = ...
        PluginsPath = ...
        Qml2ImportsPath = ...
        ArchDataPath = ...
        DataPath = ...
        TranslationsPath = ...
        ExamplesPath = ...
        TestsPath = ...
        SettingsPath = ...
        QmlImportsPath = ...

    def __init__(self, a0: QLibraryInfo) -> None: ...
    @staticmethod
    def paths(p: QLibraryInfo.LibraryPath) -> list[str]: ...
    @staticmethod
    def version() -> QVersionNumber: ...
    @staticmethod
    def path(p: QLibraryInfo.LibraryPath) -> str: ...
    @staticmethod
    def isSharedBuild() -> bool: ...
    @staticmethod
    def isDebugBuild() -> bool: ...

class QLine(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pt1_: QPoint, pt2_: QPoint) -> None: ...
    @typing.overload
    def __init__(
        self, x1pos: int, y1pos: int, x2pos: int, y2pos: int
    ) -> None: ...
    @typing.overload
    def __init__(self, a0: QLine) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def toLineF(self) -> QLineF: ...
    def center(self) -> QPoint: ...
    def setLine(self, aX1: int, aY1: int, aX2: int, aY2: int) -> None: ...
    def setPoints(self, aP1: QPoint, aP2: QPoint) -> None: ...
    def setP2(self, aP2: QPoint) -> None: ...
    def setP1(self, aP1: QPoint) -> None: ...
    @typing.overload
    def translated(self, p: QPoint) -> QLine: ...
    @typing.overload
    def translated(self, adx: int, ady: int) -> QLine: ...
    @typing.overload
    def translate(self, point: QPoint) -> None: ...
    @typing.overload
    def translate(self, adx: int, ady: int) -> None: ...
    def dy(self) -> int: ...
    def dx(self) -> int: ...
    def p2(self) -> QPoint: ...
    def p1(self) -> QPoint: ...
    def y2(self) -> int: ...
    def x2(self) -> int: ...
    def y1(self) -> int: ...
    def x1(self) -> int: ...
    def __bool__(self) -> int: ...
    def isNull(self) -> bool: ...

class QLineF(PyQt6.sip.simplewrapper):
    class IntersectionType(enum.Enum):
        NoIntersection = ...
        BoundedIntersection = ...
        UnboundedIntersection = ...

    @typing.overload
    def __init__(self, line: QLine) -> None: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, apt1: QPointF, apt2: QPointF) -> None: ...
    @typing.overload
    def __init__(
        self, x1pos: float, y1pos: float, x2pos: float, y2pos: float
    ) -> None: ...
    @typing.overload
    def __init__(self, a0: QLineF) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def center(self) -> QPointF: ...
    def setLine(
        self, aX1: float, aY1: float, aX2: float, aY2: float
    ) -> None: ...
    def setPoints(self, aP1: QPointF, aP2: QPointF) -> None: ...
    def setP2(self, aP2: QPointF) -> None: ...
    def setP1(self, aP1: QPointF) -> None: ...
    @typing.overload
    def translated(self, p: QPointF) -> QLineF: ...
    @typing.overload
    def translated(self, adx: float, ady: float) -> QLineF: ...
    def angleTo(self, l: QLineF) -> float: ...
    def setAngle(self, angle: float) -> None: ...
    def angle(self) -> float: ...
    @staticmethod
    def fromPolar(length: float, angle: float) -> QLineF: ...
    def toLine(self) -> QLine: ...
    def pointAt(self, t: float) -> QPointF: ...
    def setLength(self, len: float) -> None: ...
    @typing.overload
    def translate(self, point: QPointF) -> None: ...
    @typing.overload
    def translate(self, adx: float, ady: float) -> None: ...
    def normalVector(self) -> QLineF: ...
    def dy(self) -> float: ...
    def dx(self) -> float: ...
    def p2(self) -> QPointF: ...
    def p1(self) -> QPointF: ...
    def y2(self) -> float: ...
    def x2(self) -> float: ...
    def y1(self) -> float: ...
    def x1(self) -> float: ...
    def intersects(
        self, l: QLineF
    ) -> tuple[QLineF.IntersectionType, QPointF | None]: ...
    def unitVector(self) -> QLineF: ...
    def length(self) -> float: ...
    def __bool__(self) -> int: ...
    def isNull(self) -> bool: ...

class QLocale(PyQt6.sip.simplewrapper):
    class LanguageCodeType(enum.IntFlag):
        ISO639Part1 = ...
        ISO639Part2B = ...
        ISO639Part2T = ...
        ISO639Part3 = ...
        LegacyLanguageCode = ...
        ISO639Part2 = ...
        ISO639Alpha2 = ...
        ISO639Alpha3 = ...
        ISO639 = ...
        AnyLanguageCode = ...

    class DataSizeFormat(enum.Flag):
        DataSizeIecFormat = ...
        DataSizeTraditionalFormat = ...
        DataSizeSIFormat = ...

    class FloatingPointPrecisionOption(enum.IntEnum):
        FloatingPointShortest = ...

    class QuotationStyle(enum.Enum):
        StandardQuotation = ...
        AlternateQuotation = ...

    class CurrencySymbolFormat(enum.Enum):
        CurrencyIsoCode = ...
        CurrencySymbol = ...
        CurrencyDisplayName = ...

    class Script(enum.Enum):
        AnyScript = ...
        ArabicScript = ...
        CyrillicScript = ...
        DeseretScript = ...
        GurmukhiScript = ...
        SimplifiedHanScript = ...
        TraditionalHanScript = ...
        LatinScript = ...
        MongolianScript = ...
        TifinaghScript = ...
        SimplifiedChineseScript = ...
        TraditionalChineseScript = ...
        ArmenianScript = ...
        BengaliScript = ...
        CherokeeScript = ...
        DevanagariScript = ...
        EthiopicScript = ...
        GeorgianScript = ...
        GreekScript = ...
        GujaratiScript = ...
        HebrewScript = ...
        JapaneseScript = ...
        KhmerScript = ...
        KannadaScript = ...
        KoreanScript = ...
        LaoScript = ...
        MalayalamScript = ...
        MyanmarScript = ...
        OriyaScript = ...
        TamilScript = ...
        TeluguScript = ...
        ThaanaScript = ...
        ThaiScript = ...
        TibetanScript = ...
        SinhalaScript = ...
        SyriacScript = ...
        YiScript = ...
        VaiScript = ...
        AvestanScript = ...
        BalineseScript = ...
        BamumScript = ...
        BatakScript = ...
        BopomofoScript = ...
        BrahmiScript = ...
        BugineseScript = ...
        BuhidScript = ...
        CanadianAboriginalScript = ...
        CarianScript = ...
        ChakmaScript = ...
        ChamScript = ...
        CopticScript = ...
        CypriotScript = ...
        EgyptianHieroglyphsScript = ...
        FraserScript = ...
        GlagoliticScript = ...
        GothicScript = ...
        HanScript = ...
        HangulScript = ...
        HanunooScript = ...
        ImperialAramaicScript = ...
        InscriptionalPahlaviScript = ...
        InscriptionalParthianScript = ...
        JavaneseScript = ...
        KaithiScript = ...
        KatakanaScript = ...
        KayahLiScript = ...
        KharoshthiScript = ...
        LannaScript = ...
        LepchaScript = ...
        LimbuScript = ...
        LinearBScript = ...
        LycianScript = ...
        LydianScript = ...
        MandaeanScript = ...
        MeiteiMayekScript = ...
        MeroiticScript = ...
        MeroiticCursiveScript = ...
        NkoScript = ...
        NewTaiLueScript = ...
        OghamScript = ...
        OlChikiScript = ...
        OldItalicScript = ...
        OldPersianScript = ...
        OldSouthArabianScript = ...
        OrkhonScript = ...
        OsmanyaScript = ...
        PhagsPaScript = ...
        PhoenicianScript = ...
        PollardPhoneticScript = ...
        RejangScript = ...
        RunicScript = ...
        SamaritanScript = ...
        SaurashtraScript = ...
        SharadaScript = ...
        ShavianScript = ...
        SoraSompengScript = ...
        CuneiformScript = ...
        SundaneseScript = ...
        SylotiNagriScript = ...
        TagalogScript = ...
        TagbanwaScript = ...
        TaiLeScript = ...
        TaiVietScript = ...
        TakriScript = ...
        UgariticScript = ...
        BrailleScript = ...
        HiraganaScript = ...
        CaucasianAlbanianScript = ...
        BassaVahScript = ...
        DuployanScript = ...
        ElbasanScript = ...
        GranthaScript = ...
        PahawhHmongScript = ...
        KhojkiScript = ...
        LinearAScript = ...
        MahajaniScript = ...
        ManichaeanScript = ...
        MendeKikakuiScript = ...
        ModiScript = ...
        MroScript = ...
        OldNorthArabianScript = ...
        NabataeanScript = ...
        PalmyreneScript = ...
        PauCinHauScript = ...
        OldPermicScript = ...
        PsalterPahlaviScript = ...
        SiddhamScript = ...
        KhudawadiScript = ...
        TirhutaScript = ...
        VarangKshitiScript = ...
        AhomScript = ...
        AnatolianHieroglyphsScript = ...
        HatranScript = ...
        MultaniScript = ...
        OldHungarianScript = ...
        SignWritingScript = ...
        AdlamScript = ...
        BhaiksukiScript = ...
        MarchenScript = ...
        NewaScript = ...
        OsageScript = ...
        TangutScript = ...
        HanWithBopomofoScript = ...
        JamoScript = ...
        BanglaScript = ...
        MendeScript = ...
        OdiaScript = ...
        HanifiScript = ...

    class MeasurementSystem(enum.Enum):
        MetricSystem = ...
        ImperialSystem = ...
        ImperialUSSystem = ...
        ImperialUKSystem = ...

    class FormatType(enum.Enum):
        LongFormat = ...
        ShortFormat = ...
        NarrowFormat = ...

    class TagSeparator(enum.Enum):
        Dash = ...
        Underscore = ...

    class NumberOption(enum.Flag):
        OmitGroupSeparator = ...
        RejectGroupSeparator = ...
        DefaultNumberOptions = ...
        OmitLeadingZeroInExponent = ...
        RejectLeadingZeroInExponent = ...
        IncludeTrailingZeroesAfterDot = ...
        RejectTrailingZeroesAfterDot = ...

    class Country(enum.Enum):
        AnyCountry = ...
        AnyTerritory = ...
        Afghanistan = ...
        Albania = ...
        Algeria = ...
        AmericanSamoa = ...
        Andorra = ...
        Angola = ...
        Anguilla = ...
        Antarctica = ...
        AntiguaAndBarbuda = ...
        Argentina = ...
        Armenia = ...
        Aruba = ...
        Australia = ...
        Austria = ...
        Azerbaijan = ...
        Bahamas = ...
        Bahrain = ...
        Bangladesh = ...
        Barbados = ...
        Belarus = ...
        Belgium = ...
        Belize = ...
        Benin = ...
        Bermuda = ...
        Bhutan = ...
        Bolivia = ...
        BosniaAndHerzegowina = ...
        Botswana = ...
        BouvetIsland = ...
        Brazil = ...
        BritishIndianOceanTerritory = ...
        Bulgaria = ...
        BurkinaFaso = ...
        Burundi = ...
        Cambodia = ...
        Cameroon = ...
        Canada = ...
        CapeVerde = ...
        CaymanIslands = ...
        CentralAfricanRepublic = ...
        Chad = ...
        Chile = ...
        China = ...
        ChristmasIsland = ...
        CocosIslands = ...
        Colombia = ...
        Comoros = ...
        DemocraticRepublicOfCongo = ...
        PeoplesRepublicOfCongo = ...
        CookIslands = ...
        CostaRica = ...
        IvoryCoast = ...
        Croatia = ...
        Cuba = ...
        Cyprus = ...
        CzechRepublic = ...
        Denmark = ...
        Djibouti = ...
        Dominica = ...
        DominicanRepublic = ...
        EastTimor = ...
        Ecuador = ...
        Egypt = ...
        ElSalvador = ...
        EquatorialGuinea = ...
        Eritrea = ...
        Estonia = ...
        Ethiopia = ...
        FalklandIslands = ...
        FaroeIslands = ...
        Finland = ...
        France = ...
        FrenchGuiana = ...
        FrenchPolynesia = ...
        FrenchSouthernTerritories = ...
        Gabon = ...
        Gambia = ...
        Georgia = ...
        Germany = ...
        Ghana = ...
        Gibraltar = ...
        Greece = ...
        Greenland = ...
        Grenada = ...
        Guadeloupe = ...
        Guam = ...
        Guatemala = ...
        Guinea = ...
        GuineaBissau = ...
        Guyana = ...
        Haiti = ...
        HeardAndMcDonaldIslands = ...
        Honduras = ...
        HongKong = ...
        Hungary = ...
        Iceland = ...
        India = ...
        Indonesia = ...
        Iran = ...
        Iraq = ...
        Ireland = ...
        Israel = ...
        Italy = ...
        Jamaica = ...
        Japan = ...
        Jordan = ...
        Kazakhstan = ...
        Kenya = ...
        Kiribati = ...
        DemocraticRepublicOfKorea = ...
        RepublicOfKorea = ...
        Kuwait = ...
        Kyrgyzstan = ...
        Latvia = ...
        Lebanon = ...
        Lesotho = ...
        Liberia = ...
        Liechtenstein = ...
        Lithuania = ...
        Luxembourg = ...
        Macau = ...
        Macedonia = ...
        Madagascar = ...
        Malawi = ...
        Malaysia = ...
        Maldives = ...
        Mali = ...
        Malta = ...
        MarshallIslands = ...
        Martinique = ...
        Mauritania = ...
        Mauritius = ...
        Mayotte = ...
        Mexico = ...
        Micronesia = ...
        Moldova = ...
        Monaco = ...
        Mongolia = ...
        Montserrat = ...
        Morocco = ...
        Mozambique = ...
        Myanmar = ...
        Namibia = ...
        NauruCountry = ...
        Nepal = ...
        Netherlands = ...
        NewCaledonia = ...
        NewZealand = ...
        Nicaragua = ...
        Niger = ...
        Nigeria = ...
        Niue = ...
        NorfolkIsland = ...
        NorthernMarianaIslands = ...
        Norway = ...
        Oman = ...
        Pakistan = ...
        Palau = ...
        Panama = ...
        PapuaNewGuinea = ...
        Paraguay = ...
        Peru = ...
        Philippines = ...
        Pitcairn = ...
        Poland = ...
        Portugal = ...
        PuertoRico = ...
        Qatar = ...
        Reunion = ...
        Romania = ...
        RussianFederation = ...
        Rwanda = ...
        SaintKittsAndNevis = ...
        Samoa = ...
        SanMarino = ...
        SaoTomeAndPrincipe = ...
        SaudiArabia = ...
        Senegal = ...
        Seychelles = ...
        SierraLeone = ...
        Singapore = ...
        Slovakia = ...
        Slovenia = ...
        SolomonIslands = ...
        Somalia = ...
        SouthAfrica = ...
        SouthGeorgiaAndTheSouthSandwichIslands = ...
        Spain = ...
        SriLanka = ...
        Sudan = ...
        Suriname = ...
        SvalbardAndJanMayenIslands = ...
        Swaziland = ...
        Sweden = ...
        Switzerland = ...
        SyrianArabRepublic = ...
        Taiwan = ...
        Tajikistan = ...
        Tanzania = ...
        Thailand = ...
        Togo = ...
        TrinidadAndTobago = ...
        Tunisia = ...
        Turkey = ...
        Turkmenistan = ...
        TurksAndCaicosIslands = ...
        Uganda = ...
        Ukraine = ...
        UnitedArabEmirates = ...
        UnitedKingdom = ...
        UnitedStates = ...
        UnitedStatesMinorOutlyingIslands = ...
        Uruguay = ...
        Uzbekistan = ...
        Vanuatu = ...
        VaticanCityState = ...
        Venezuela = ...
        BritishVirginIslands = ...
        WallisAndFutunaIslands = ...
        WesternSahara = ...
        Yemen = ...
        Zambia = ...
        Zimbabwe = ...
        Montenegro = ...
        Serbia = ...
        SaintBarthelemy = ...
        SaintMartin = ...
        LatinAmericaAndTheCaribbean = ...
        LastCountry = ...
        Brunei = ...
        CongoKinshasa = ...
        CongoBrazzaville = ...
        Fiji = ...
        Guernsey = ...
        NorthKorea = ...
        SouthKorea = ...
        Laos = ...
        Libya = ...
        CuraSao = ...
        PalestinianTerritories = ...
        Russia = ...
        SaintLucia = ...
        SaintVincentAndTheGrenadines = ...
        SaintHelena = ...
        SaintPierreAndMiquelon = ...
        Syria = ...
        Tonga = ...
        Vietnam = ...
        UnitedStatesVirginIslands = ...
        CanaryIslands = ...
        ClippertonIsland = ...
        AscensionIsland = ...
        AlandIslands = ...
        DiegoGarcia = ...
        CeutaAndMelilla = ...
        IsleOfMan = ...
        Jersey = ...
        TristanDaCunha = ...
        SouthSudan = ...
        Bonaire = ...
        SintMaarten = ...
        Kosovo = ...
        TokelauCountry = ...
        TuvaluCountry = ...
        EuropeanUnion = ...
        OutlyingOceania = ...
        LatinAmerica = ...
        World = ...
        Europe = ...
        BosniaAndHerzegovina = ...
        CaribbeanNetherlands = ...
        Curacao = ...
        Czechia = ...
        Eswatini = ...
        Macao = ...
        SaintVincentAndGrenadines = ...
        SouthGeorgiaAndSouthSandwichIslands = ...
        SvalbardAndJanMayen = ...
        TimorLeste = ...
        UnitedStatesOutlyingIslands = ...
        VaticanCity = ...
        WallisAndFutuna = ...
        NauruTerritory = ...
        TokelauTerritory = ...
        TuvaluTerritory = ...

    class Language(enum.Enum):
        C = ...
        Abkhazian = ...
        Afan = ...
        Afar = ...
        Afrikaans = ...
        Albanian = ...
        Amharic = ...
        Arabic = ...
        Armenian = ...
        Assamese = ...
        Aymara = ...
        Azerbaijani = ...
        Bashkir = ...
        Basque = ...
        Bengali = ...
        Bhutani = ...
        Bislama = ...
        Breton = ...
        Bulgarian = ...
        Burmese = ...
        Byelorussian = ...
        Cambodian = ...
        Catalan = ...
        Chinese = ...
        Corsican = ...
        Croatian = ...
        Czech = ...
        Danish = ...
        Dutch = ...
        English = ...
        Esperanto = ...
        Estonian = ...
        Faroese = ...
        Finnish = ...
        French = ...
        Frisian = ...
        Gaelic = ...
        Galician = ...
        Georgian = ...
        German = ...
        Greek = ...
        Greenlandic = ...
        Guarani = ...
        Gujarati = ...
        Hausa = ...
        Hebrew = ...
        Hindi = ...
        Hungarian = ...
        Icelandic = ...
        Indonesian = ...
        Interlingua = ...
        Interlingue = ...
        Inuktitut = ...
        Inupiak = ...
        Irish = ...
        Italian = ...
        Japanese = ...
        Javanese = ...
        Kannada = ...
        Kashmiri = ...
        Kazakh = ...
        Kinyarwanda = ...
        Kirghiz = ...
        Korean = ...
        Kurdish = ...
        Kurundi = ...
        Latin = ...
        Latvian = ...
        Lingala = ...
        Lithuanian = ...
        Macedonian = ...
        Malagasy = ...
        Malay = ...
        Malayalam = ...
        Maltese = ...
        Maori = ...
        Marathi = ...
        Mongolian = ...
        NauruLanguage = ...
        Nepali = ...
        Occitan = ...
        Oriya = ...
        Pashto = ...
        Persian = ...
        Polish = ...
        Portuguese = ...
        Punjabi = ...
        Quechua = ...
        RhaetoRomance = ...
        Romanian = ...
        Russian = ...
        Samoan = ...
        Sanskrit = ...
        Serbian = ...
        Shona = ...
        Sindhi = ...
        Slovak = ...
        Slovenian = ...
        Somali = ...
        Spanish = ...
        Sundanese = ...
        Swahili = ...
        Swedish = ...
        Tajik = ...
        Tamil = ...
        Tatar = ...
        Telugu = ...
        Thai = ...
        Tibetan = ...
        Tigrinya = ...
        Tsonga = ...
        Turkish = ...
        Turkmen = ...
        Uigur = ...
        Ukrainian = ...
        Urdu = ...
        Uzbek = ...
        Vietnamese = ...
        Volapuk = ...
        Welsh = ...
        Wolof = ...
        Xhosa = ...
        Yiddish = ...
        Yoruba = ...
        Zhuang = ...
        Zulu = ...
        Bosnian = ...
        Divehi = ...
        Manx = ...
        Cornish = ...
        LastLanguage = ...
        NorwegianBokmal = ...
        NorwegianNynorsk = ...
        Akan = ...
        Konkani = ...
        Ga = ...
        Igbo = ...
        Kamba = ...
        Syriac = ...
        Blin = ...
        Geez = ...
        Koro = ...
        Sidamo = ...
        Atsam = ...
        Tigre = ...
        Jju = ...
        Friulian = ...
        Venda = ...
        Ewe = ...
        Walamo = ...
        Hawaiian = ...
        Tyap = ...
        Chewa = ...
        Filipino = ...
        SwissGerman = ...
        SichuanYi = ...
        Kpelle = ...
        LowGerman = ...
        SouthNdebele = ...
        NorthernSotho = ...
        NorthernSami = ...
        Taroko = ...
        Gusii = ...
        Taita = ...
        Fulah = ...
        Kikuyu = ...
        Samburu = ...
        Sena = ...
        NorthNdebele = ...
        Rombo = ...
        Tachelhit = ...
        Kabyle = ...
        Nyankole = ...
        Bena = ...
        Vunjo = ...
        Bambara = ...
        Embu = ...
        Cherokee = ...
        Morisyen = ...
        Makonde = ...
        Langi = ...
        Ganda = ...
        Bemba = ...
        Kabuverdianu = ...
        Meru = ...
        Kalenjin = ...
        Nama = ...
        Machame = ...
        Colognian = ...
        Masai = ...
        Soga = ...
        Luyia = ...
        Asu = ...
        Teso = ...
        Saho = ...
        KoyraChiini = ...
        Rwa = ...
        Luo = ...
        Chiga = ...
        CentralMoroccoTamazight = ...
        KoyraboroSenni = ...
        Shambala = ...
        AnyLanguage = ...
        Rundi = ...
        Bodo = ...
        Aghem = ...
        Basaa = ...
        Zarma = ...
        Duala = ...
        JolaFonyi = ...
        Ewondo = ...
        Bafia = ...
        LubaKatanga = ...
        MakhuwaMeetto = ...
        Mundang = ...
        Kwasio = ...
        Nuer = ...
        Sakha = ...
        Sangu = ...
        Tasawaq = ...
        Vai = ...
        Walser = ...
        Yangben = ...
        Oromo = ...
        Dzongkha = ...
        Belarusian = ...
        Khmer = ...
        Fijian = ...
        WesternFrisian = ...
        Lao = ...
        Marshallese = ...
        Romansh = ...
        Sango = ...
        Ossetic = ...
        SouthernSotho = ...
        Tswana = ...
        Sinhala = ...
        Swati = ...
        Sardinian = ...
        Tongan = ...
        Tahitian = ...
        Nyanja = ...
        Avaric = ...
        Chamorro = ...
        Chechen = ...
        Church = ...
        Chuvash = ...
        Cree = ...
        Haitian = ...
        Herero = ...
        HiriMotu = ...
        Kanuri = ...
        Komi = ...
        Kongo = ...
        Kwanyama = ...
        Limburgish = ...
        Luxembourgish = ...
        Navaho = ...
        Ndonga = ...
        Ojibwa = ...
        Pali = ...
        Walloon = ...
        Avestan = ...
        Asturian = ...
        Ngomba = ...
        Kako = ...
        Meta = ...
        Ngiemboon = ...
        Uighur = ...
        Aragonese = ...
        Akkadian = ...
        AncientEgyptian = ...
        AncientGreek = ...
        Aramaic = ...
        Balinese = ...
        Bamun = ...
        BatakToba = ...
        Buginese = ...
        Chakma = ...
        Coptic = ...
        Dogri = ...
        Gothic = ...
        Ingush = ...
        Mandingo = ...
        Manipuri = ...
        OldIrish = ...
        OldNorse = ...
        OldPersian = ...
        Pahlavi = ...
        Phoenician = ...
        Santali = ...
        Saurashtra = ...
        TaiDam = ...
        Ugaritic = ...
        Akoose = ...
        Lakota = ...
        StandardMoroccanTamazight = ...
        Mapuche = ...
        CentralKurdish = ...
        LowerSorbian = ...
        UpperSorbian = ...
        Kenyang = ...
        Mohawk = ...
        Nko = ...
        Prussian = ...
        Kiche = ...
        SouthernSami = ...
        LuleSami = ...
        InariSami = ...
        SkoltSami = ...
        Warlpiri = ...
        Mende = ...
        Lezghian = ...
        Maithili = ...
        AmericanSignLanguage = ...
        Bhojpuri = ...
        LiteraryChinese = ...
        Mazanderani = ...
        Newari = ...
        NorthernLuri = ...
        Palauan = ...
        Papiamento = ...
        TokelauLanguage = ...
        TokPisin = ...
        TuvaluLanguage = ...
        Cantonese = ...
        Osage = ...
        Ido = ...
        Lojban = ...
        Sicilian = ...
        SouthernKurdish = ...
        WesternBalochi = ...
        Cebuano = ...
        Erzya = ...
        Chickasaw = ...
        Muscogee = ...
        Silesian = ...
        NigerianPidgin = ...
        Bangla = ...
        CentralAtlasTamazight = ...
        Inupiaq = ...
        Kalaallisut = ...
        Kuanyama = ...
        Kyrgyz = ...
        Navajo = ...
        Odia = ...
        Uyghur = ...
        Wolaytta = ...
        Kaingang = ...
        Nheengatu = ...
        Haryanvi = ...
        NorthernFrisian = ...
        Rajasthani = ...
        Moksha = ...
        TokiPona = ...
        Pijin = ...
        Obolo = ...
        Baluchi = ...
        Ligurian = ...
        Rohingya = ...
        Torwali = ...
        Anii = ...
        Kangri = ...
        Venetian = ...
        Kuvi = ...
        KaraKalpak = ...
        SwampyCree = ...

    DefaultTwoDigitBaseYear: int = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, name: str | None) -> None: ...
    @typing.overload
    def __init__(
        self, language: QLocale.Language, country: QLocale.Country = ...
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        language: QLocale.Language,
        script: QLocale.Script,
        country: QLocale.Country,
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QLocale) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @staticmethod
    def territoryToString(territory: QLocale.Country) -> str: ...
    @staticmethod
    def codeToTerritory(territoryCode: str) -> QLocale.Country: ...
    @staticmethod
    def territoryToCode(territory: QLocale.Country) -> str: ...
    def nativeTerritoryName(self) -> str: ...
    def territory(self) -> QLocale.Country: ...
    @staticmethod
    def codeToScript(scriptCode: str) -> QLocale.Script: ...
    @staticmethod
    def scriptToCode(script: QLocale.Script) -> str: ...
    @staticmethod
    def codeToCountry(countryCode: str) -> QLocale.Country: ...
    @staticmethod
    def countryToCode(country: QLocale.Country) -> str: ...
    @staticmethod
    def codeToLanguage(
        languageCode: str, codeTypes: QLocale.LanguageCodeType = ...
    ) -> QLocale.Language: ...
    @staticmethod
    def languageToCode(
        language: QLocale.Language, codeTypes: QLocale.LanguageCodeType = ...
    ) -> str: ...
    def collation(self) -> QLocale: ...
    def toULong(self, s: str | None) -> tuple[int, bool | None]: ...
    def toLong(self, s: str | None) -> tuple[int, bool | None]: ...
    def formattedDataSize(
        self,
        bytes: int,
        precision: int = ...,
        format: QLocale.DataSizeFormat = ...,
    ) -> str: ...
    def swap(self, other: QLocale) -> None: ...
    def __hash__(self) -> int: ...
    def createSeparatedList(
        self, list: collections.abc.Iterable[str | None]
    ) -> str: ...
    def quoteString(
        self, str: str, style: QLocale.QuotationStyle = ...
    ) -> str: ...
    @staticmethod
    def matchingLocales(
        language: QLocale.Language,
        script: QLocale.Script,
        territory: QLocale.Country,
    ) -> list[QLocale]: ...
    @staticmethod
    def scriptToString(script: QLocale.Script) -> str: ...
    def uiLanguages(
        self, separator: QLocale.TagSeparator = ...
    ) -> list[str]: ...
    @typing.overload
    def toCurrencyString(
        self, a0: float, symbol: str | None = ..., precision: int = ...
    ) -> str: ...
    @typing.overload
    def toCurrencyString(
        self, value: int, symbol: str | None = ...
    ) -> str: ...
    def currencySymbol(
        self, format: QLocale.CurrencySymbolFormat = ...
    ) -> str: ...
    def toLower(self, str: str | None) -> str: ...
    def toUpper(self, str: str | None) -> str: ...
    def weekdays(self) -> list[Qt.DayOfWeek]: ...
    def firstDayOfWeek(self) -> Qt.DayOfWeek: ...
    def nativeCountryName(self) -> str: ...
    def nativeLanguageName(self) -> str: ...
    def bcp47Name(self, separator: QLocale.TagSeparator = ...) -> str: ...
    def script(self) -> QLocale.Script: ...
    def textDirection(self) -> Qt.LayoutDirection: ...
    def pmText(self) -> str: ...
    def amText(self) -> str: ...
    def standaloneDayName(
        self, a0: int, format: QLocale.FormatType = ...
    ) -> str: ...
    def standaloneMonthName(
        self, a0: int, format: QLocale.FormatType = ...
    ) -> str: ...
    def positiveSign(self) -> str: ...
    def measurementSystem(self) -> QLocale.MeasurementSystem: ...
    def numberOptions(self) -> QLocale.NumberOption: ...
    def setNumberOptions(self, options: QLocale.NumberOption) -> None: ...
    def dayName(self, a0: int, format: QLocale.FormatType = ...) -> str: ...
    def monthName(self, a0: int, format: QLocale.FormatType = ...) -> str: ...
    def exponential(self) -> str: ...
    def negativeSign(self) -> str: ...
    def zeroDigit(self) -> str: ...
    def percent(self) -> str: ...
    def groupSeparator(self) -> str: ...
    def decimalPoint(self) -> str: ...
    @typing.overload
    def toDateTime(
        self, string: str | None, format: str | None, baseYear: int = ...
    ) -> QDateTime: ...
    @typing.overload
    def toDateTime(
        self,
        string: str | None,
        format: str | None,
        cal: QCalendar,
        baseYear: int = ...,
    ) -> QDateTime: ...
    @typing.overload
    def toDateTime(
        self,
        string: str | None,
        format: QLocale.FormatType,
        cal: QCalendar,
        baseYear: int = ...,
    ) -> QDateTime: ...
    @typing.overload
    def toDateTime(
        self,
        string: str | None,
        format: QLocale.FormatType = ...,
        baseYear: int = ...,
    ) -> QDateTime: ...
    @typing.overload
    def toTime(
        self, string: str | None, format: QLocale.FormatType = ...
    ) -> QTime: ...
    @typing.overload
    def toTime(self, string: str | None, format: str | None) -> QTime: ...
    @typing.overload
    def toDate(
        self, string: str | None, format: str | None, baseYear: int = ...
    ) -> QDate: ...
    @typing.overload
    def toDate(
        self,
        string: str | None,
        format: str | None,
        cal: QCalendar,
        baseYear: int = ...,
    ) -> QDate: ...
    @typing.overload
    def toDate(
        self,
        string: str | None,
        format: QLocale.FormatType,
        cal: QCalendar,
        baseYear: int = ...,
    ) -> QDate: ...
    @typing.overload
    def toDate(
        self,
        string: str | None,
        a1: QLocale.FormatType = ...,
        baseYear: int = ...,
    ) -> QDate: ...
    def dateTimeFormat(self, format: QLocale.FormatType = ...) -> str: ...
    def timeFormat(self, format: QLocale.FormatType = ...) -> str: ...
    def dateFormat(self, format: QLocale.FormatType = ...) -> str: ...
    @staticmethod
    def system() -> QLocale: ...
    @staticmethod
    def c() -> QLocale: ...
    @staticmethod
    def setDefault(locale: QLocale) -> None: ...
    @staticmethod
    def countryToString(country: QLocale.Country) -> str: ...
    @staticmethod
    def languageToString(language: QLocale.Language) -> str: ...
    @typing.overload
    def toString(
        self,
        date: QDate | datetime.date,
        format: QLocale.FormatType,
        cal: QCalendar,
    ) -> str: ...
    @typing.overload
    def toString(
        self, date: QDate | datetime.date, formatStr: str, cal: QCalendar
    ) -> str: ...
    @typing.overload
    def toString(
        self, date: QDate | datetime.date, format: QLocale.FormatType = ...
    ) -> str: ...
    @typing.overload
    def toString(self, date: QDate | datetime.date, formatStr: str) -> str: ...
    @typing.overload
    def toString(
        self, time: QTime | datetime.time, format: QLocale.FormatType = ...
    ) -> str: ...
    @typing.overload
    def toString(self, time: QTime | datetime.time, formatStr: str) -> str: ...
    @typing.overload
    def toString(
        self, i: float, format: str = ..., precision: int = ...
    ) -> str: ...
    @typing.overload
    def toString(
        self,
        dateTime: QDateTime | datetime.datetime,
        format: QLocale.FormatType,
        cal: QCalendar,
    ) -> str: ...
    @typing.overload
    def toString(
        self, dateTime: QDateTime | datetime.datetime, format: str | None
    ) -> str: ...
    @typing.overload
    def toString(
        self,
        dateTime: QDateTime | datetime.datetime,
        formatStr: str | None,
        cal: QCalendar,
    ) -> str: ...
    @typing.overload
    def toString(
        self,
        dateTime: QDateTime | datetime.datetime,
        format: QLocale.FormatType = ...,
    ) -> str: ...
    @typing.overload
    def toString(self, i: int) -> str: ...
    def toDouble(self, s: str | None) -> tuple[float, bool | None]: ...
    def toFloat(self, s: str | None) -> tuple[float, bool | None]: ...
    def toULongLong(self, s: str | None) -> tuple[int, bool | None]: ...
    def toLongLong(self, s: str | None) -> tuple[int, bool | None]: ...
    def toUInt(self, s: str | None) -> tuple[int, bool | None]: ...
    def toInt(self, s: str | None) -> tuple[int, bool | None]: ...
    def toUShort(self, s: str | None) -> tuple[int, bool | None]: ...
    def toShort(self, s: str | None) -> tuple[int, bool | None]: ...
    def name(self, separator: QLocale.TagSeparator = ...) -> str: ...
    def country(self) -> QLocale.Country: ...
    def language(self) -> QLocale.Language: ...

class QLockFile(PyQt6.sip.simplewrapper):
    class LockError(enum.Enum):
        NoError = ...
        LockFailedError = ...
        PermissionError = ...
        UnknownError = ...

    def __init__(self, fileName: str | None) -> None: ...
    def fileName(self) -> str: ...
    def error(self) -> QLockFile.LockError: ...
    def removeStaleLockFile(self) -> bool: ...
    def getLockInfo(
        self,
    ) -> tuple[bool, int | None, str | None, str | None]: ...
    def isLocked(self) -> bool: ...
    def staleLockTime(self) -> int: ...
    def setStaleLockTime(self, a0: int) -> None: ...
    def unlock(self) -> None: ...
    def tryLock(self, timeout: int = ...) -> bool: ...
    def lock(self) -> bool: ...

class QMessageLogContext(PyQt6.sip.simplewrapper):
    CurrentVersion: int = ...
    category: str = ...
    file: str = ...
    function: str = ...
    line: int = ...

class QMessageLogger(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, file: str | None, line: int, function: str | None
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        file: str | None,
        line: int,
        function: str | None,
        category: str | None,
    ) -> None: ...
    @typing.overload
    def fatal(self, msg: str | None) -> None: ...
    @typing.overload
    def fatal(self, cat: QLoggingCategory, msg: str | None) -> None: ...
    @typing.overload
    def critical(self, msg: str | None) -> None: ...
    @typing.overload
    def critical(self, cat: QLoggingCategory, msg: str | None) -> None: ...
    @typing.overload
    def warning(self, msg: str | None) -> None: ...
    @typing.overload
    def warning(self, cat: QLoggingCategory, msg: str | None) -> None: ...
    @typing.overload
    def info(self, msg: str | None) -> None: ...
    @typing.overload
    def info(self, cat: QLoggingCategory, msg: str | None) -> None: ...
    @typing.overload
    def debug(self, msg: str | None) -> None: ...
    @typing.overload
    def debug(self, cat: QLoggingCategory, msg: str | None) -> None: ...

class QLoggingCategory(PyQt6.sip.simplewrapper):
    def __init__(
        self, category: str | None, severityLevel: QtMsgType = ...
    ) -> None: ...
    @staticmethod
    def setFilterRules(rules: str | None) -> None: ...
    @staticmethod
    def defaultCategory() -> QLoggingCategory | None: ...
    def __call__(self) -> QLoggingCategory: ...
    def categoryName(self) -> str | None: ...
    def isCriticalEnabled(self) -> bool: ...
    def isWarningEnabled(self) -> bool: ...
    def isInfoEnabled(self) -> bool: ...
    def isDebugEnabled(self) -> bool: ...
    def setEnabled(self, type: QtMsgType, enable: bool) -> None: ...
    def isEnabled(self, type: QtMsgType) -> bool: ...

class QMargins(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, aleft: int, atop: int, aright: int, abottom: int
    ) -> None: ...
    @typing.overload
    def __init__(self, a0: QMargins) -> None: ...
    def __or__(self, m2: QMargins) -> QMargins: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @typing.overload
    def __add__(self, m2: QMargins) -> QMargins: ...
    @typing.overload
    def __add__(self, rhs: int) -> QMargins: ...
    @typing.overload
    def __add__(self, rectangle: QRect) -> QRect: ...
    def __radd__(self, lhs: int) -> QMargins: ...
    @typing.overload
    def __sub__(self, m2: QMargins) -> QMargins: ...
    @typing.overload
    def __sub__(self, rhs: int) -> QMargins: ...
    @typing.overload
    def __mul__(self, factor: int) -> QMargins: ...
    @typing.overload
    def __mul__(self, factor: float) -> QMargins: ...
    @typing.overload
    def __truediv__(self, divisor: int) -> QMargins: ...
    @typing.overload
    def __truediv__(self, divisor: float) -> QMargins: ...
    def __pos__(self) -> QMargins: ...
    def __neg__(self) -> QMargins: ...
    def toMarginsF(self) -> QMarginsF: ...
    @typing.overload
    def __itruediv__(self, divisor: int) -> QMargins: ...
    @typing.overload
    def __itruediv__(self, divisor: float) -> QMargins: ...
    @typing.overload
    def __imul__(self, factor: int) -> QMargins: ...
    @typing.overload
    def __imul__(self, factor: float) -> QMargins: ...
    @typing.overload
    def __isub__(self, margins: QMargins) -> QMargins: ...
    @typing.overload
    def __isub__(self, margin: int) -> QMargins: ...
    @typing.overload
    def __iadd__(self, margins: QMargins) -> QMargins: ...
    @typing.overload
    def __iadd__(self, margin: int) -> QMargins: ...
    def setBottom(self, abottom: int) -> None: ...
    def setRight(self, aright: int) -> None: ...
    def setTop(self, atop: int) -> None: ...
    def setLeft(self, aleft: int) -> None: ...
    def bottom(self) -> int: ...
    def right(self) -> int: ...
    def top(self) -> int: ...
    def left(self) -> int: ...
    def isNull(self) -> bool: ...

class QMarginsF(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, aleft: float, atop: float, aright: float, abottom: float
    ) -> None: ...
    @typing.overload
    def __init__(self, margins: QMargins) -> None: ...
    @typing.overload
    def __init__(self, a0: QMarginsF) -> None: ...
    def __or__(self, m2: QMarginsF) -> QMarginsF: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @typing.overload
    def __add__(self, rhs: QMarginsF) -> QMarginsF: ...
    @typing.overload
    def __add__(self, rhs: float) -> QMarginsF: ...
    @typing.overload
    def __add__(self, rhs: QRectF) -> QRectF: ...
    def __radd__(self, lhs: float) -> QMarginsF: ...
    @typing.overload
    def __sub__(self, rhs: QMarginsF) -> QMarginsF: ...
    @typing.overload
    def __sub__(self, rhs: float) -> QMarginsF: ...
    def __mul__(self, rhs: float) -> QMarginsF: ...
    def __rmul__(self, lhs: float) -> QMarginsF: ...
    def __truediv__(self, divisor: float) -> QMarginsF: ...
    def __pos__(self) -> QMarginsF: ...
    def __neg__(self) -> QMarginsF: ...
    def toMargins(self) -> QMargins: ...
    def __itruediv__(self, divisor: float) -> typing.Self: ...
    def __imul__(self, factor: float) -> typing.Self: ...
    @typing.overload
    def __isub__(self, margins: QMarginsF) -> QMarginsF: ...
    @typing.overload
    def __isub__(self, subtrahend: float) -> QMarginsF: ...
    @typing.overload
    def __iadd__(self, margins: QMarginsF) -> QMarginsF: ...
    @typing.overload
    def __iadd__(self, addend: float) -> QMarginsF: ...
    def setBottom(self, abottom: float) -> None: ...
    def setRight(self, aright: float) -> None: ...
    def setTop(self, atop: float) -> None: ...
    def setLeft(self, aleft: float) -> None: ...
    def bottom(self) -> float: ...
    def right(self) -> float: ...
    def top(self) -> float: ...
    def left(self) -> float: ...
    def isNull(self) -> bool: ...

class QMessageAuthenticationCode(PyQt6.sip.simplewrapper):
    def __init__(
        self,
        method: QCryptographicHash.Algorithm,
        key: QByteArray | bytes | bytearray | memoryview = ...,
    ) -> None: ...
    def swap(self, other: QMessageAuthenticationCode) -> None: ...
    @staticmethod
    def hash(
        message: QByteArray | bytes | bytearray | memoryview,
        key: QByteArray | bytes | bytearray | memoryview,
        method: QCryptographicHash.Algorithm,
    ) -> QByteArray: ...
    def result(self) -> QByteArray: ...
    @typing.overload
    def addData(
        self, data: QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    @typing.overload
    def addData(self, device: QIODevice | None) -> bool: ...
    def setKey(
        self, key: QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def reset(self) -> None: ...

class QMetaMethod(PyQt6.sip.simplewrapper):
    class MethodType(enum.Enum):
        Method = ...
        Signal = ...
        Slot = ...
        Constructor = ...

    class Access(enum.Enum):
        Private = ...
        Protected = ...
        Public = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QMetaMethod) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def isConst(self) -> bool: ...
    def relativeMethodIndex(self) -> int: ...
    def parameterTypeName(self, index: int) -> QByteArray: ...
    def parameterMetaType(self, index: int) -> QMetaType: ...
    def returnMetaType(self) -> QMetaType: ...
    def parameterType(self, index: int) -> int: ...
    def parameterCount(self) -> int: ...
    def returnType(self) -> int: ...
    def name(self) -> QByteArray: ...
    def methodSignature(self) -> QByteArray: ...
    def isValid(self) -> bool: ...
    def revision(self) -> int: ...
    def methodIndex(self) -> int: ...
    @typing.overload
    def invoke(
        self,
        object: QObject | None,
        value0: QGenericArgument = ...,
        value1: QGenericArgument = ...,
        value2: QGenericArgument = ...,
        value3: QGenericArgument = ...,
        value4: QGenericArgument = ...,
        value5: QGenericArgument = ...,
        value6: QGenericArgument = ...,
        value7: QGenericArgument = ...,
        value8: QGenericArgument = ...,
        value9: QGenericArgument = ...,
    ) -> typing.Any: ...
    @typing.overload
    def invoke(
        self,
        object: QObject | None,
        connectionType: Qt.ConnectionType,
        value0: QGenericArgument = ...,
        value1: QGenericArgument = ...,
        value2: QGenericArgument = ...,
        value3: QGenericArgument = ...,
        value4: QGenericArgument = ...,
        value5: QGenericArgument = ...,
        value6: QGenericArgument = ...,
        value7: QGenericArgument = ...,
        value8: QGenericArgument = ...,
        value9: QGenericArgument = ...,
    ) -> typing.Any: ...
    @typing.overload
    def invoke(
        self,
        object: QObject | None,
        returnValue: QGenericReturnArgument,
        value0: QGenericArgument = ...,
        value1: QGenericArgument = ...,
        value2: QGenericArgument = ...,
        value3: QGenericArgument = ...,
        value4: QGenericArgument = ...,
        value5: QGenericArgument = ...,
        value6: QGenericArgument = ...,
        value7: QGenericArgument = ...,
        value8: QGenericArgument = ...,
        value9: QGenericArgument = ...,
    ) -> typing.Any: ...
    @typing.overload
    def invoke(
        self,
        object: QObject | None,
        connectionType: Qt.ConnectionType,
        returnValue: QGenericReturnArgument,
        value0: QGenericArgument = ...,
        value1: QGenericArgument = ...,
        value2: QGenericArgument = ...,
        value3: QGenericArgument = ...,
        value4: QGenericArgument = ...,
        value5: QGenericArgument = ...,
        value6: QGenericArgument = ...,
        value7: QGenericArgument = ...,
        value8: QGenericArgument = ...,
        value9: QGenericArgument = ...,
    ) -> typing.Any: ...
    def methodType(self) -> QMetaMethod.MethodType: ...
    def access(self) -> QMetaMethod.Access: ...
    def tag(self) -> str | None: ...
    def parameterNames(self) -> list[QByteArray]: ...
    def parameterTypes(self) -> list[QByteArray]: ...
    def typeName(self) -> str | None: ...

class QMetaEnum(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QMetaEnum) -> None: ...
    def is64Bit(self) -> bool: ...
    def metaType(self) -> QMetaType: ...
    def enumName(self) -> str | None: ...
    def isScoped(self) -> bool: ...
    def isValid(self) -> bool: ...
    def valueToKeys(self, value: int) -> QByteArray: ...
    def keysToValue(self, keys: str | None) -> tuple[int, bool | None]: ...
    def valueToKey(self, value: int) -> str | None: ...
    def keyToValue(self, key: str | None) -> tuple[int, bool | None]: ...
    def scope(self) -> str | None: ...
    def value(self, index: int) -> int: ...
    def key(self, index: int) -> str | None: ...
    def keyCount(self) -> int: ...
    def isFlag(self) -> bool: ...
    def name(self) -> str | None: ...

class QMetaProperty(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QMetaProperty) -> None: ...
    def typeId(self) -> int: ...
    def isBindable(self) -> bool: ...
    def metaType(self) -> QMetaType: ...
    def isRequired(self) -> bool: ...
    def relativePropertyIndex(self) -> int: ...
    def revision(self) -> int: ...
    def isFinal(self) -> bool: ...
    def isConstant(self) -> bool: ...
    def propertyIndex(self) -> int: ...
    def notifySignalIndex(self) -> int: ...
    def notifySignal(self) -> QMetaMethod: ...
    def hasNotifySignal(self) -> bool: ...
    def userType(self) -> int: ...
    def isUser(self) -> bool: ...
    def isResettable(self) -> bool: ...
    def isValid(self) -> bool: ...
    def hasStdCppSet(self) -> bool: ...
    def reset(self, obj: QObject | None) -> bool: ...
    def write(self, obj: QObject | None, value: typing.Any) -> bool: ...
    def read(self, obj: QObject | None) -> typing.Any: ...
    def enumerator(self) -> QMetaEnum: ...
    def isEnumType(self) -> bool: ...
    def isFlagType(self) -> bool: ...
    def isStored(self) -> bool: ...
    def isScriptable(self) -> bool: ...
    def isDesignable(self) -> bool: ...
    def isWritable(self) -> bool: ...
    def isReadable(self) -> bool: ...
    def typeName(self) -> str | None: ...
    def name(self) -> str | None: ...

class QMetaClassInfo(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QMetaClassInfo) -> None: ...
    def value(self) -> str | None: ...
    def name(self) -> str | None: ...

class QMetaType(PyQt6.sip.simplewrapper):
    class TypeFlag(enum.Flag):
        NeedsConstruction = ...
        NeedsDestruction = ...
        PointerToQObject = ...
        IsEnumeration = ...
        IsUnsignedEnumeration = ...
        IsPointer = ...
        RelocatableType = ...
        IsQmlList = ...
        IsConst = ...
        NeedsCopyConstruction = ...
        NeedsMoveConstruction = ...

    class Type(enum.Enum):
        UnknownType = ...
        Void = ...
        Bool = ...
        Int = ...
        UInt = ...
        LongLong = ...
        ULongLong = ...
        Double = ...
        QChar = ...
        QVariantMap = ...
        QVariantList = ...
        QVariantHash = ...
        QString = ...
        QStringList = ...
        QByteArray = ...
        QBitArray = ...
        QDate = ...
        QTime = ...
        QDateTime = ...
        QUrl = ...
        QLocale = ...
        QRect = ...
        QRectF = ...
        QSize = ...
        QSizeF = ...
        QLine = ...
        QLineF = ...
        QPoint = ...
        QPointF = ...
        LastCoreType = ...
        FirstGuiType = ...
        QFont = ...
        QPixmap = ...
        QBrush = ...
        QColor = ...
        QPalette = ...
        QIcon = ...
        QImage = ...
        QPolygon = ...
        QRegion = ...
        QBitmap = ...
        QCursor = ...
        QSizePolicy = ...
        QKeySequence = ...
        QPen = ...
        QTextLength = ...
        QTextFormat = ...
        QTransform = ...
        VoidStar = ...
        Long = ...
        Short = ...
        Char = ...
        Char16 = ...
        Char32 = ...
        ULong = ...
        UShort = ...
        UChar = ...
        Float = ...
        Float16 = ...
        QObjectStar = ...
        QMatrix4x4 = ...
        QVector2D = ...
        QVector3D = ...
        QVector4D = ...
        QQuaternion = ...
        QEasingCurve = ...
        QVariant = ...
        QUuid = ...
        QModelIndex = ...
        QPolygonF = ...
        SChar = ...
        QRegularExpression = ...
        QJsonValue = ...
        QJsonObject = ...
        QJsonArray = ...
        QJsonDocument = ...
        QByteArrayList = ...
        QPersistentModelIndex = ...
        QCborSimpleType = ...
        QCborValue = ...
        QCborArray = ...
        QCborMap = ...
        QColorSpace = ...
        QVariantPair = ...
        User = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, type: int) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def underlyingType(self) -> QMetaType: ...
    def isDestructible(self) -> bool: ...
    def isMoveConstructible(self) -> bool: ...
    def isCopyConstructible(self) -> bool: ...
    def isDefaultConstructible(self) -> bool: ...
    def registerType(self) -> None: ...
    def __hash__(self) -> int: ...
    @staticmethod
    def canView(fromType: QMetaType, toType: QMetaType) -> bool: ...
    @staticmethod
    def canConvert(fromType: QMetaType, toType: QMetaType) -> bool: ...
    @staticmethod
    def fromName(
        name: QByteArray | bytes | bytearray | memoryview,
    ) -> QMetaType: ...
    def isOrdered(self) -> bool: ...
    def isEqualityComparable(self) -> bool: ...
    def alignOf(self) -> int: ...
    def name(self) -> bytes | None: ...
    def hasRegisteredDebugStreamOperator(self) -> bool: ...
    def hasRegisteredDataStreamOperators(self) -> bool: ...
    def id(self) -> int: ...
    def isValid(self) -> bool: ...
    def flags(self) -> QMetaType.TypeFlag: ...
    def sizeOf(self) -> int: ...
    @typing.overload
    @staticmethod
    def isRegistered(type: int) -> bool: ...
    @typing.overload
    def isRegistered(self) -> bool: ...

class QMimeData(QObject):
    def __init__(self) -> None: ...
    def retrieveData(
        self, mimetype: str | None, preferredType: QMetaType
    ) -> typing.Any: ...
    def removeFormat(self, mimetype: str | None) -> None: ...
    def clear(self) -> None: ...
    def formats(self) -> list[str]: ...
    def hasFormat(self, mimetype: str | None) -> bool: ...
    def setData(
        self,
        mimetype: str | None,
        data: QByteArray | bytes | bytearray | memoryview,
    ) -> None: ...
    def data(self, mimetype: str | None) -> QByteArray: ...
    def hasColor(self) -> bool: ...
    def setColorData(self, color: typing.Any) -> None: ...
    def colorData(self) -> typing.Any: ...
    def hasImage(self) -> bool: ...
    def setImageData(self, image: typing.Any) -> None: ...
    def imageData(self) -> typing.Any: ...
    def hasHtml(self) -> bool: ...
    def setHtml(self, html: str | None) -> None: ...
    def html(self) -> str: ...
    def hasText(self) -> bool: ...
    def setText(self, text: str | None) -> None: ...
    def text(self) -> str: ...
    def hasUrls(self) -> bool: ...
    def setUrls(self, urls: collections.abc.Iterable[QUrl]) -> None: ...
    def urls(self) -> list[QUrl]: ...

class QMimeDatabase(PyQt6.sip.simplewrapper):
    class MatchMode(enum.Enum):
        MatchDefault = ...
        MatchExtension = ...
        MatchContent = ...

    def __init__(self) -> None: ...
    def allMimeTypes(self) -> list[QMimeType]: ...
    def suffixForFileName(self, fileName: str | None) -> str: ...
    @typing.overload
    def mimeTypeForFileNameAndData(
        self, fileName: str | None, device: QIODevice | None
    ) -> QMimeType: ...
    @typing.overload
    def mimeTypeForFileNameAndData(
        self,
        fileName: str | None,
        data: QByteArray | bytes | bytearray | memoryview,
    ) -> QMimeType: ...
    def mimeTypeForUrl(self, url: QUrl) -> QMimeType: ...
    @typing.overload
    def mimeTypeForData(
        self, data: QByteArray | bytes | bytearray | memoryview
    ) -> QMimeType: ...
    @typing.overload
    def mimeTypeForData(self, device: QIODevice | None) -> QMimeType: ...
    def mimeTypesForFileName(
        self, fileName: str | None
    ) -> list[QMimeType]: ...
    @typing.overload
    def mimeTypeForFile(
        self, fileName: str | None, mode: QMimeDatabase.MatchMode = ...
    ) -> QMimeType: ...
    @typing.overload
    def mimeTypeForFile(
        self, fileInfo: QFileInfo, mode: QMimeDatabase.MatchMode = ...
    ) -> QMimeType: ...
    def mimeTypeForName(self, nameOrAlias: str | None) -> QMimeType: ...

class QMimeType(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QMimeType) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def filterString(self) -> str: ...
    def inherits(self, mimeTypeName: str | None) -> bool: ...
    def preferredSuffix(self) -> str: ...
    def suffixes(self) -> list[str]: ...
    def aliases(self) -> list[str]: ...
    def allAncestors(self) -> list[str]: ...
    def parentMimeTypes(self) -> list[str]: ...
    def globPatterns(self) -> list[str]: ...
    def iconName(self) -> str: ...
    def genericIconName(self) -> str: ...
    def comment(self) -> str: ...
    def name(self) -> str: ...
    def isDefault(self) -> bool: ...
    def isValid(self) -> bool: ...
    def swap(self, other: QMimeType) -> None: ...

class QMutex(PyQt6.sip.simplewrapper):
    def __init__(self) -> None: ...
    def unlock(self) -> None: ...
    @typing.overload
    def tryLock(self) -> bool: ...
    @typing.overload
    def tryLock(self, timeout: QDeadlineTimer) -> bool: ...
    @typing.overload
    def tryLock(self, timeout: int) -> bool: ...
    def lock(self) -> None: ...

class QRecursiveMutex(PyQt6.sip.simplewrapper):
    def __init__(self) -> None: ...
    def unlock(self) -> None: ...
    @typing.overload
    def tryLock(self, a0: QDeadlineTimer) -> bool: ...
    @typing.overload
    def tryLock(self, timeout: int = ...) -> bool: ...
    def lock(self) -> None: ...

class QSignalBlocker(PyQt6.sip.simplewrapper):
    def __init__(self, o: QObject | None) -> None: ...
    def __exit__(
        self, type: typing.Any, value: typing.Any, traceback: typing.Any
    ) -> None: ...
    def __enter__(self) -> typing.Any: ...
    def unblock(self) -> None: ...
    def reblock(self) -> None: ...
    def dismiss(self) -> None: ...

class QObjectCleanupHandler(QObject):
    def __init__(self) -> None: ...
    def clear(self) -> None: ...
    def isEmpty(self) -> bool: ...
    def remove(self, object: QObject | None) -> None: ...
    def add(self, object: QObject | None) -> QObject | None: ...

class QMetaObject(PyQt6.sip.simplewrapper):
    class Connection(PyQt6.sip.simplewrapper):
        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, other: QMetaObject.Connection) -> None: ...
        def swap(self, o: QMetaObject.Connection) -> None: ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QMetaObject) -> None: ...
    def inherits(self, metaObject: QMetaObject | None) -> bool: ...
    def constructor(self, index: int) -> QMetaMethod: ...
    def indexOfConstructor(self, constructor: str | None) -> int: ...
    def constructorCount(self) -> int: ...
    def newInstance(
        self,
        value0: QGenericArgument,
        value1: QGenericArgument = ...,
        value2: QGenericArgument = ...,
        value3: QGenericArgument = ...,
        value4: QGenericArgument = ...,
        value5: QGenericArgument = ...,
        value6: QGenericArgument = ...,
        value7: QGenericArgument = ...,
        value8: QGenericArgument = ...,
        value9: QGenericArgument = ...,
    ) -> QObject | None: ...
    @typing.overload
    @staticmethod
    def invokeMethod(
        obj: QObject | None,
        member: str | None,
        a2: Qt.ConnectionType,
        ret: QGenericReturnArgument,
        value0: QGenericArgument = ...,
        value1: QGenericArgument = ...,
        value2: QGenericArgument = ...,
        value3: QGenericArgument = ...,
        value4: QGenericArgument = ...,
        value5: QGenericArgument = ...,
        value6: QGenericArgument = ...,
        value7: QGenericArgument = ...,
        value8: QGenericArgument = ...,
        value9: QGenericArgument = ...,
    ) -> typing.Any: ...
    @typing.overload
    @staticmethod
    def invokeMethod(
        obj: QObject | None,
        member: str | None,
        ret: QGenericReturnArgument,
        value0: QGenericArgument = ...,
        value1: QGenericArgument = ...,
        value2: QGenericArgument = ...,
        value3: QGenericArgument = ...,
        value4: QGenericArgument = ...,
        value5: QGenericArgument = ...,
        value6: QGenericArgument = ...,
        value7: QGenericArgument = ...,
        value8: QGenericArgument = ...,
        value9: QGenericArgument = ...,
    ) -> typing.Any: ...
    @typing.overload
    @staticmethod
    def invokeMethod(
        obj: QObject | None,
        member: str | None,
        type: Qt.ConnectionType,
        value0: QGenericArgument = ...,
        value1: QGenericArgument = ...,
        value2: QGenericArgument = ...,
        value3: QGenericArgument = ...,
        value4: QGenericArgument = ...,
        value5: QGenericArgument = ...,
        value6: QGenericArgument = ...,
        value7: QGenericArgument = ...,
        value8: QGenericArgument = ...,
        value9: QGenericArgument = ...,
    ) -> typing.Any: ...
    @typing.overload
    @staticmethod
    def invokeMethod(
        obj: QObject | None,
        member: str | None,
        value0: QGenericArgument = ...,
        value1: QGenericArgument = ...,
        value2: QGenericArgument = ...,
        value3: QGenericArgument = ...,
        value4: QGenericArgument = ...,
        value5: QGenericArgument = ...,
        value6: QGenericArgument = ...,
        value7: QGenericArgument = ...,
        value8: QGenericArgument = ...,
        value9: QGenericArgument = ...,
    ) -> typing.Any: ...
    @staticmethod
    def normalizedType(type: str | None) -> QByteArray: ...
    @staticmethod
    def normalizedSignature(method: str | None) -> QByteArray: ...
    @staticmethod
    def connectSlotsByName(o: QObject | None) -> None: ...
    @typing.overload
    @staticmethod
    def checkConnectArgs(signal: str | None, method: str | None) -> bool: ...
    @typing.overload
    @staticmethod
    def checkConnectArgs(signal: QMetaMethod, method: QMetaMethod) -> bool: ...
    def classInfo(self, index: int) -> QMetaClassInfo: ...
    def property(self, index: int) -> QMetaProperty: ...
    def enumerator(self, index: int) -> QMetaEnum: ...
    def method(self, index: int) -> QMetaMethod: ...
    def indexOfClassInfo(self, name: str | None) -> int: ...
    def indexOfProperty(self, name: str | None) -> int: ...
    def indexOfEnumerator(self, name: str | None) -> int: ...
    def indexOfSlot(self, slot: str | None) -> int: ...
    def indexOfSignal(self, signal: str | None) -> int: ...
    def indexOfMethod(self, method: str | None) -> int: ...
    def classInfoCount(self) -> int: ...
    def propertyCount(self) -> int: ...
    def enumeratorCount(self) -> int: ...
    def methodCount(self) -> int: ...
    def classInfoOffset(self) -> int: ...
    def propertyOffset(self) -> int: ...
    def enumeratorOffset(self) -> int: ...
    def methodOffset(self) -> int: ...
    def userProperty(self) -> QMetaProperty: ...
    def superClass(self) -> QMetaObject | None: ...
    def className(self) -> str | None: ...
    def metaType(self) -> QMetaType: ...

class QGenericArgument(PyQt6.sip.simplewrapper): ...
class QGenericReturnArgument(PyQt6.sip.simplewrapper): ...

class QOperatingSystemVersionBase(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QOperatingSystemVersionBase) -> None: ...
    def __ge__(self, rhs: QOperatingSystemVersionBase) -> bool: ...
    def __le__(self, rhs: QOperatingSystemVersionBase) -> bool: ...
    def __gt__(self, rhs: QOperatingSystemVersionBase) -> bool: ...
    def __lt__(self, rhs: QOperatingSystemVersionBase) -> bool: ...
    def name(self) -> str: ...
    def segmentCount(self) -> int: ...
    def microVersion(self) -> int: ...
    def minorVersion(self) -> int: ...
    def majorVersion(self) -> int: ...
    def version(self) -> QVersionNumber: ...

class QOperatingSystemVersion(QOperatingSystemVersionBase):
    class OSType(enum.Enum):
        Unknown = ...
        Windows = ...
        MacOS = ...
        IOS = ...
        TvOS = ...
        WatchOS = ...
        Android = ...

    Android10: QOperatingSystemVersion = ...
    Android11: QOperatingSystemVersion = ...
    Android12: QOperatingSystemVersionBase = ...
    Android12L: QOperatingSystemVersionBase = ...
    Android13: QOperatingSystemVersionBase = ...
    AndroidJellyBean: QOperatingSystemVersion = ...
    AndroidJellyBean_MR1: QOperatingSystemVersion = ...
    AndroidJellyBean_MR2: QOperatingSystemVersion = ...
    AndroidKitKat: QOperatingSystemVersion = ...
    AndroidLollipop: QOperatingSystemVersion = ...
    AndroidLollipop_MR1: QOperatingSystemVersion = ...
    AndroidMarshmallow: QOperatingSystemVersion = ...
    AndroidNougat: QOperatingSystemVersion = ...
    AndroidNougat_MR1: QOperatingSystemVersion = ...
    AndroidOreo: QOperatingSystemVersion = ...
    AndroidOreo_MR1: QOperatingSystemVersion = ...
    AndroidPie: QOperatingSystemVersion = ...
    MacOSBigSur: QOperatingSystemVersion = ...
    MacOSCatalina: QOperatingSystemVersion = ...
    MacOSHighSierra: QOperatingSystemVersion = ...
    MacOSMojave: QOperatingSystemVersion = ...
    MacOSMonterey: QOperatingSystemVersion = ...
    MacOSSierra: QOperatingSystemVersion = ...
    MacOSSonoma: QOperatingSystemVersionBase = ...
    MacOSVentura: QOperatingSystemVersionBase = ...
    OSXElCapitan: QOperatingSystemVersion = ...
    OSXMavericks: QOperatingSystemVersion = ...
    OSXYosemite: QOperatingSystemVersion = ...
    Windows10: QOperatingSystemVersion = ...
    Windows10_1809: QOperatingSystemVersionBase = ...
    Windows10_1903: QOperatingSystemVersionBase = ...
    Windows10_1909: QOperatingSystemVersionBase = ...
    Windows10_2004: QOperatingSystemVersionBase = ...
    Windows10_20H2: QOperatingSystemVersionBase = ...
    Windows10_21H1: QOperatingSystemVersionBase = ...
    Windows10_21H2: QOperatingSystemVersionBase = ...
    Windows10_22H2: QOperatingSystemVersionBase = ...
    Windows11: QOperatingSystemVersionBase = ...
    Windows11_21H2: QOperatingSystemVersionBase = ...
    Windows11_22H2: QOperatingSystemVersionBase = ...
    Windows7: QOperatingSystemVersion = ...
    Windows8: QOperatingSystemVersion = ...
    Windows8_1: QOperatingSystemVersion = ...

    @typing.overload
    def __init__(
        self,
        osType: QOperatingSystemVersion.OSType,
        vmajor: int,
        vminor: int = ...,
        vmicro: int = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, a0: QOperatingSystemVersion) -> None: ...
    def type(self) -> QOperatingSystemVersion.OSType: ...
    @staticmethod
    def currentType() -> QOperatingSystemVersion.OSType: ...
    @staticmethod
    def current() -> QOperatingSystemVersion: ...

class QParallelAnimationGroup(QAnimationGroup):
    def __init__(self, parent: QObject | None = ...) -> None: ...
    def updateDirection(
        self, direction: QAbstractAnimation.Direction
    ) -> None: ...
    def updateState(
        self,
        newState: QAbstractAnimation.State,
        oldState: QAbstractAnimation.State,
    ) -> None: ...
    def updateCurrentTime(self, currentTime: int) -> None: ...
    def event(self, event: QEvent | None) -> bool: ...
    def duration(self) -> int: ...

class QPauseAnimation(QAbstractAnimation):
    @typing.overload
    def __init__(self, parent: QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(self, msecs: int, parent: QObject | None = ...) -> None: ...
    def updateCurrentTime(self, a0: int) -> None: ...
    def event(self, e: QEvent | None) -> bool: ...
    def setDuration(self, msecs: int) -> None: ...
    def duration(self) -> int: ...

class QPermission(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QPermission) -> None: ...
    def value(self) -> typing.Any: ...
    def type(self) -> QMetaType: ...
    def status(self) -> Qt.PermissionStatus: ...

class QLocationPermission(PyQt6.sip.simplewrapper):
    class Availability(enum.Enum):
        WhenInUse = ...
        Always = ...

    class Accuracy(enum.Enum):
        Approximate = ...
        Precise = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QLocationPermission) -> None: ...
    def availability(self) -> QLocationPermission.Availability: ...
    def setAvailability(
        self, availability: QLocationPermission.Availability
    ) -> None: ...
    def accuracy(self) -> QLocationPermission.Accuracy: ...
    def setAccuracy(self, accuracy: QLocationPermission.Accuracy) -> None: ...

class QCalendarPermission(PyQt6.sip.simplewrapper):
    class AccessMode(enum.Enum):
        ReadOnly = ...
        ReadWrite = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QCalendarPermission) -> None: ...
    def accessMode(self) -> QCalendarPermission.AccessMode: ...
    def setAccessMode(self, mode: QCalendarPermission.AccessMode) -> None: ...

class QContactsPermission(PyQt6.sip.simplewrapper):
    class AccessMode(enum.Enum):
        ReadOnly = ...
        ReadWrite = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QContactsPermission) -> None: ...
    def accessMode(self) -> QContactsPermission.AccessMode: ...
    def setAccessMode(self, mode: QContactsPermission.AccessMode) -> None: ...

class QCameraPermission(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QCameraPermission) -> None: ...

class QMicrophonePermission(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QMicrophonePermission) -> None: ...

class QBluetoothPermission(PyQt6.sip.simplewrapper):
    class CommunicationMode(enum.Enum):
        Access = ...
        Advertise = ...
        Default = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QBluetoothPermission) -> None: ...
    def communicationModes(self) -> QBluetoothPermission.CommunicationMode: ...
    def setCommunicationModes(
        self, modes: QBluetoothPermission.CommunicationMode
    ) -> None: ...

class QVariantAnimation(QAbstractAnimation):
    def __init__(self, parent: QObject | None = ...) -> None: ...
    def interpolated(
        self, from_: typing.Any, to: typing.Any, progress: float
    ) -> typing.Any: ...
    def updateCurrentValue(self, value: typing.Any) -> None: ...
    def updateState(
        self,
        newState: QAbstractAnimation.State,
        oldState: QAbstractAnimation.State,
    ) -> None: ...
    def updateCurrentTime(self, a0: int) -> None: ...
    def event(self, event: QEvent | None) -> bool: ...
    valueChanged: typing.ClassVar[pyqtSignal]
    def setEasingCurve(
        self, easing: QEasingCurve | QEasingCurve.Type
    ) -> None: ...
    def easingCurve(self) -> QEasingCurve: ...
    def setDuration(self, msecs: int) -> None: ...
    def duration(self) -> int: ...
    def currentValue(self) -> typing.Any: ...
    def setKeyValues(
        self, values: collections.abc.Iterable[tuple[float, typing.Any]]
    ) -> None: ...
    def keyValues(self) -> list[tuple[float, typing.Any]]: ...
    def setKeyValueAt(self, step: float, value: typing.Any) -> None: ...
    def keyValueAt(self, step: float) -> typing.Any: ...
    def setEndValue(self, value: typing.Any) -> None: ...
    def endValue(self) -> typing.Any: ...
    def setStartValue(self, value: typing.Any) -> None: ...
    def startValue(self) -> typing.Any: ...

class QPropertyAnimation(QVariantAnimation):
    @typing.overload
    def __init__(self, parent: QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self,
        target: QObject | None,
        propertyName: QByteArray | bytes | bytearray | memoryview,
        parent: QObject | None = ...,
    ) -> None: ...
    def updateState(
        self,
        newState: QAbstractAnimation.State,
        oldState: QAbstractAnimation.State,
    ) -> None: ...
    def updateCurrentValue(self, value: typing.Any) -> None: ...
    def event(self, event: QEvent | None) -> bool: ...
    def setPropertyName(
        self, propertyName: QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def propertyName(self) -> QByteArray: ...
    def setTargetObject(self, target: QObject | None) -> None: ...
    def targetObject(self) -> QObject | None: ...

class QPluginLoader(QObject):
    @typing.overload
    def __init__(self, parent: QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self, fileName: str | None, parent: QObject | None = ...
    ) -> None: ...
    def loadHints(self) -> QLibrary.LoadHint: ...
    def setLoadHints(self, loadHints: QLibrary.LoadHint) -> None: ...
    def errorString(self) -> str: ...
    def fileName(self) -> str: ...
    def setFileName(self, fileName: str | None) -> None: ...
    def isLoaded(self) -> bool: ...
    def unload(self) -> bool: ...
    def load(self) -> bool: ...
    @staticmethod
    def staticInstances() -> list[QObject]: ...
    def instance(self) -> QObject | None: ...

class QPoint(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, xpos: int, ypos: int) -> None: ...
    @typing.overload
    def __init__(self, a0: QPoint) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __add__(self, p2: QPoint) -> QPoint: ...
    def __sub__(self, p2: QPoint) -> QPoint: ...
    @typing.overload
    def __mul__(self, factor: int) -> QPoint: ...
    @typing.overload
    def __mul__(self, factor: float) -> QPoint: ...
    @typing.overload
    def __rmul__(self, factor: int) -> QPoint: ...
    @typing.overload
    def __rmul__(self, factor: float) -> QPoint: ...
    def __truediv__(self, c: float) -> QPoint: ...
    def __pos__(self) -> QPoint: ...
    def __neg__(self) -> QPoint: ...
    def toPointF(self) -> QPointF: ...
    def transposed(self) -> QPoint: ...
    @staticmethod
    def dotProduct(p1: QPoint, p2: QPoint) -> int: ...
    def __itruediv__(self, c: float) -> typing.Self: ...
    @typing.overload
    def __imul__(self, c: int) -> QPoint: ...
    @typing.overload
    def __imul__(self, c: float) -> QPoint: ...
    def __isub__(self, p: QPoint) -> typing.Self: ...
    def __iadd__(self, p: QPoint) -> typing.Self: ...
    def setY(self, ypos: int) -> None: ...
    def setX(self, xpos: int) -> None: ...
    def y(self) -> int: ...
    def x(self) -> int: ...
    def __hash__(self) -> int: ...
    def __bool__(self) -> int: ...
    def isNull(self) -> bool: ...
    def manhattanLength(self) -> int: ...

class QPointF(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, xpos: float, ypos: float) -> None: ...
    @typing.overload
    def __init__(self, p: QPoint) -> None: ...
    @typing.overload
    def __init__(self, a0: QPointF) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __add__(self, p2: QPointF) -> QPointF: ...
    def __sub__(self, p2: QPointF) -> QPointF: ...
    def __mul__(self, c: float) -> QPointF: ...
    def __rmul__(self, c: float) -> QPointF: ...
    def __truediv__(self, divisor: float) -> QPointF: ...
    def __pos__(self) -> QPointF: ...
    def __neg__(self) -> QPointF: ...
    def transposed(self) -> QPointF: ...
    @staticmethod
    def dotProduct(p1: QPointF, p2: QPointF) -> float: ...
    def manhattanLength(self) -> float: ...
    def toPoint(self) -> QPoint: ...
    def __itruediv__(self, c: float) -> typing.Self: ...
    def __imul__(self, c: float) -> typing.Self: ...
    def __isub__(self, p: QPointF) -> typing.Self: ...
    def __iadd__(self, p: QPointF) -> typing.Self: ...
    def setY(self, ypos: float) -> None: ...
    def setX(self, xpos: float) -> None: ...
    def y(self) -> float: ...
    def x(self) -> float: ...
    def __bool__(self) -> int: ...
    def isNull(self) -> bool: ...

class QProcess(QIODevice):
    class UnixProcessFlag(enum.Enum):
        ResetSignalHandlers = ...
        IgnoreSigPipe = ...
        CloseFileDescriptors = ...
        UseVFork = ...
        CreateNewSession = ...
        DisconnectControllingTerminal = ...
        ResetIds = ...
        DisableCoreDumps = ...

    class InputChannelMode(enum.Enum):
        ManagedInputChannel = ...
        ForwardedInputChannel = ...

    class ProcessChannelMode(enum.Enum):
        SeparateChannels = ...
        MergedChannels = ...
        ForwardedChannels = ...
        ForwardedOutputChannel = ...
        ForwardedErrorChannel = ...

    class ProcessChannel(enum.Enum):
        StandardOutput = ...
        StandardError = ...

    class ProcessState(enum.Enum):
        NotRunning = ...
        Starting = ...
        Running = ...

    class ProcessError(enum.Enum):
        FailedToStart = ...
        Crashed = ...
        Timedout = ...
        ReadError = ...
        WriteError = ...
        UnknownError = ...

    class ExitStatus(enum.Enum):
        NormalExit = ...
        CrashExit = ...

    class UnixProcessParameters(PyQt6.sip.simplewrapper):
        flags: QProcess.UnixProcessFlag = ...
        lowestFileDescriptorToClose: int = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: QProcess.UnixProcessParameters) -> None: ...

    def __init__(self, parent: QObject | None = ...) -> None: ...
    @typing.overload
    def setUnixProcessParameters(
        self, flagsOnly: QProcess.UnixProcessFlag
    ) -> None: ...
    @typing.overload
    def setUnixProcessParameters(
        self, params: QProcess.UnixProcessParameters
    ) -> None: ...
    def unixProcessParameters(self) -> QProcess.UnixProcessParameters: ...
    def processId(self) -> int: ...
    @staticmethod
    def nullDevice() -> str: ...
    def setInputChannelMode(self, mode: QProcess.InputChannelMode) -> None: ...
    def inputChannelMode(self) -> QProcess.InputChannelMode: ...
    def open(self, mode: QIODeviceBase.OpenModeFlag = ...) -> bool: ...
    def setArguments(
        self, arguments: collections.abc.Iterable[str | None]
    ) -> None: ...
    def arguments(self) -> list[str]: ...
    def setProgram(self, program: str | None) -> None: ...
    def program(self) -> str: ...
    def processEnvironment(self) -> QProcessEnvironment: ...
    def setProcessEnvironment(
        self, environment: QProcessEnvironment
    ) -> None: ...
    def writeData(self, a0: PyQt6.sip.Buffer) -> int: ...
    def readData(self, maxlen: int) -> bytes: ...
    def setProcessState(self, state: QProcess.ProcessState) -> None: ...
    errorOccurred: typing.ClassVar[pyqtSignal]
    readyReadStandardError: typing.ClassVar[pyqtSignal]
    readyReadStandardOutput: typing.ClassVar[pyqtSignal]
    stateChanged: typing.ClassVar[pyqtSignal]
    finished: typing.ClassVar[pyqtSignal]
    started: typing.ClassVar[pyqtSignal]
    def kill(self) -> None: ...
    def terminate(self) -> None: ...
    def setStandardOutputProcess(
        self, destination: QProcess | None
    ) -> None: ...
    def setStandardErrorFile(
        self, fileName: str | None, mode: QIODeviceBase.OpenModeFlag = ...
    ) -> None: ...
    def setStandardOutputFile(
        self, fileName: str | None, mode: QIODeviceBase.OpenModeFlag = ...
    ) -> None: ...
    def setStandardInputFile(self, fileName: str | None) -> None: ...
    def setProcessChannelMode(
        self, mode: QProcess.ProcessChannelMode
    ) -> None: ...
    def processChannelMode(self) -> QProcess.ProcessChannelMode: ...
    @staticmethod
    def systemEnvironment() -> list[str]: ...
    @typing.overload
    @staticmethod
    def startDetached(
        program: str | None,
        arguments: collections.abc.Iterable[str | None] = ...,
        workingDirectory: str | None = ...,
    ) -> tuple[bool, int | None]: ...
    @typing.overload
    def startDetached(self) -> tuple[bool, int | None]: ...
    @staticmethod
    def execute(
        program: str | None,
        arguments: collections.abc.Iterable[str | None] = ...,
    ) -> int: ...
    def close(self) -> None: ...
    def isSequential(self) -> bool: ...
    def bytesToWrite(self) -> int: ...
    def exitStatus(self) -> QProcess.ExitStatus: ...
    def exitCode(self) -> int: ...
    def readAllStandardError(self) -> QByteArray: ...
    def readAllStandardOutput(self) -> QByteArray: ...
    def waitForFinished(self, msecs: int = ...) -> bool: ...
    def waitForBytesWritten(self, msecs: int = ...) -> bool: ...
    def waitForReadyRead(self, msecs: int = ...) -> bool: ...
    def waitForStarted(self, msecs: int = ...) -> bool: ...
    def state(self) -> QProcess.ProcessState: ...
    def error(self) -> QProcess.ProcessError: ...
    def setWorkingDirectory(self, dir: str | None) -> None: ...
    def workingDirectory(self) -> str: ...
    def closeWriteChannel(self) -> None: ...
    def closeReadChannel(self, channel: QProcess.ProcessChannel) -> None: ...
    def setReadChannel(self, channel: QProcess.ProcessChannel) -> None: ...
    def readChannel(self) -> QProcess.ProcessChannel: ...
    def startCommand(
        self, command: str | None, mode: QIODeviceBase.OpenModeFlag = ...
    ) -> None: ...
    @typing.overload
    def start(
        self,
        program: str | None,
        arguments: collections.abc.Iterable[str | None] = ...,
        mode: QIODeviceBase.OpenModeFlag = ...,
    ) -> None: ...
    @typing.overload
    def start(self, mode: QIODeviceBase.OpenModeFlag = ...) -> None: ...

class QProcessEnvironment(PyQt6.sip.simplewrapper):
    class Initialization(enum.Enum):
        InheritFromParent = ...

    @typing.overload
    def __init__(self, a0: QProcessEnvironment.Initialization) -> None: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QProcessEnvironment) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def inheritsFromParent(self) -> bool: ...
    def swap(self, other: QProcessEnvironment) -> None: ...
    def keys(self) -> list[str]: ...
    @staticmethod
    def systemEnvironment() -> QProcessEnvironment: ...
    def toStringList(self) -> list[str]: ...
    def value(
        self, name: str | None, defaultValue: str | None = ...
    ) -> str: ...
    def remove(self, name: str | None) -> None: ...
    @typing.overload
    def insert(self, name: str | None, value: str | None) -> None: ...
    @typing.overload
    def insert(self, e: QProcessEnvironment) -> None: ...
    def contains(self, name: str | None) -> bool: ...
    def clear(self) -> None: ...
    def isEmpty(self) -> bool: ...

class QRandomGenerator(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self, seed: int = ...) -> None: ...
    @typing.overload
    def __init__(self, other: QRandomGenerator) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @staticmethod
    def securelySeeded() -> QRandomGenerator: ...
    @staticmethod
    def global_() -> QRandomGenerator | None: ...
    @staticmethod
    def system() -> QRandomGenerator | None: ...
    @staticmethod
    def max() -> int: ...
    @staticmethod
    def min() -> int: ...
    def discard(self, z: int) -> None: ...
    def seed(self, seed: int = ...) -> None: ...
    def __call__(self) -> int: ...
    @typing.overload
    def bounded(self, highest: float) -> float: ...
    @typing.overload
    def bounded(self, lowest: int, highest: int) -> int: ...
    @typing.overload
    def bounded(self, highest: int) -> int: ...
    def generateDouble(self) -> float: ...
    def generate64(self) -> int: ...
    def generate(self) -> int: ...

class QReadWriteLock(PyQt6.sip.simplewrapper):
    class RecursionMode(enum.Enum):
        NonRecursive = ...
        Recursive = ...

    def __init__(
        self, recursionMode: QReadWriteLock.RecursionMode = ...
    ) -> None: ...
    def unlock(self) -> None: ...
    @typing.overload
    def tryLockForWrite(self, timeout: QDeadlineTimer = ...) -> bool: ...
    @typing.overload
    def tryLockForWrite(self, timeout: int) -> bool: ...
    def lockForWrite(self) -> None: ...
    @typing.overload
    def tryLockForRead(self, timeout: QDeadlineTimer = ...) -> bool: ...
    @typing.overload
    def tryLockForRead(self, timeout: int) -> bool: ...
    def lockForRead(self) -> None: ...

class QReadLocker(PyQt6.sip.simplewrapper):
    def __init__(self, areadWriteLock: QReadWriteLock | None) -> None: ...
    def __exit__(
        self, type: typing.Any, value: typing.Any, traceback: typing.Any
    ) -> None: ...
    def __enter__(self) -> typing.Any: ...
    def readWriteLock(self) -> QReadWriteLock | None: ...
    def relock(self) -> None: ...
    def unlock(self) -> None: ...

class QWriteLocker(PyQt6.sip.simplewrapper):
    def __init__(self, areadWriteLock: QReadWriteLock | None) -> None: ...
    def __exit__(
        self, type: typing.Any, value: typing.Any, traceback: typing.Any
    ) -> None: ...
    def __enter__(self) -> typing.Any: ...
    def readWriteLock(self) -> QReadWriteLock | None: ...
    def relock(self) -> None: ...
    def unlock(self) -> None: ...

class QRect(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, aleft: int, atop: int, awidth: int, aheight: int
    ) -> None: ...
    @typing.overload
    def __init__(self, atopLeft: QPoint, abottomRight: QPoint) -> None: ...
    @typing.overload
    def __init__(self, atopLeft: QPoint, asize: QSize) -> None: ...
    @typing.overload
    def __init__(self, a0: QRect) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __add__(self, margins: QMargins) -> QRect: ...
    def __sub__(self, rhs: QMargins) -> QRect: ...
    def toRectF(self) -> QRectF: ...
    @staticmethod
    def span(p1: QPoint, p2: QPoint) -> QRect: ...
    def transposed(self) -> QRect: ...
    def __isub__(self, margins: QMargins) -> typing.Self: ...
    def __iadd__(self, margins: QMargins) -> typing.Self: ...
    def marginsRemoved(self, margins: QMargins) -> QRect: ...
    def marginsAdded(self, margins: QMargins) -> QRect: ...
    def united(self, r: QRect) -> QRect: ...
    def intersected(self, other: QRect) -> QRect: ...
    def __iand__(self, r: QRect) -> typing.Self: ...
    def __ior__(self, r: QRect) -> typing.Self: ...
    def setSize(self, s: QSize) -> None: ...
    def setHeight(self, h: int) -> None: ...
    def setWidth(self, w: int) -> None: ...
    def adjust(self, dx1: int, dy1: int, dx2: int, dy2: int) -> None: ...
    def adjusted(self, xp1: int, yp1: int, xp2: int, yp2: int) -> QRect: ...
    def setCoords(self, xp1: int, yp1: int, xp2: int, yp2: int) -> None: ...
    def getCoords(
        self,
    ) -> tuple[int | None, int | None, int | None, int | None]: ...
    def setRect(self, ax: int, ay: int, aw: int, ah: int) -> None: ...
    def getRect(
        self,
    ) -> tuple[int | None, int | None, int | None, int | None]: ...
    def moveBottomLeft(self, p: QPoint) -> None: ...
    def moveTopRight(self, p: QPoint) -> None: ...
    def moveBottomRight(self, p: QPoint) -> None: ...
    def moveTopLeft(self, p: QPoint) -> None: ...
    def moveBottom(self, pos: int) -> None: ...
    def moveRight(self, pos: int) -> None: ...
    def moveTop(self, pos: int) -> None: ...
    def moveLeft(self, pos: int) -> None: ...
    @typing.overload
    def moveTo(self, ax: int, ay: int) -> None: ...
    @typing.overload
    def moveTo(self, p: QPoint) -> None: ...
    @typing.overload
    def translated(self, dx: int, dy: int) -> QRect: ...
    @typing.overload
    def translated(self, p: QPoint) -> QRect: ...
    @typing.overload
    def translate(self, dx: int, dy: int) -> None: ...
    @typing.overload
    def translate(self, p: QPoint) -> None: ...
    def size(self) -> QSize: ...
    def height(self) -> int: ...
    def width(self) -> int: ...
    def center(self) -> QPoint: ...
    def bottomLeft(self) -> QPoint: ...
    def topRight(self) -> QPoint: ...
    def bottomRight(self) -> QPoint: ...
    def topLeft(self) -> QPoint: ...
    def setY(self, ay: int) -> None: ...
    def setX(self, ax: int) -> None: ...
    def setBottomLeft(self, p: QPoint) -> None: ...
    def setTopRight(self, p: QPoint) -> None: ...
    def setBottomRight(self, p: QPoint) -> None: ...
    def setTopLeft(self, p: QPoint) -> None: ...
    def setBottom(self, pos: int) -> None: ...
    def setRight(self, pos: int) -> None: ...
    def setTop(self, pos: int) -> None: ...
    def setLeft(self, pos: int) -> None: ...
    def y(self) -> int: ...
    def x(self) -> int: ...
    def bottom(self) -> int: ...
    def right(self) -> int: ...
    def top(self) -> int: ...
    def left(self) -> int: ...
    def __hash__(self) -> int: ...
    def __bool__(self) -> int: ...
    def isValid(self) -> bool: ...
    def isEmpty(self) -> bool: ...
    def isNull(self) -> bool: ...
    def intersects(self, r: QRect) -> bool: ...
    @typing.overload
    def __contains__(self, p: QPoint) -> int: ...
    @typing.overload
    def __contains__(self, r: QRect) -> int: ...
    @typing.overload
    def contains(self, point: QPoint, proper: bool = ...) -> bool: ...
    @typing.overload
    def contains(self, rectangle: QRect, proper: bool = ...) -> bool: ...
    @typing.overload
    def contains(self, ax: int, ay: int, aproper: bool) -> bool: ...
    @typing.overload
    def contains(self, ax: int, ay: int) -> bool: ...
    def __and__(self, r: QRect) -> QRect: ...
    def __or__(self, r: QRect) -> QRect: ...
    def moveCenter(self, p: QPoint) -> None: ...
    def normalized(self) -> QRect: ...

class QRectF(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, atopLeft: QPointF, asize: QSizeF) -> None: ...
    @typing.overload
    def __init__(self, atopLeft: QPointF, abottomRight: QPointF) -> None: ...
    @typing.overload
    def __init__(
        self, aleft: float, atop: float, awidth: float, aheight: float
    ) -> None: ...
    @typing.overload
    def __init__(self, r: QRect) -> None: ...
    @typing.overload
    def __init__(self, a0: QRectF) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __add__(self, rhs: QMarginsF) -> QRectF: ...
    def __sub__(self, rhs: QMarginsF) -> QRectF: ...
    def transposed(self) -> QRectF: ...
    def __isub__(self, margins: QMarginsF) -> typing.Self: ...
    def __iadd__(self, margins: QMarginsF) -> typing.Self: ...
    def marginsRemoved(self, margins: QMarginsF) -> QRectF: ...
    def marginsAdded(self, margins: QMarginsF) -> QRectF: ...
    def toRect(self) -> QRect: ...
    def toAlignedRect(self) -> QRect: ...
    def united(self, r: QRectF) -> QRectF: ...
    def intersected(self, r: QRectF) -> QRectF: ...
    def __iand__(self, r: QRectF) -> typing.Self: ...
    def __ior__(self, r: QRectF) -> typing.Self: ...
    def setSize(self, s: QSizeF) -> None: ...
    def setHeight(self, ah: float) -> None: ...
    def setWidth(self, aw: float) -> None: ...
    def adjusted(
        self, xp1: float, yp1: float, xp2: float, yp2: float
    ) -> QRectF: ...
    def adjust(
        self, xp1: float, yp1: float, xp2: float, yp2: float
    ) -> None: ...
    def setCoords(
        self, xp1: float, yp1: float, xp2: float, yp2: float
    ) -> None: ...
    def getCoords(
        self,
    ) -> tuple[float | None, float | None, float | None, float | None]: ...
    def setRect(
        self, ax: float, ay: float, aaw: float, aah: float
    ) -> None: ...
    def getRect(
        self,
    ) -> tuple[float | None, float | None, float | None, float | None]: ...
    @typing.overload
    def translated(self, dx: float, dy: float) -> QRectF: ...
    @typing.overload
    def translated(self, p: QPointF) -> QRectF: ...
    @typing.overload
    def moveTo(self, ax: float, ay: float) -> None: ...
    @typing.overload
    def moveTo(self, p: QPointF) -> None: ...
    @typing.overload
    def translate(self, dx: float, dy: float) -> None: ...
    @typing.overload
    def translate(self, p: QPointF) -> None: ...
    def size(self) -> QSizeF: ...
    def height(self) -> float: ...
    def width(self) -> float: ...
    def moveCenter(self, p: QPointF) -> None: ...
    def moveBottomRight(self, p: QPointF) -> None: ...
    def moveBottomLeft(self, p: QPointF) -> None: ...
    def moveTopRight(self, p: QPointF) -> None: ...
    def moveTopLeft(self, p: QPointF) -> None: ...
    def moveBottom(self, pos: float) -> None: ...
    def moveRight(self, pos: float) -> None: ...
    def moveTop(self, pos: float) -> None: ...
    def moveLeft(self, pos: float) -> None: ...
    def center(self) -> QPointF: ...
    def setBottomRight(self, p: QPointF) -> None: ...
    def setBottomLeft(self, p: QPointF) -> None: ...
    def setTopRight(self, p: QPointF) -> None: ...
    def setTopLeft(self, p: QPointF) -> None: ...
    def setBottom(self, pos: float) -> None: ...
    def setTop(self, pos: float) -> None: ...
    def setRight(self, pos: float) -> None: ...
    def setLeft(self, pos: float) -> None: ...
    def y(self) -> float: ...
    def x(self) -> float: ...
    def __bool__(self) -> int: ...
    def isValid(self) -> bool: ...
    def isEmpty(self) -> bool: ...
    def isNull(self) -> bool: ...
    def intersects(self, r: QRectF) -> bool: ...
    @typing.overload
    def __contains__(self, p: QPointF) -> int: ...
    @typing.overload
    def __contains__(self, r: QRectF) -> int: ...
    @typing.overload
    def contains(self, p: QPointF) -> bool: ...
    @typing.overload
    def contains(self, r: QRectF) -> bool: ...
    @typing.overload
    def contains(self, ax: float, ay: float) -> bool: ...
    def __and__(self, r: QRectF) -> QRectF: ...
    def __or__(self, r: QRectF) -> QRectF: ...
    def bottomLeft(self) -> QPointF: ...
    def topRight(self) -> QPointF: ...
    def bottomRight(self) -> QPointF: ...
    def topLeft(self) -> QPointF: ...
    def setY(self, pos: float) -> None: ...
    def setX(self, pos: float) -> None: ...
    def bottom(self) -> float: ...
    def right(self) -> float: ...
    def top(self) -> float: ...
    def left(self) -> float: ...
    def normalized(self) -> QRectF: ...

class QRegularExpression(PyQt6.sip.simplewrapper):
    class WildcardConversionOption(enum.Flag):
        DefaultWildcardConversion = ...
        UnanchoredWildcardConversion = ...
        NonPathWildcardConversion = ...

    class MatchOption(enum.Flag):
        NoMatchOption = ...
        AnchorAtOffsetMatchOption = ...
        DontCheckSubjectStringMatchOption = ...

    class MatchType(enum.Enum):
        NormalMatch = ...
        PartialPreferCompleteMatch = ...
        PartialPreferFirstMatch = ...
        NoMatch = ...

    class PatternOption(enum.Flag):
        NoPatternOption = ...
        CaseInsensitiveOption = ...
        DotMatchesEverythingOption = ...
        MultilineOption = ...
        ExtendedPatternSyntaxOption = ...
        InvertedGreedinessOption = ...
        DontCaptureOption = ...
        UseUnicodePropertiesOption = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self,
        pattern: str | None,
        options: QRegularExpression.PatternOption = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, re: QRegularExpression) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    @staticmethod
    def fromWildcard(
        pattern: str,
        cs: Qt.CaseSensitivity = ...,
        options: QRegularExpression.WildcardConversionOption = ...,
    ) -> QRegularExpression: ...
    @staticmethod
    def anchoredPattern(expression: str | None) -> str: ...
    @staticmethod
    def wildcardToRegularExpression(
        str: str, options: QRegularExpression.WildcardConversionOption = ...
    ) -> str: ...
    def __hash__(self) -> int: ...
    def optimize(self) -> None: ...
    def namedCaptureGroups(self) -> list[str]: ...
    @staticmethod
    def escape(str: str | None) -> str: ...
    def globalMatchView(
        self,
        subjectView: str,
        offset: int = ...,
        matchType: QRegularExpression.MatchType = ...,
        matchOptions: QRegularExpression.MatchOption = ...,
    ) -> QRegularExpressionMatchIterator: ...
    def globalMatch(
        self,
        subject: str | None,
        offset: int = ...,
        matchType: QRegularExpression.MatchType = ...,
        matchOptions: QRegularExpression.MatchOption = ...,
    ) -> QRegularExpressionMatchIterator: ...
    def matchView(
        self,
        subjectView: str,
        offset: int = ...,
        matchType: QRegularExpression.MatchType = ...,
        matchOptions: QRegularExpression.MatchOption = ...,
    ) -> QRegularExpressionMatch: ...
    def match(
        self,
        subject: str | None,
        offset: int = ...,
        matchType: QRegularExpression.MatchType = ...,
        matchOptions: QRegularExpression.MatchOption = ...,
    ) -> QRegularExpressionMatch: ...
    def captureCount(self) -> int: ...
    def errorString(self) -> str: ...
    def patternErrorOffset(self) -> int: ...
    def isValid(self) -> bool: ...
    def setPattern(self, pattern: str | None) -> None: ...
    def pattern(self) -> str: ...
    def swap(self, re: QRegularExpression) -> None: ...
    def setPatternOptions(
        self, options: QRegularExpression.PatternOption
    ) -> None: ...
    def patternOptions(self) -> QRegularExpression.PatternOption: ...

class QRegularExpressionMatch(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, match: QRegularExpressionMatch) -> None: ...
    @typing.overload
    def hasCaptured(self, nth: int) -> bool: ...
    @typing.overload
    def hasCaptured(
        self, name: QByteArray | bytes | bytearray | memoryview | str | None
    ) -> bool: ...
    @typing.overload
    def capturedEnd(
        self, name: QByteArray | bytes | bytearray | memoryview | str | None
    ) -> int: ...
    @typing.overload
    def capturedEnd(self, nth: int = ...) -> int: ...
    @typing.overload
    def capturedLength(
        self, name: QByteArray | bytes | bytearray | memoryview | str | None
    ) -> int: ...
    @typing.overload
    def capturedLength(self, nth: int = ...) -> int: ...
    @typing.overload
    def capturedStart(
        self, name: QByteArray | bytes | bytearray | memoryview | str | None
    ) -> int: ...
    @typing.overload
    def capturedStart(self, nth: int = ...) -> int: ...
    def capturedTexts(self) -> list[str]: ...
    @typing.overload
    def captured(self, nth: int = ...) -> str: ...
    @typing.overload
    def captured(
        self, name: QByteArray | bytes | bytearray | memoryview | str | None
    ) -> str: ...
    def lastCapturedIndex(self) -> int: ...
    def isValid(self) -> bool: ...
    def hasPartialMatch(self) -> bool: ...
    def hasMatch(self) -> bool: ...
    def matchOptions(self) -> QRegularExpression.MatchOption: ...
    def matchType(self) -> QRegularExpression.MatchType: ...
    def regularExpression(self) -> QRegularExpression: ...
    def swap(self, match: QRegularExpressionMatch) -> None: ...

class QRegularExpressionMatchIterator(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, iterator: QRegularExpressionMatchIterator) -> None: ...
    def matchOptions(self) -> QRegularExpression.MatchOption: ...
    def matchType(self) -> QRegularExpression.MatchType: ...
    def regularExpression(self) -> QRegularExpression: ...
    def peekNext(self) -> QRegularExpressionMatch: ...
    def next(self) -> QRegularExpressionMatch: ...
    def hasNext(self) -> bool: ...
    def isValid(self) -> bool: ...
    def swap(self, iterator: QRegularExpressionMatchIterator) -> None: ...

class QResource(PyQt6.sip.simplewrapper):
    class Compression(enum.Enum):
        NoCompression = ...
        ZlibCompression = ...
        ZstdCompression = ...

    def __init__(
        self, fileName: str | None = ..., locale: QLocale = ...
    ) -> None: ...
    def uncompressedData(self) -> QByteArray: ...
    def uncompressedSize(self) -> int: ...
    def compressionAlgorithm(self) -> QResource.Compression: ...
    def lastModified(self) -> QDateTime: ...
    def isFile(self) -> bool: ...
    def isDir(self) -> bool: ...
    def children(self) -> list[str]: ...
    @staticmethod
    def unregisterResourceData(
        rccData: bytes | None, mapRoot: str | None = ...
    ) -> bool: ...
    @staticmethod
    def unregisterResource(
        rccFileName: str | None, mapRoot: str | None = ...
    ) -> bool: ...
    @staticmethod
    def registerResourceData(
        rccData: bytes | None, mapRoot: str | None = ...
    ) -> bool: ...
    @staticmethod
    def registerResource(
        rccFileName: str | None, mapRoot: str | None = ...
    ) -> bool: ...
    def size(self) -> int: ...
    def setLocale(self, locale: QLocale) -> None: ...
    def setFileName(self, file: str | None) -> None: ...
    def locale(self) -> QLocale: ...
    def isValid(self) -> bool: ...
    def fileName(self) -> str: ...
    def data(self) -> bytes: ...
    def absoluteFilePath(self) -> str: ...

class QRunnable(PyQt6.sip.wrapper):
    def __init__(self) -> None: ...
    @staticmethod
    def create(
        functionToRun: collections.abc.Callable[[], None],
    ) -> QRunnable | None: ...
    def setAutoDelete(self, _autoDelete: bool) -> None: ...
    def autoDelete(self) -> bool: ...
    def run(self) -> None: ...

class QSaveFile(QFileDevice):
    @typing.overload
    def __init__(self, name: str | None) -> None: ...
    @typing.overload
    def __init__(self, parent: QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(self, name: str | None, parent: QObject | None) -> None: ...
    def writeData(self, a0: PyQt6.sip.Buffer) -> int: ...
    def directWriteFallback(self) -> bool: ...
    def setDirectWriteFallback(self, enabled: bool) -> None: ...
    def cancelWriting(self) -> None: ...
    def commit(self) -> bool: ...
    def open(self, flags: QIODeviceBase.OpenModeFlag) -> bool: ...
    def setFileName(self, name: str | None) -> None: ...
    def fileName(self) -> str: ...

class QSemaphore(PyQt6.sip.simplewrapper):
    def __init__(self, n: int = ...) -> None: ...
    def available(self) -> int: ...
    def release(self, n: int = ...) -> None: ...
    @typing.overload
    def tryAcquire(self, n: int = ...) -> bool: ...
    @typing.overload
    def tryAcquire(self, n: int, timeout: QDeadlineTimer) -> bool: ...
    @typing.overload
    def tryAcquire(self, n: int, timeout: int) -> bool: ...
    def acquire(self, n: int = ...) -> None: ...

class QSemaphoreReleaser(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, sem: QSemaphore | None, n: int = ...) -> None: ...
    def cancel(self) -> QSemaphore | None: ...
    def semaphore(self) -> QSemaphore | None: ...
    def swap(self, other: QSemaphoreReleaser) -> None: ...

class QSequentialAnimationGroup(QAnimationGroup):
    def __init__(self, parent: QObject | None = ...) -> None: ...
    def updateDirection(
        self, direction: QAbstractAnimation.Direction
    ) -> None: ...
    def updateState(
        self,
        newState: QAbstractAnimation.State,
        oldState: QAbstractAnimation.State,
    ) -> None: ...
    def updateCurrentTime(self, a0: int) -> None: ...
    def event(self, event: QEvent | None) -> bool: ...
    currentAnimationChanged: typing.ClassVar[pyqtSignal]
    def duration(self) -> int: ...
    def currentAnimation(self) -> QAbstractAnimation | None: ...
    def insertPause(
        self, index: int, msecs: int
    ) -> QPauseAnimation | None: ...
    def addPause(self, msecs: int) -> QPauseAnimation | None: ...

class QSettings(QObject):
    class Scope(enum.Enum):
        UserScope = ...
        SystemScope = ...

    class Format(enum.Enum):
        NativeFormat = ...
        IniFormat = ...
        InvalidFormat = ...

    class Status(enum.Enum):
        NoError = ...
        AccessError = ...
        FormatError = ...

    @typing.overload
    def __init__(
        self,
        organization: str | None,
        application: str | None = ...,
        parent: QObject | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        scope: QSettings.Scope,
        organization: str | None,
        application: str | None = ...,
        parent: QObject | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        format: QSettings.Format,
        scope: QSettings.Scope,
        organization: str | None,
        application: str | None = ...,
        parent: QObject | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        fileName: str | None,
        format: QSettings.Format,
        parent: QObject | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self, scope: QSettings.Scope, parent: QObject | None = ...
    ) -> None: ...
    @typing.overload
    def __init__(self, parent: QObject | None = ...) -> None: ...
    def event(self, event: QEvent | None) -> bool: ...
    def setAtomicSyncRequired(self, enable: bool) -> None: ...
    def isAtomicSyncRequired(self) -> bool: ...
    @staticmethod
    def defaultFormat() -> QSettings.Format: ...
    @staticmethod
    def setDefaultFormat(format: QSettings.Format) -> None: ...
    def applicationName(self) -> str: ...
    def organizationName(self) -> str: ...
    def scope(self) -> QSettings.Scope: ...
    def format(self) -> QSettings.Format: ...
    @staticmethod
    def setPath(
        format: QSettings.Format, scope: QSettings.Scope, path: str | None
    ) -> None: ...
    def fileName(self) -> str: ...
    def fallbacksEnabled(self) -> bool: ...
    def setFallbacksEnabled(self, b: bool) -> None: ...
    def contains(
        self, key: QByteArray | bytes | bytearray | memoryview | str | None
    ) -> bool: ...
    def remove(
        self, key: QByteArray | bytes | bytearray | memoryview | str | None
    ) -> None: ...
    def value(
        self,
        key: QByteArray | bytes | bytearray | memoryview | str | None,
        defaultValue: typing.Any = ...,
        type: type = ...,
    ) -> typing.Any: ...
    def setValue(
        self,
        key: QByteArray | bytes | bytearray | memoryview | str | None,
        value: typing.Any,
    ) -> None: ...
    def isWritable(self) -> bool: ...
    def childGroups(self) -> list[str]: ...
    def childKeys(self) -> list[str]: ...
    def allKeys(self) -> list[str]: ...
    def setArrayIndex(self, i: int) -> None: ...
    def endArray(self) -> None: ...
    def beginWriteArray(
        self,
        prefix: QByteArray | bytes | bytearray | memoryview | str | None,
        size: int = ...,
    ) -> None: ...
    def beginReadArray(
        self, prefix: QByteArray | bytes | bytearray | memoryview | str | None
    ) -> int: ...
    def group(self) -> str: ...
    def endGroup(self) -> None: ...
    def beginGroup(
        self, prefix: QByteArray | bytes | bytearray | memoryview | str | None
    ) -> None: ...
    def status(self) -> QSettings.Status: ...
    def sync(self) -> None: ...
    def clear(self) -> None: ...

class QSharedMemory(QObject):
    class SharedMemoryError(enum.Enum):
        NoError = ...
        PermissionDenied = ...
        InvalidSize = ...
        KeyError = ...
        AlreadyExists = ...
        NotFound = ...
        LockError = ...
        OutOfResources = ...
        UnknownError = ...

    class AccessMode(enum.Enum):
        ReadOnly = ...
        ReadWrite = ...

    @typing.overload
    def __init__(self, parent: QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self, key: QNativeIpcKey, parent: QObject | None = ...
    ) -> None: ...
    @typing.overload
    def __init__(
        self, key: str | None, parent: QObject | None = ...
    ) -> None: ...
    @staticmethod
    def legacyNativeKey(
        key: str | None, type: QNativeIpcKey.Type = ...
    ) -> QNativeIpcKey: ...
    @staticmethod
    def platformSafeKey(
        key: str | None, type: QNativeIpcKey.Type = ...
    ) -> QNativeIpcKey: ...
    @staticmethod
    def isKeyTypeSupported(type: QNativeIpcKey.Type) -> bool: ...
    def nativeIpcKey(self) -> QNativeIpcKey: ...
    def nativeKey(self) -> str: ...
    @typing.overload
    def setNativeKey(self, key: QNativeIpcKey) -> None: ...
    @typing.overload
    def setNativeKey(
        self, key: str | None, type: QNativeIpcKey.Type = ...
    ) -> None: ...
    def errorString(self) -> str: ...
    def error(self) -> QSharedMemory.SharedMemoryError: ...
    def unlock(self) -> bool: ...
    def lock(self) -> bool: ...
    def constData(self) -> PyQt6.sip.voidptr: ...
    def data(self) -> PyQt6.sip.voidptr: ...
    def detach(self) -> bool: ...
    def isAttached(self) -> bool: ...
    def attach(self, mode: QSharedMemory.AccessMode = ...) -> bool: ...
    def size(self) -> int: ...
    def create(
        self, size: int, mode: QSharedMemory.AccessMode = ...
    ) -> bool: ...
    def key(self) -> str: ...
    def setKey(self, key: str | None) -> None: ...

class QSignalMapper(QObject):
    def __init__(self, parent: QObject | None = ...) -> None: ...
    @typing.overload
    def map(self) -> None: ...
    @typing.overload
    def map(self, sender: QObject | None) -> None: ...
    mappedObject: typing.ClassVar[pyqtSignal]
    mappedString: typing.ClassVar[pyqtSignal]
    mappedInt: typing.ClassVar[pyqtSignal]
    @typing.overload
    def mapping(self, id: int) -> QObject | None: ...
    @typing.overload
    def mapping(self, text: str | None) -> QObject | None: ...
    @typing.overload
    def mapping(self, object: QObject | None) -> QObject | None: ...
    def removeMappings(self, sender: QObject | None) -> None: ...
    @typing.overload
    def setMapping(self, sender: QObject | None, id: int) -> None: ...
    @typing.overload
    def setMapping(self, sender: QObject | None, text: str | None) -> None: ...
    @typing.overload
    def setMapping(
        self, sender: QObject | None, object: QObject | None
    ) -> None: ...

class QSize(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, w: int, h: int) -> None: ...
    @typing.overload
    def __init__(self, a0: QSize) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __add__(self, s2: QSize) -> QSize: ...
    def __sub__(self, s2: QSize) -> QSize: ...
    def __mul__(self, c: float) -> QSize: ...
    def __rmul__(self, c: float) -> QSize: ...
    def __truediv__(self, c: float) -> QSize: ...
    def toSizeF(self) -> QSizeF: ...
    def shrunkBy(self, m: QMargins) -> QSize: ...
    def grownBy(self, m: QMargins) -> QSize: ...
    def transposed(self) -> QSize: ...
    @typing.overload
    def scaled(self, s: QSize, mode: Qt.AspectRatioMode) -> QSize: ...
    @typing.overload
    def scaled(self, w: int, h: int, mode: Qt.AspectRatioMode) -> QSize: ...
    def boundedTo(self, otherSize: QSize) -> QSize: ...
    def expandedTo(self, otherSize: QSize) -> QSize: ...
    def __itruediv__(self, c: float) -> typing.Self: ...
    def __imul__(self, c: float) -> typing.Self: ...
    def __isub__(self, s: QSize) -> typing.Self: ...
    def __iadd__(self, s: QSize) -> typing.Self: ...
    def setHeight(self, h: int) -> None: ...
    def setWidth(self, w: int) -> None: ...
    def height(self) -> int: ...
    def width(self) -> int: ...
    def __hash__(self) -> int: ...
    def __bool__(self) -> int: ...
    def isValid(self) -> bool: ...
    def isEmpty(self) -> bool: ...
    def isNull(self) -> bool: ...
    @typing.overload
    def scale(self, s: QSize, mode: Qt.AspectRatioMode) -> None: ...
    @typing.overload
    def scale(self, w: int, h: int, mode: Qt.AspectRatioMode) -> None: ...
    def transpose(self) -> None: ...

class QSizeF(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, sz: QSize) -> None: ...
    @typing.overload
    def __init__(self, w: float, h: float) -> None: ...
    @typing.overload
    def __init__(self, a0: QSizeF) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __add__(self, s2: QSizeF) -> QSizeF: ...
    def __sub__(self, s2: QSizeF) -> QSizeF: ...
    def __mul__(self, c: float) -> QSizeF: ...
    def __rmul__(self, c: float) -> QSizeF: ...
    def __truediv__(self, c: float) -> QSizeF: ...
    def shrunkBy(self, m: QMarginsF) -> QSizeF: ...
    def grownBy(self, m: QMarginsF) -> QSizeF: ...
    def transposed(self) -> QSizeF: ...
    @typing.overload
    def scaled(self, s: QSizeF, mode: Qt.AspectRatioMode) -> QSizeF: ...
    @typing.overload
    def scaled(
        self, w: float, h: float, mode: Qt.AspectRatioMode
    ) -> QSizeF: ...
    def toSize(self) -> QSize: ...
    def boundedTo(self, otherSize: QSizeF) -> QSizeF: ...
    def expandedTo(self, otherSize: QSizeF) -> QSizeF: ...
    def __itruediv__(self, c: float) -> typing.Self: ...
    def __imul__(self, c: float) -> typing.Self: ...
    def __isub__(self, s: QSizeF) -> typing.Self: ...
    def __iadd__(self, s: QSizeF) -> typing.Self: ...
    def setHeight(self, h: float) -> None: ...
    def setWidth(self, w: float) -> None: ...
    def height(self) -> float: ...
    def width(self) -> float: ...
    def __bool__(self) -> int: ...
    def isValid(self) -> bool: ...
    def isEmpty(self) -> bool: ...
    def isNull(self) -> bool: ...
    @typing.overload
    def scale(self, s: QSizeF, mode: Qt.AspectRatioMode) -> None: ...
    @typing.overload
    def scale(self, w: float, h: float, mode: Qt.AspectRatioMode) -> None: ...
    def transpose(self) -> None: ...

class QSocketNotifier(QObject):
    class Type(enum.Enum):
        Read = ...
        Write = ...
        Exception = ...

    @typing.overload
    def __init__(
        self, a0: QSocketNotifier.Type, parent: QObject | None = ...
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        socket: PyQt6.sip.voidptr,
        a1: QSocketNotifier.Type,
        parent: QObject | None = ...,
    ) -> None: ...
    def event(self, a0: QEvent | None) -> bool: ...
    activated: typing.ClassVar[pyqtSignal]
    def isValid(self) -> bool: ...
    def setSocket(self, socket: PyQt6.sip.voidptr) -> None: ...
    def setEnabled(self, a0: bool) -> None: ...
    def isEnabled(self) -> bool: ...
    def type(self) -> QSocketNotifier.Type: ...
    def socket(self) -> PyQt6.sip.voidptr: ...

class QSortFilterProxyModel(QAbstractProxyModel):
    def __init__(self, parent: QObject | None = ...) -> None: ...

    autoAcceptChildRowsChanged: typing.ClassVar[pyqtSignal]
    def setAutoAcceptChildRows(self, accept: bool) -> None: ...
    def autoAcceptChildRows(self) -> bool: ...
    recursiveFilteringEnabledChanged: typing.ClassVar[pyqtSignal]
    filterRoleChanged: typing.ClassVar[pyqtSignal]
    sortRoleChanged: typing.ClassVar[pyqtSignal]
    sortLocaleAwareChanged: typing.ClassVar[pyqtSignal]
    sortCaseSensitivityChanged: typing.ClassVar[pyqtSignal]
    filterCaseSensitivityChanged: typing.ClassVar[pyqtSignal]
    dynamicSortFilterChanged: typing.ClassVar[pyqtSignal]
    def invalidateColumnsFilter(self) -> None: ...
    def invalidateRowsFilter(self) -> None: ...
    def invalidateFilter(self) -> None: ...
    def beginFilterChange(self) -> None: ...
    def setRecursiveFilteringEnabled(self, recursive: bool) -> None: ...
    def isRecursiveFilteringEnabled(self) -> bool: ...
    def sibling(
        self, row: int, column: int, idx: QModelIndex
    ) -> QModelIndex: ...
    def setSortLocaleAware(self, on: bool) -> None: ...
    def isSortLocaleAware(self) -> bool: ...
    def supportedDropActions(self) -> Qt.DropAction: ...
    def mimeTypes(self) -> list[str]: ...
    def setFilterRole(self, role: int) -> None: ...
    def filterRole(self) -> int: ...
    def sortOrder(self) -> Qt.SortOrder: ...
    def sortColumn(self) -> int: ...
    def setSortRole(self, role: int) -> None: ...
    def sortRole(self) -> int: ...
    def setDynamicSortFilter(self, enable: bool) -> None: ...
    def dynamicSortFilter(self) -> bool: ...
    def setSortCaseSensitivity(self, cs: Qt.CaseSensitivity) -> None: ...
    def sortCaseSensitivity(self) -> Qt.CaseSensitivity: ...
    def sort(self, column: int, order: Qt.SortOrder = ...) -> None: ...
    def match(
        self,
        start: QModelIndex,
        role: int,
        value: typing.Any,
        hits: int = ...,
        flags: Qt.MatchFlag = ...,
    ) -> list[QModelIndex]: ...
    def span(self, index: QModelIndex) -> QSize: ...
    def buddy(self, index: QModelIndex) -> QModelIndex: ...
    def flags(self, index: QModelIndex) -> Qt.ItemFlag: ...
    def canFetchMore(self, parent: QModelIndex) -> bool: ...
    def fetchMore(self, parent: QModelIndex) -> None: ...
    def removeColumns(
        self, column: int, count: int, parent: QModelIndex = ...
    ) -> bool: ...
    def removeRows(
        self, row: int, count: int, parent: QModelIndex = ...
    ) -> bool: ...
    def insertColumns(
        self, column: int, count: int, parent: QModelIndex = ...
    ) -> bool: ...
    def insertRows(
        self, row: int, count: int, parent: QModelIndex = ...
    ) -> bool: ...
    def dropMimeData(
        self,
        data: QMimeData | None,
        action: Qt.DropAction,
        row: int,
        column: int,
        parent: QModelIndex,
    ) -> bool: ...
    def mimeData(
        self, indexes: collections.abc.Iterable[QModelIndex]
    ) -> QMimeData | None: ...
    def setHeaderData(
        self,
        section: int,
        orientation: Qt.Orientation,
        value: typing.Any,
        role: int = ...,
    ) -> bool: ...
    def headerData(
        self, section: int, orientation: Qt.Orientation, role: int = ...
    ) -> typing.Any: ...
    def setData(
        self, index: QModelIndex, value: typing.Any, role: int = ...
    ) -> bool: ...
    def data(self, index: QModelIndex, role: int = ...) -> typing.Any: ...
    def hasChildren(self, parent: QModelIndex = ...) -> bool: ...
    def columnCount(self, parent: QModelIndex = ...) -> int: ...
    def rowCount(self, parent: QModelIndex = ...) -> int: ...
    @typing.overload
    def parent(self, child: QModelIndex) -> QModelIndex: ...
    @typing.overload
    def parent(self) -> QObject | None: ...
    def index(
        self, row: int, column: int, parent: QModelIndex = ...
    ) -> QModelIndex: ...
    def lessThan(self, left: QModelIndex, right: QModelIndex) -> bool: ...
    def filterAcceptsColumn(
        self, source_column: int, source_parent: QModelIndex
    ) -> bool: ...
    def filterAcceptsRow(
        self, source_row: int, source_parent: QModelIndex
    ) -> bool: ...
    def setFilterWildcard(self, pattern: str | None) -> None: ...
    @typing.overload
    def setFilterRegularExpression(
        self, regularExpression: QRegularExpression
    ) -> None: ...
    @typing.overload
    def setFilterRegularExpression(self, pattern: str | None) -> None: ...
    def setFilterFixedString(self, pattern: str | None) -> None: ...
    def invalidate(self) -> None: ...
    def setFilterCaseSensitivity(self, cs: Qt.CaseSensitivity) -> None: ...
    def filterCaseSensitivity(self) -> Qt.CaseSensitivity: ...
    def setFilterKeyColumn(self, column: int) -> None: ...
    def filterKeyColumn(self) -> int: ...
    def filterRegularExpression(self) -> QRegularExpression: ...
    def mapSelectionFromSource(
        self, sourceSelection: QItemSelection
    ) -> QItemSelection: ...
    def mapSelectionToSource(
        self, proxySelection: QItemSelection
    ) -> QItemSelection: ...
    def mapFromSource(self, sourceIndex: QModelIndex) -> QModelIndex: ...
    def mapToSource(self, proxyIndex: QModelIndex) -> QModelIndex: ...
    def setSourceModel(
        self, sourceModel: QAbstractItemModel | None
    ) -> None: ...

class QStandardPaths(PyQt6.sip.simplewrapper):
    class LocateOption(enum.Flag):
        LocateFile = ...
        LocateDirectory = ...

    class StandardLocation(enum.Enum):
        DesktopLocation = ...
        DocumentsLocation = ...
        FontsLocation = ...
        ApplicationsLocation = ...
        MusicLocation = ...
        MoviesLocation = ...
        PicturesLocation = ...
        TempLocation = ...
        HomeLocation = ...
        CacheLocation = ...
        GenericDataLocation = ...
        RuntimeLocation = ...
        ConfigLocation = ...
        DownloadLocation = ...
        GenericCacheLocation = ...
        GenericConfigLocation = ...
        AppDataLocation = ...
        AppLocalDataLocation = ...
        AppConfigLocation = ...
        PublicShareLocation = ...
        TemplatesLocation = ...
        StateLocation = ...
        GenericStateLocation = ...

    def __init__(self, a0: QStandardPaths) -> None: ...
    @staticmethod
    def setTestModeEnabled(testMode: bool) -> None: ...
    @staticmethod
    def findExecutable(
        executableName: str | None,
        paths: collections.abc.Iterable[str | None] = ...,
    ) -> str: ...
    @staticmethod
    def displayName(type: QStandardPaths.StandardLocation) -> str: ...
    @staticmethod
    def locateAll(
        type: QStandardPaths.StandardLocation,
        fileName: str | None,
        options: QStandardPaths.LocateOption = ...,
    ) -> list[str]: ...
    @staticmethod
    def locate(
        type: QStandardPaths.StandardLocation,
        fileName: str | None,
        options: QStandardPaths.LocateOption = ...,
    ) -> str: ...
    @staticmethod
    def standardLocations(
        type: QStandardPaths.StandardLocation,
    ) -> list[str]: ...
    @staticmethod
    def writableLocation(type: QStandardPaths.StandardLocation) -> str: ...

class QStorageInfo(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, path: str | None) -> None: ...
    @typing.overload
    def __init__(self, dir: QDir) -> None: ...
    @typing.overload
    def __init__(self, other: QStorageInfo) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def subvolume(self) -> QByteArray: ...
    def blockSize(self) -> int: ...
    def isRoot(self) -> bool: ...
    @staticmethod
    def root() -> QStorageInfo: ...
    @staticmethod
    def mountedVolumes() -> list[QStorageInfo]: ...
    def refresh(self) -> None: ...
    def isValid(self) -> bool: ...
    def isReady(self) -> bool: ...
    def isReadOnly(self) -> bool: ...
    def bytesAvailable(self) -> int: ...
    def bytesFree(self) -> int: ...
    def bytesTotal(self) -> int: ...
    def displayName(self) -> str: ...
    def name(self) -> str: ...
    def fileSystemType(self) -> QByteArray: ...
    def device(self) -> QByteArray: ...
    def rootPath(self) -> str: ...
    def setPath(self, path: str | None) -> None: ...
    def swap(self, other: QStorageInfo) -> None: ...

class QStringConverterBase(PyQt6.sip.simplewrapper):
    class Flag(enum.Flag):
        Default = ...
        Stateless = ...
        ConvertInvalidToNull = ...
        WriteBom = ...
        ConvertInitialBom = ...
        UsesIcu = ...

    def __init__(self) -> None: ...

class QStringConverter(QStringConverterBase):
    class Encoding(enum.Enum):
        Utf8 = ...
        Utf16 = ...
        Utf16LE = ...
        Utf16BE = ...
        Utf32 = ...
        Utf32LE = ...
        Utf32BE = ...
        Latin1 = ...
        System = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, encoding: QStringConverter.Encoding, f: QStringConverterBase.Flag
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        name: QByteArray | bytes | bytearray | memoryview | str | None,
        f: QStringConverterBase.Flag,
    ) -> None: ...
    @staticmethod
    def availableCodecs() -> list[str]: ...
    @staticmethod
    def nameForEncoding(e: QStringConverter.Encoding) -> str | None: ...
    def name(self) -> str | None: ...
    def hasError(self) -> bool: ...
    def resetState(self) -> None: ...
    def isValid(self) -> bool: ...

class QStringEncoder(QStringConverter):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self,
        encoding: QStringConverter.Encoding,
        flags: QStringConverterBase.Flag = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        name: QByteArray | bytes | bytearray | memoryview | str | None,
        flags: QStringConverterBase.Flag = ...,
    ) -> None: ...
    def encode(self, in_: str) -> QByteArray: ...
    def __call__(self, in_: str) -> QByteArray: ...

class QStringDecoder(QStringConverter):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self,
        encoding: QStringConverter.Encoding,
        flags: QStringConverterBase.Flag = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        name: QByteArray | bytes | bytearray | memoryview | str | None,
        flags: QStringConverterBase.Flag = ...,
    ) -> None: ...
    @staticmethod
    def decoderForHtml(
        data: QByteArray | bytes | bytearray | memoryview,
    ) -> QStringDecoder: ...
    def decode(
        self, ba: QByteArray | bytes | bytearray | memoryview
    ) -> str: ...
    def __call__(
        self, ba: QByteArray | bytes | bytearray | memoryview
    ) -> str: ...

class QStringListModel(QAbstractListModel):
    @typing.overload
    def __init__(self, parent: QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self,
        strings: collections.abc.Iterable[str | None],
        parent: QObject | None = ...,
    ) -> None: ...
    def clearItemData(self, index: QModelIndex) -> bool: ...
    def setItemData(
        self, index: QModelIndex, roles: dict[int, typing.Any]
    ) -> bool: ...
    def itemData(self, index: QModelIndex) -> dict[int, typing.Any]: ...
    def moveRows(
        self,
        sourceParent: QModelIndex,
        sourceRow: int,
        count: int,
        destinationParent: QModelIndex,
        destinationChild: int,
    ) -> bool: ...
    def sibling(
        self, row: int, column: int, idx: QModelIndex
    ) -> QModelIndex: ...
    def supportedDropActions(self) -> Qt.DropAction: ...
    def sort(self, column: int, order: Qt.SortOrder = ...) -> None: ...
    def setStringList(
        self, strings: collections.abc.Iterable[str | None]
    ) -> None: ...
    def stringList(self) -> list[str]: ...
    def removeRows(
        self, row: int, count: int, parent: QModelIndex = ...
    ) -> bool: ...
    def insertRows(
        self, row: int, count: int, parent: QModelIndex = ...
    ) -> bool: ...
    def flags(self, index: QModelIndex) -> Qt.ItemFlag: ...
    def setData(
        self, index: QModelIndex, value: typing.Any, role: int = ...
    ) -> bool: ...
    def data(self, index: QModelIndex, role: int = ...) -> typing.Any: ...
    def rowCount(self, parent: QModelIndex = ...) -> int: ...

class QSysInfo(PyQt6.sip.simplewrapper):
    class Endian(enum.Enum):
        BigEndian = ...
        LittleEndian = ...
        ByteOrder = ...

    class Sizes(enum.Enum):
        WordSize = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QSysInfo) -> None: ...
    @staticmethod
    def bootUniqueId() -> QByteArray: ...
    @staticmethod
    def machineUniqueId() -> QByteArray: ...
    @staticmethod
    def machineHostName() -> str: ...
    @staticmethod
    def prettyProductName() -> str: ...
    @staticmethod
    def productVersion() -> str: ...
    @staticmethod
    def productType() -> str: ...
    @staticmethod
    def kernelVersion() -> str: ...
    @staticmethod
    def kernelType() -> str: ...
    @staticmethod
    def buildAbi() -> str: ...
    @staticmethod
    def currentCpuArchitecture() -> str: ...
    @staticmethod
    def buildCpuArchitecture() -> str: ...

class QSystemSemaphore(PyQt6.sip.simplewrapper):
    class SystemSemaphoreError(enum.Enum):
        NoError = ...
        PermissionDenied = ...
        KeyError = ...
        AlreadyExists = ...
        NotFound = ...
        OutOfResources = ...
        UnknownError = ...

    class AccessMode(enum.Enum):
        Open = ...
        Create = ...

    @typing.overload
    def __init__(
        self,
        key: QNativeIpcKey,
        initialValue: int = ...,
        mode: QSystemSemaphore.AccessMode = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        key: str | None,
        initialValue: int = ...,
        mode: QSystemSemaphore.AccessMode = ...,
    ) -> None: ...
    @staticmethod
    def legacyNativeKey(
        key: str | None, type: QNativeIpcKey.Type = ...
    ) -> QNativeIpcKey: ...
    @staticmethod
    def platformSafeKey(
        key: str | None, type: QNativeIpcKey.Type = ...
    ) -> QNativeIpcKey: ...
    @staticmethod
    def isKeyTypeSupported(type: QNativeIpcKey.Type) -> bool: ...
    def nativeIpcKey(self) -> QNativeIpcKey: ...
    @typing.overload
    def setNativeKey(
        self,
        key: QNativeIpcKey,
        initialValue: int = ...,
        mode: QSystemSemaphore.AccessMode = ...,
    ) -> None: ...
    @typing.overload
    def setNativeKey(
        self,
        key: str | None,
        initialValue: int = ...,
        mode: QSystemSemaphore.AccessMode = ...,
        type: QNativeIpcKey.Type = ...,
    ) -> None: ...
    def errorString(self) -> str: ...
    def error(self) -> QSystemSemaphore.SystemSemaphoreError: ...
    def release(self, n: int = ...) -> bool: ...
    def acquire(self) -> bool: ...
    def key(self) -> str: ...
    def setKey(
        self,
        key: str | None,
        initialValue: int = ...,
        mode: QSystemSemaphore.AccessMode = ...,
    ) -> None: ...

class QTemporaryDir(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, templateName: str | None) -> None: ...
    def swap(self, other: QTemporaryDir) -> None: ...
    def filePath(self, fileName: str | None) -> str: ...
    def errorString(self) -> str: ...
    def path(self) -> str: ...
    def remove(self) -> bool: ...
    def setAutoRemove(self, b: bool) -> None: ...
    def autoRemove(self) -> bool: ...
    def isValid(self) -> bool: ...

class QTemporaryFile(QFile):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, templateName: str | None) -> None: ...
    @typing.overload
    def __init__(self, parent: QObject | None) -> None: ...
    @typing.overload
    def __init__(
        self, templateName: str | None, parent: QObject | None
    ) -> None: ...
    def rename(self, newName: str | None) -> bool: ...
    @typing.overload
    @staticmethod
    def createNativeFile(fileName: str | None) -> QTemporaryFile | None: ...
    @typing.overload
    @staticmethod
    def createNativeFile(file: QFile) -> QTemporaryFile | None: ...
    def setFileTemplate(self, name: str | None) -> None: ...
    def fileTemplate(self) -> str: ...
    def fileName(self) -> str: ...
    @typing.overload
    def open(self) -> bool: ...
    @typing.overload
    def open(self, flags: QIODeviceBase.OpenModeFlag) -> bool: ...
    def setAutoRemove(self, b: bool) -> None: ...
    def autoRemove(self) -> bool: ...

class QTextBoundaryFinder(PyQt6.sip.simplewrapper):
    class BoundaryType(enum.Enum):
        Grapheme = ...
        Word = ...
        Line = ...
        Sentence = ...

    class BoundaryReason(enum.Flag):
        NotAtBoundary = ...
        SoftHyphen = ...
        BreakOpportunity = ...
        StartOfItem = ...
        EndOfItem = ...
        MandatoryBreak = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QTextBoundaryFinder) -> None: ...
    @typing.overload
    def __init__(
        self, type: QTextBoundaryFinder.BoundaryType, string: str | None
    ) -> None: ...
    def boundaryReasons(self) -> QTextBoundaryFinder.BoundaryReason: ...
    def isAtBoundary(self) -> bool: ...
    def toPreviousBoundary(self) -> int: ...
    def toNextBoundary(self) -> int: ...
    def setPosition(self, position: int) -> None: ...
    def position(self) -> int: ...
    def toEnd(self) -> None: ...
    def toStart(self) -> None: ...
    def string(self) -> str: ...
    def type(self) -> QTextBoundaryFinder.BoundaryType: ...
    def isValid(self) -> bool: ...

class QTextStream(QIODeviceBase):
    class NumberFlag(enum.Flag):
        ShowBase = ...
        ForcePoint = ...
        ForceSign = ...
        UppercaseBase = ...
        UppercaseDigits = ...

    class Status(enum.Enum):
        Ok = ...
        ReadPastEnd = ...
        ReadCorruptData = ...
        WriteFailed = ...

    class FieldAlignment(enum.Enum):
        AlignLeft = ...
        AlignRight = ...
        AlignCenter = ...
        AlignAccountingStyle = ...

    class RealNumberNotation(enum.Enum):
        SmartNotation = ...
        FixedNotation = ...
        ScientificNotation = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, device: QIODevice | None) -> None: ...
    @typing.overload
    def __init__(
        self, array: QByteArray | None, mode: QIODeviceBase.OpenModeFlag = ...
    ) -> None: ...
    @typing.overload
    def __lshift__(self, s: str) -> QTextStream: ...
    @typing.overload
    def __lshift__(
        self, array: QByteArray | bytes | bytearray | memoryview
    ) -> QTextStream: ...
    @typing.overload
    def __lshift__(self, f: float) -> QTextStream: ...
    @typing.overload
    def __lshift__(self, i: int) -> QTextStream: ...
    @typing.overload
    def __lshift__(self, m: QTextStreamManipulator) -> QTextStream: ...
    def __rshift__(self, array: QByteArray) -> QTextStream: ...
    def realNumberPrecision(self) -> int: ...
    def setRealNumberPrecision(self, precision: int) -> None: ...
    def realNumberNotation(self) -> QTextStream.RealNumberNotation: ...
    def setRealNumberNotation(
        self, notation: QTextStream.RealNumberNotation
    ) -> None: ...
    def integerBase(self) -> int: ...
    def setIntegerBase(self, base: int) -> None: ...
    def numberFlags(self) -> QTextStream.NumberFlag: ...
    def setNumberFlags(self, flags: QTextStream.NumberFlag) -> None: ...
    def fieldWidth(self) -> int: ...
    def setFieldWidth(self, width: int) -> None: ...
    def padChar(self) -> str: ...
    def setPadChar(self, ch: str) -> None: ...
    def fieldAlignment(self) -> QTextStream.FieldAlignment: ...
    def setFieldAlignment(
        self, alignment: QTextStream.FieldAlignment
    ) -> None: ...
    def read(self, maxlen: int) -> str: ...
    def readAll(self) -> str: ...
    def readLine(self, maxLength: int = ...) -> str: ...
    def skipWhiteSpace(self) -> None: ...
    def pos(self) -> int: ...
    def seek(self, pos: int) -> bool: ...
    def flush(self) -> None: ...
    def reset(self) -> None: ...
    def atEnd(self) -> bool: ...
    def resetStatus(self) -> None: ...
    def setStatus(self, status: QTextStream.Status) -> None: ...
    def status(self) -> QTextStream.Status: ...
    def device(self) -> QIODevice | None: ...
    def setDevice(self, device: QIODevice | None) -> None: ...
    def locale(self) -> QLocale: ...
    def setLocale(self, locale: QLocale) -> None: ...
    def generateByteOrderMark(self) -> bool: ...
    def setGenerateByteOrderMark(self, generate: bool) -> None: ...
    def autoDetectUnicode(self) -> bool: ...
    def setAutoDetectUnicode(self, enabled: bool) -> None: ...
    def encoding(self) -> QStringConverter.Encoding: ...
    def setEncoding(self, encoding: QStringConverter.Encoding) -> None: ...

class QTextStreamManipulator(PyQt6.sip.simplewrapper): ...

class QThread(QObject):
    class QualityOfService(enum.Enum):
        Auto = ...
        High = ...
        Eco = ...

    class Priority(enum.Enum):
        IdlePriority = ...
        LowestPriority = ...
        LowPriority = ...
        NormalPriority = ...
        HighPriority = ...
        HighestPriority = ...
        TimeCriticalPriority = ...
        InheritPriority = ...

    def __init__(self, parent: QObject | None = ...) -> None: ...
    def serviceLevel(self) -> QThread.QualityOfService: ...
    def setServiceLevel(
        self, serviceLevel: QThread.QualityOfService
    ) -> None: ...
    def isCurrentThread(self) -> bool: ...
    @staticmethod
    def isMainThread() -> bool: ...
    def loopLevel(self) -> int: ...
    def isInterruptionRequested(self) -> bool: ...
    def requestInterruption(self) -> None: ...
    def setEventDispatcher(
        self, eventDispatcher: QAbstractEventDispatcher | None
    ) -> None: ...
    def eventDispatcher(self) -> QAbstractEventDispatcher | None: ...
    @staticmethod
    def usleep(a0: int) -> None: ...
    @staticmethod
    def msleep(a0: int) -> None: ...
    @staticmethod
    def sleep(a0: int) -> None: ...
    def event(self, event: QEvent | None) -> bool: ...
    @staticmethod
    def setTerminationEnabled(enabled: bool = ...) -> None: ...
    def exec(self) -> int: ...
    def run(self) -> None: ...
    finished: typing.ClassVar[pyqtSignal]
    started: typing.ClassVar[pyqtSignal]
    @typing.overload
    def wait(self, deadline: QDeadlineTimer = ...) -> bool: ...
    @typing.overload
    def wait(self, time: int) -> bool: ...
    def quit(self) -> None: ...
    def terminate(self) -> None: ...
    def start(self, priority: QThread.Priority = ...) -> None: ...
    def exit(self, returnCode: int = ...) -> None: ...
    def stackSize(self) -> int: ...
    def setStackSize(self, stackSize: int) -> None: ...
    def priority(self) -> QThread.Priority: ...
    def setPriority(self, priority: QThread.Priority) -> None: ...
    def isRunning(self) -> bool: ...
    def isFinished(self) -> bool: ...
    @staticmethod
    def yieldCurrentThread() -> None: ...
    @staticmethod
    def idealThreadCount() -> int: ...
    @staticmethod
    def currentThreadId() -> PyQt6.sip.voidptr | None: ...
    @staticmethod
    def currentThread() -> QThread | None: ...

class QThreadPool(QObject):
    def __init__(self, parent: QObject | None = ...) -> None: ...
    def serviceLevel(self) -> QThread.QualityOfService: ...
    def setServiceLevel(
        self, serviceLevel: QThread.QualityOfService
    ) -> None: ...
    @typing.overload
    def startOnReservedThread(self, runnable: QRunnable | None) -> None: ...
    @typing.overload
    def startOnReservedThread(
        self, functionToRun: collections.abc.Callable[[], None]
    ) -> None: ...
    def threadPriority(self) -> QThread.Priority: ...
    def setThreadPriority(self, priority: QThread.Priority) -> None: ...
    def contains(self, thread: QThread | None) -> bool: ...
    def stackSize(self) -> int: ...
    def setStackSize(self, stackSize: int) -> None: ...
    def clear(self) -> None: ...
    @typing.overload
    def waitForDone(self, deadline: QDeadlineTimer) -> bool: ...
    @typing.overload
    def waitForDone(self, msecs: int = ...) -> bool: ...
    def releaseThread(self) -> None: ...
    def reserveThread(self) -> None: ...
    def activeThreadCount(self) -> int: ...
    def setMaxThreadCount(self, maxThreadCount: int) -> None: ...
    def maxThreadCount(self) -> int: ...
    def setExpiryTimeout(self, expiryTimeout: int) -> None: ...
    def expiryTimeout(self) -> int: ...
    def tryTake(self, runnable: QRunnable | None) -> bool: ...
    @typing.overload
    def tryStart(self, runnable: QRunnable | None) -> bool: ...
    @typing.overload
    def tryStart(
        self, functionToRun: collections.abc.Callable[[], None]
    ) -> bool: ...
    @typing.overload
    def start(
        self, runnable: QRunnable | None, priority: int = ...
    ) -> None: ...
    @typing.overload
    def start(
        self,
        functionToRun: collections.abc.Callable[[], None],
        priority: int = ...,
    ) -> None: ...
    @staticmethod
    def globalInstance() -> QThreadPool | None: ...

class QTimeLine(QObject):
    class State(enum.Enum):
        NotRunning = ...
        Paused = ...
        Running = ...

    class Direction(enum.Enum):
        Forward = ...
        Backward = ...

    def __init__(
        self, duration: int = ..., parent: QObject | None = ...
    ) -> None: ...
    def setEasingCurve(
        self, curve: QEasingCurve | QEasingCurve.Type
    ) -> None: ...
    def easingCurve(self) -> QEasingCurve: ...
    def timerEvent(self, event: QTimerEvent | None) -> None: ...
    valueChanged: typing.ClassVar[pyqtSignal]
    stateChanged: typing.ClassVar[pyqtSignal]
    frameChanged: typing.ClassVar[pyqtSignal]
    finished: typing.ClassVar[pyqtSignal]
    def toggleDirection(self) -> None: ...
    def stop(self) -> None: ...
    def start(self) -> None: ...
    def setPaused(self, paused: bool) -> None: ...
    def setCurrentTime(self, msec: int) -> None: ...
    def resume(self) -> None: ...
    def valueForTime(self, msec: int) -> float: ...
    def frameForTime(self, msec: int) -> int: ...
    def currentValue(self) -> float: ...
    def currentFrame(self) -> int: ...
    def currentTime(self) -> int: ...
    def setUpdateInterval(self, interval: int) -> None: ...
    def updateInterval(self) -> int: ...
    def setFrameRange(self, startFrame: int, endFrame: int) -> None: ...
    def setEndFrame(self, frame: int) -> None: ...
    def endFrame(self) -> int: ...
    def setStartFrame(self, frame: int) -> None: ...
    def startFrame(self) -> int: ...
    def setDuration(self, duration: int) -> None: ...
    def duration(self) -> int: ...
    def setDirection(self, direction: QTimeLine.Direction) -> None: ...
    def direction(self) -> QTimeLine.Direction: ...
    def setLoopCount(self, count: int) -> None: ...
    def loopCount(self) -> int: ...
    def state(self) -> QTimeLine.State: ...

class QTimer(QObject):
    def __init__(self, parent: QObject | None = ...) -> None: ...
    def id(self) -> int: ...
    def remainingTime(self) -> int: ...
    def timerType(self) -> Qt.TimerType: ...
    def setTimerType(self, atype: Qt.TimerType) -> None: ...
    def timerEvent(self, a0: QTimerEvent | None) -> None: ...
    timeout: typing.ClassVar[pyqtSignal]
    def stop(self) -> None: ...
    @typing.overload
    def start(self, msec: int) -> None: ...
    @typing.overload
    def start(self) -> None: ...
    @typing.overload
    @staticmethod
    def singleShot(msec: int, slot: PYQT_SLOT) -> None: ...
    @typing.overload
    @staticmethod
    def singleShot(
        msec: int, timerType: Qt.TimerType, slot: PYQT_SLOT
    ) -> None: ...
    def setSingleShot(self, asingleShot: bool) -> None: ...
    def isSingleShot(self) -> bool: ...
    def interval(self) -> int: ...
    def setInterval(self, msec: int) -> None: ...
    def timerId(self) -> int: ...
    def isActive(self) -> bool: ...

class QTimeZone(PyQt6.sip.simplewrapper):
    class Initialization(enum.Enum):
        LocalTime = ...
        UTC = ...

    class NameType(enum.Enum):
        DefaultName = ...
        LongName = ...
        ShortName = ...
        OffsetName = ...

    class TimeType(enum.Enum):
        StandardTime = ...
        DaylightTime = ...
        GenericTime = ...

    class OffsetData(PyQt6.sip.simplewrapper):
        abbreviation: str | None = ...
        atUtc: QDateTime | datetime.datetime = ...
        daylightTimeOffset: int = ...
        offsetFromUtc: int = ...
        standardTimeOffset: int = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: QTimeZone.OffsetData) -> None: ...

    MaxUtcOffsetSecs: int = ...
    MinUtcOffsetSecs: int = ...

    @typing.overload
    def __init__(self, spec: QTimeZone.Initialization) -> None: ...
    @typing.overload
    def __init__(
        self,
        zoneId: QByteArray | bytes | bytearray | memoryview,
        offsetSeconds: int,
        name: str | None,
        abbreviation: str | None,
        territory: QLocale.Country = ...,
        comment: str | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self, ianaId: QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    @typing.overload
    def __init__(self, offsetSeconds: int) -> None: ...
    @typing.overload
    def __init__(self, other: QTimeZone) -> None: ...
    @typing.overload
    def __init__(self) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def hasAlternativeName(
        self, alias: QByteArray | bytes | bytearray | memoryview
    ) -> bool: ...
    def asBackendZone(self) -> QTimeZone: ...
    @typing.overload
    def isUtcOrFixedOffset(self) -> bool: ...
    @typing.overload
    @staticmethod
    def isUtcOrFixedOffset(spec: Qt.TimeSpec) -> bool: ...
    def fixedSecondsAheadOfUtc(self) -> int: ...
    def timeSpec(self) -> Qt.TimeSpec: ...
    @staticmethod
    def fromSecondsAheadOfUtc(offset: int) -> QTimeZone: ...
    @staticmethod
    def utc() -> QTimeZone: ...
    @staticmethod
    def systemTimeZone() -> QTimeZone: ...
    @typing.overload
    @staticmethod
    def windowsIdToIanaIds(
        windowsId: QByteArray | bytes | bytearray | memoryview,
    ) -> list[QByteArray]: ...
    @typing.overload
    @staticmethod
    def windowsIdToIanaIds(
        windowsId: QByteArray | bytes | bytearray | memoryview,
        territory: QLocale.Country,
    ) -> list[QByteArray]: ...
    @typing.overload
    @staticmethod
    def windowsIdToDefaultIanaId(
        windowsId: QByteArray | bytes | bytearray | memoryview,
    ) -> QByteArray: ...
    @typing.overload
    @staticmethod
    def windowsIdToDefaultIanaId(
        windowsId: QByteArray | bytes | bytearray | memoryview,
        territory: QLocale.Country,
    ) -> QByteArray: ...
    @staticmethod
    def ianaIdToWindowsId(
        ianaId: QByteArray | bytes | bytearray | memoryview,
    ) -> QByteArray: ...
    @typing.overload
    @staticmethod
    def availableTimeZoneIds(
        territory: QLocale.Country,
    ) -> list[QByteArray]: ...
    @typing.overload
    @staticmethod
    def availableTimeZoneIds(offsetSeconds: int) -> list[QByteArray]: ...
    @typing.overload
    @staticmethod
    def availableTimeZoneIds() -> list[QByteArray]: ...
    @staticmethod
    def isTimeZoneIdAvailable(
        ianaId: QByteArray | bytes | bytearray | memoryview,
    ) -> bool: ...
    @staticmethod
    def systemTimeZoneId() -> QByteArray: ...
    def transitions(
        self,
        fromDateTime: QDateTime | datetime.datetime,
        toDateTime: QDateTime | datetime.datetime,
    ) -> list[QTimeZone.OffsetData]: ...
    def previousTransition(
        self, beforeDateTime: QDateTime | datetime.datetime
    ) -> QTimeZone.OffsetData: ...
    def nextTransition(
        self, afterDateTime: QDateTime | datetime.datetime
    ) -> QTimeZone.OffsetData: ...
    def hasTransitions(self) -> bool: ...
    def offsetData(
        self, forDateTime: QDateTime | datetime.datetime
    ) -> QTimeZone.OffsetData: ...
    def isDaylightTime(
        self, atDateTime: QDateTime | datetime.datetime
    ) -> bool: ...
    def hasDaylightTime(self) -> bool: ...
    def daylightTimeOffset(
        self, atDateTime: QDateTime | datetime.datetime
    ) -> int: ...
    def standardTimeOffset(
        self, atDateTime: QDateTime | datetime.datetime
    ) -> int: ...
    def offsetFromUtc(
        self, atDateTime: QDateTime | datetime.datetime
    ) -> int: ...
    def abbreviation(
        self, atDateTime: QDateTime | datetime.datetime
    ) -> str: ...
    @typing.overload
    def displayName(
        self,
        atDateTime: QDateTime | datetime.datetime,
        nameType: QTimeZone.NameType = ...,
        locale: QLocale = ...,
    ) -> str: ...
    @typing.overload
    def displayName(
        self,
        timeType: QTimeZone.TimeType,
        nameType: QTimeZone.NameType = ...,
        locale: QLocale = ...,
    ) -> str: ...
    def comment(self) -> str: ...
    def territory(self) -> QLocale.Country: ...
    def country(self) -> QLocale.Country: ...
    def id(self) -> QByteArray: ...
    def isValid(self) -> bool: ...
    def swap(self, other: QTimeZone) -> None: ...

class QNativeIpcKey(PyQt6.sip.simplewrapper):
    class Type(enum.Enum):
        SystemV = ...
        PosixRealtime = ...
        Windows = ...

    DefaultTypeForOs: QNativeIpcKey.Type = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, type: QNativeIpcKey.Type) -> None: ...
    @typing.overload
    def __init__(
        self, k: str | None, type: QNativeIpcKey.Type = ...
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QNativeIpcKey) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    @staticmethod
    def fromString(string: str | None) -> QNativeIpcKey: ...
    def toString(self) -> str: ...
    def setNativeKey(self, newKey: str | None) -> None: ...
    def nativeKey(self) -> str: ...
    def setType(self, type: QNativeIpcKey.Type) -> None: ...
    def type(self) -> QNativeIpcKey.Type: ...
    def isValid(self) -> bool: ...
    def isEmpty(self) -> bool: ...
    def swap(self, other: QNativeIpcKey) -> None: ...
    @staticmethod
    def legacyDefaultTypeForOs() -> QNativeIpcKey.Type: ...

class QTranslator(QObject):
    def __init__(self, parent: QObject | None = ...) -> None: ...
    def filePath(self) -> str: ...
    def language(self) -> str: ...
    def loadFromData(
        self, data: PyQt6.sip.array[bytes] | None, directory: str | None = ...
    ) -> bool: ...
    @typing.overload
    def load(
        self,
        fileName: str | None,
        directory: str | None = ...,
        searchDelimiters: str | None = ...,
        suffix: str | None = ...,
    ) -> bool: ...
    @typing.overload
    def load(
        self,
        locale: QLocale,
        fileName: str | None,
        prefix: str | None = ...,
        directory: str | None = ...,
        suffix: str | None = ...,
    ) -> bool: ...
    def isEmpty(self) -> bool: ...
    def translate(
        self,
        context: str | None,
        sourceText: str | None,
        disambiguation: str | None = ...,
        n: int = ...,
    ) -> str: ...

class QTransposeProxyModel(QAbstractProxyModel):
    def __init__(self, parent: QObject | None = ...) -> None: ...
    def sort(self, column: int, order: Qt.SortOrder = ...) -> None: ...
    def moveColumns(
        self,
        sourceParent: QModelIndex,
        sourceColumn: int,
        count: int,
        destinationParent: QModelIndex,
        destinationChild: int,
    ) -> bool: ...
    def removeColumns(
        self, column: int, count: int, parent: QModelIndex = ...
    ) -> bool: ...
    def insertColumns(
        self, column: int, count: int, parent: QModelIndex = ...
    ) -> bool: ...
    def moveRows(
        self,
        sourceParent: QModelIndex,
        sourceRow: int,
        count: int,
        destinationParent: QModelIndex,
        destinationChild: int,
    ) -> bool: ...
    def removeRows(
        self, row: int, count: int, parent: QModelIndex = ...
    ) -> bool: ...
    def insertRows(
        self, row: int, count: int, parent: QModelIndex = ...
    ) -> bool: ...
    def index(
        self, row: int, column: int, parent: QModelIndex = ...
    ) -> QModelIndex: ...
    def parent(self, index: QModelIndex) -> QModelIndex: ...
    def mapToSource(self, proxyIndex: QModelIndex) -> QModelIndex: ...
    def mapFromSource(self, sourceIndex: QModelIndex) -> QModelIndex: ...
    def itemData(self, index: QModelIndex) -> dict[int, typing.Any]: ...
    def span(self, index: QModelIndex) -> QSize: ...
    def setItemData(
        self, index: QModelIndex, roles: dict[int, typing.Any]
    ) -> bool: ...
    def setHeaderData(
        self,
        section: int,
        orientation: Qt.Orientation,
        value: typing.Any,
        role: int = ...,
    ) -> bool: ...
    def headerData(
        self, section: int, orientation: Qt.Orientation, role: int = ...
    ) -> typing.Any: ...
    def columnCount(self, parent: QModelIndex = ...) -> int: ...
    def rowCount(self, parent: QModelIndex = ...) -> int: ...
    def setSourceModel(
        self, newSourceModel: QAbstractItemModel | None
    ) -> None: ...

class QTypeRevision(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QTypeRevision) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __ge__(self, rhs: QTypeRevision) -> bool: ...
    def __le__(self, rhs: QTypeRevision) -> bool: ...
    def __gt__(self, rhs: QTypeRevision) -> bool: ...
    def __lt__(self, rhs: QTypeRevision) -> bool: ...
    @staticmethod
    def zero() -> QTypeRevision: ...
    @staticmethod
    def fromEncodedVersion(value: int) -> QTypeRevision: ...
    def __hash__(self) -> int: ...
    def toEncodedVersion(self) -> int: ...
    def isValid(self) -> bool: ...
    def minorVersion(self) -> int: ...
    def hasMinorVersion(self) -> bool: ...
    def majorVersion(self) -> int: ...
    def hasMajorVersion(self) -> bool: ...

class QUrl(PyQt6.sip.simplewrapper):
    class AceProcessingOption(enum.Flag):
        IgnoreIDNWhitelist = ...
        AceTransitionalProcessing = ...

    class UserInputResolutionOption(enum.Flag):
        DefaultResolution = ...
        AssumeLocalFile = ...

    class ComponentFormattingOption(enum.IntFlag):
        PrettyDecoded = ...
        EncodeSpaces = ...
        EncodeUnicode = ...
        EncodeDelimiters = ...
        EncodeReserved = ...
        DecodeReserved = ...
        FullyEncoded = ...
        FullyDecoded = ...

    class UrlFormattingOption(enum.IntFlag):
        None_ = ...
        RemoveScheme = ...
        RemovePassword = ...
        RemoveUserInfo = ...
        RemovePort = ...
        RemoveAuthority = ...
        RemovePath = ...
        RemoveQuery = ...
        RemoveFragment = ...
        PreferLocalFile = ...
        StripTrailingSlash = ...
        RemoveFilename = ...
        NormalizePathSegments = ...

    class ParsingMode(enum.Enum):
        TolerantMode = ...
        StrictMode = ...
        DecodedMode = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, url: str | None, mode: QUrl.ParsingMode = ...
    ) -> None: ...
    @typing.overload
    def __init__(self, copy: QUrl) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __ge__(self, rhs: QUrl) -> bool: ...
    def __le__(self, rhs: QUrl) -> bool: ...
    def __gt__(self, rhs: QUrl) -> bool: ...
    def __lt__(self, rhs: QUrl) -> bool: ...
    def matches(
        self, url: QUrl, options: QUrl.UrlFormattingOption
    ) -> bool: ...
    def fileName(
        self, options: QUrl.ComponentFormattingOption = ...
    ) -> str: ...
    def adjusted(self, options: QUrl.UrlFormattingOption) -> QUrl: ...
    @staticmethod
    def fromStringList(
        uris: collections.abc.Iterable[str | None],
        mode: QUrl.ParsingMode = ...,
    ) -> list[QUrl]: ...
    @staticmethod
    def toStringList(
        uris: collections.abc.Iterable[QUrl],
        options: QUrl.UrlFormattingOption = ...,
    ) -> list[str]: ...
    def query(self, options: QUrl.ComponentFormattingOption = ...) -> str: ...
    @typing.overload
    def setQuery(
        self, query: str | None, mode: QUrl.ParsingMode = ...
    ) -> None: ...
    @typing.overload
    def setQuery(self, query: QUrlQuery) -> None: ...
    @typing.overload
    def toDisplayString(
        self, options: QUrl.UrlFormattingOption = ...
    ) -> str: ...
    @typing.overload
    def toDisplayString(
        self, options: QUrl.ComponentFormattingOption
    ) -> str: ...
    def isLocalFile(self) -> bool: ...
    def swap(self, other: QUrl) -> None: ...
    @staticmethod
    def fromUserInput(
        userInput: str | None,
        workingDirectory: str | None = ...,
        options: QUrl.UserInputResolutionOption = ...,
    ) -> QUrl: ...
    @staticmethod
    def setIdnWhitelist(a0: collections.abc.Iterable[str | None]) -> None: ...
    @staticmethod
    def idnWhitelist() -> list[str]: ...
    @staticmethod
    def toAce(
        domain: str | None, options: QUrl.AceProcessingOption = ...
    ) -> QByteArray: ...
    @staticmethod
    def fromAce(
        domain: QByteArray | bytes | bytearray | memoryview,
        options: QUrl.AceProcessingOption = ...,
    ) -> str: ...
    def errorString(self) -> str: ...
    def hasFragment(self) -> bool: ...
    def hasQuery(self) -> bool: ...
    @staticmethod
    def toPercentEncoding(
        input: str | None,
        exclude: QByteArray | bytes | bytearray | memoryview = ...,
        include: QByteArray | bytes | bytearray | memoryview = ...,
    ) -> QByteArray: ...
    @staticmethod
    def fromPercentEncoding(
        a0: QByteArray | bytes | bytearray | memoryview,
    ) -> str: ...
    def isDetached(self) -> bool: ...
    def detach(self) -> None: ...
    @staticmethod
    def fromEncoded(
        input: QByteArray | bytes | bytearray | memoryview,
        mode: QUrl.ParsingMode = ...,
    ) -> QUrl: ...
    @typing.overload
    def toEncoded(
        self, options: QUrl.UrlFormattingOption = ...
    ) -> QByteArray: ...
    @typing.overload
    def toEncoded(
        self, options: QUrl.ComponentFormattingOption
    ) -> QByteArray: ...
    @typing.overload
    def toString(self, options: QUrl.UrlFormattingOption = ...) -> str: ...
    @typing.overload
    def toString(self, options: QUrl.ComponentFormattingOption) -> str: ...
    def toLocalFile(self) -> str: ...
    @staticmethod
    def fromLocalFile(localfile: str | None) -> QUrl: ...
    def isParentOf(self, url: QUrl) -> bool: ...
    def isRelative(self) -> bool: ...
    def resolved(self, relative: QUrl) -> QUrl: ...
    def fragment(
        self, options: QUrl.ComponentFormattingOption = ...
    ) -> str: ...
    def setFragment(
        self, fragment: str | None, mode: QUrl.ParsingMode = ...
    ) -> None: ...
    def path(self, options: QUrl.ComponentFormattingOption = ...) -> str: ...
    def setPath(
        self, path: str | None, mode: QUrl.ParsingMode = ...
    ) -> None: ...
    def port(self, defaultPort: int = ...) -> int: ...
    def setPort(self, port: int) -> None: ...
    def host(self, a0: QUrl.ComponentFormattingOption = ...) -> str: ...
    def setHost(
        self, host: str | None, mode: QUrl.ParsingMode = ...
    ) -> None: ...
    def password(
        self, options: QUrl.ComponentFormattingOption = ...
    ) -> str: ...
    def setPassword(
        self, password: str | None, mode: QUrl.ParsingMode = ...
    ) -> None: ...
    def userName(
        self, options: QUrl.ComponentFormattingOption = ...
    ) -> str: ...
    def setUserName(
        self, userName: str | None, mode: QUrl.ParsingMode = ...
    ) -> None: ...
    def userInfo(
        self, options: QUrl.ComponentFormattingOption = ...
    ) -> str: ...
    def setUserInfo(
        self, userInfo: str | None, mode: QUrl.ParsingMode = ...
    ) -> None: ...
    def authority(
        self, options: QUrl.ComponentFormattingOption = ...
    ) -> str: ...
    def setAuthority(
        self, authority: str | None, mode: QUrl.ParsingMode = ...
    ) -> None: ...
    def scheme(self) -> str: ...
    def setScheme(self, scheme: str | None) -> None: ...
    def clear(self) -> None: ...
    def isEmpty(self) -> bool: ...
    def isValid(self) -> bool: ...
    def setUrl(
        self, url: str | None, mode: QUrl.ParsingMode = ...
    ) -> None: ...
    def url(self, options: QUrl.UrlFormattingOption = ...) -> str: ...
    def __hash__(self) -> int: ...

class QUrlQuery(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, url: QUrl) -> None: ...
    @typing.overload
    def __init__(self, queryString: str | None) -> None: ...
    @typing.overload
    def __init__(self, other: QUrlQuery) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    @staticmethod
    def defaultQueryPairDelimiter() -> str: ...
    @staticmethod
    def defaultQueryValueDelimiter() -> str: ...
    def removeAllQueryItems(self, key: str | None) -> None: ...
    def allQueryItemValues(
        self, key: str | None, options: QUrl.ComponentFormattingOption = ...
    ) -> list[str]: ...
    def queryItemValue(
        self, key: str | None, options: QUrl.ComponentFormattingOption = ...
    ) -> str: ...
    def removeQueryItem(self, key: str | None) -> None: ...
    def addQueryItem(self, key: str | None, value: str | None) -> None: ...
    def hasQueryItem(self, key: str | None) -> bool: ...
    def queryItems(
        self, options: QUrl.ComponentFormattingOption = ...
    ) -> list[tuple[str, str]]: ...
    def setQueryItems(
        self, query: collections.abc.Iterable[tuple[str | None, str | None]]
    ) -> None: ...
    def queryPairDelimiter(self) -> str: ...
    def queryValueDelimiter(self) -> str: ...
    def setQueryDelimiters(
        self, valueDelimiter: str, pairDelimiter: str
    ) -> None: ...
    def toString(
        self, options: QUrl.ComponentFormattingOption = ...
    ) -> str: ...
    def setQuery(self, queryString: str | None) -> None: ...
    def query(self, options: QUrl.ComponentFormattingOption = ...) -> str: ...
    def clear(self) -> None: ...
    def isDetached(self) -> bool: ...
    def isEmpty(self) -> bool: ...
    def swap(self, other: QUrlQuery) -> None: ...

class QUuid(PyQt6.sip.simplewrapper):
    class StringFormat(enum.Enum):
        WithBraces = ...
        WithoutBraces = ...
        Id128 = ...

    class Version(enum.Enum):
        VerUnknown = ...
        Time = ...
        EmbeddedPOSIX = ...
        Md5 = ...
        Name = ...
        Random = ...
        Sha1 = ...
        UnixEpoch = ...

    class Variant(enum.Enum):
        VarUnknown = ...
        NCS = ...
        DCE = ...
        Microsoft = ...
        Reserved = ...

    class Id128Bytes(PyQt6.sip.simplewrapper):
        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: QUuid.Id128Bytes) -> None: ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, id128: QUuid.Id128Bytes, order: QSysInfo.Endian = ...
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        l: int,
        w1: int,
        w2: int,
        b1: int,
        b2: int,
        b3: int,
        b4: int,
        b5: int,
        b6: int,
        b7: int,
        b8: int,
    ) -> None: ...
    @typing.overload
    def __init__(
        self, string: QByteArray | bytes | bytearray | memoryview | str | None
    ) -> None: ...
    @typing.overload
    def __init__(self, a0: QUuid) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __ge__(self, rhs: QUuid) -> bool: ...
    def __le__(self, rhs: QUuid) -> bool: ...
    def __gt__(self, rhs: QUuid) -> bool: ...
    def __lt__(self, rhs: QUuid) -> bool: ...
    @staticmethod
    def fromString(
        string: QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> QUuid: ...
    @staticmethod
    def fromRfc4122(
        a0: QByteArray | bytes | bytearray | memoryview,
    ) -> QUuid: ...
    def toRfc4122(self) -> QByteArray: ...
    def toByteArray(self, mode: QUuid.StringFormat = ...) -> QByteArray: ...
    def version(self) -> QUuid.Version: ...
    def variant(self) -> QUuid.Variant: ...
    @staticmethod
    def createUuidV7() -> QUuid: ...
    @typing.overload
    @staticmethod
    def createUuidV5(
        ns: QUuid, baseData: QByteArray | bytes | bytearray | memoryview
    ) -> QUuid: ...
    @typing.overload
    @staticmethod
    def createUuidV5(ns: QUuid, baseData: str | None) -> QUuid: ...
    @typing.overload
    @staticmethod
    def createUuidV3(
        ns: QUuid, baseData: QByteArray | bytes | bytearray | memoryview
    ) -> QUuid: ...
    @typing.overload
    @staticmethod
    def createUuidV3(ns: QUuid, baseData: str | None) -> QUuid: ...
    @staticmethod
    def createUuid() -> QUuid: ...
    def isNull(self) -> bool: ...
    def toString(self, mode: QUuid.StringFormat = ...) -> str: ...
    def __hash__(self) -> int: ...

class QVariant(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, obj: typing.Any) -> None: ...
    @typing.overload
    def __init__(self, a0: QVariant | None) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def typeId(self) -> int: ...
    def canView(self, targetType: QMetaType) -> bool: ...
    def metaType(self) -> QMetaType: ...
    def swap(self, other: QVariant | None) -> None: ...
    def save(self, ds: QDataStream) -> None: ...
    def load(self, ds: QDataStream) -> None: ...
    def clear(self) -> None: ...
    def isNull(self) -> bool: ...
    def isValid(self) -> bool: ...
    def convert(self, type: QMetaType) -> bool: ...
    def canConvert(self, targetType: QMetaType) -> bool: ...
    def typeName(self) -> str | None: ...
    def userType(self) -> int: ...
    def value(self) -> typing.Any: ...

class QVersionNumber(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, seg: collections.abc.Iterable[int]) -> None: ...
    @typing.overload
    def __init__(self, maj: int) -> None: ...
    @typing.overload
    def __init__(self, maj: int, min: int) -> None: ...
    @typing.overload
    def __init__(self, maj: int, min: int, mic: int) -> None: ...
    @typing.overload
    def __init__(self, a0: QVersionNumber) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __ge__(self, rhs: QVersionNumber) -> bool: ...
    def __le__(self, rhs: QVersionNumber) -> bool: ...
    def __gt__(self, rhs: QVersionNumber) -> bool: ...
    def __lt__(self, rhs: QVersionNumber) -> bool: ...
    def __hash__(self) -> int: ...
    @staticmethod
    def fromString(
        string: QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> tuple[QVersionNumber, int | None]: ...
    def toString(self) -> str: ...
    @staticmethod
    def commonPrefix(
        v1: QVersionNumber, v2: QVersionNumber
    ) -> QVersionNumber: ...
    @staticmethod
    def compare(v1: QVersionNumber, v2: QVersionNumber) -> int: ...
    def isPrefixOf(self, other: QVersionNumber) -> bool: ...
    def segmentCount(self) -> int: ...
    def segmentAt(self, index: int) -> int: ...
    def segments(self) -> list[int]: ...
    def normalized(self) -> QVersionNumber: ...
    def microVersion(self) -> int: ...
    def minorVersion(self) -> int: ...
    def majorVersion(self) -> int: ...
    def isNormalized(self) -> bool: ...
    def isNull(self) -> bool: ...

class QWaitCondition(PyQt6.sip.simplewrapper):
    def __init__(self) -> None: ...
    def wakeAll(self) -> None: ...
    def wakeOne(self) -> None: ...
    @typing.overload
    def wait(
        self, lockedMutex: QMutex | None, deadline: QDeadlineTimer = ...
    ) -> bool: ...
    @typing.overload
    def wait(self, lockedMutex: QMutex | None, time: int) -> bool: ...
    @typing.overload
    def wait(
        self,
        lockedReadWriteLock: QReadWriteLock | None,
        deadline: QDeadlineTimer = ...,
    ) -> bool: ...
    @typing.overload
    def wait(
        self, lockedReadWriteLock: QReadWriteLock | None, time: int
    ) -> bool: ...

class QXmlStreamAttribute(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, qualifiedName: str | None, value: str | None
    ) -> None: ...
    @typing.overload
    def __init__(
        self, namespaceUri: str | None, name: str | None, value: str | None
    ) -> None: ...
    @typing.overload
    def __init__(self, a0: QXmlStreamAttribute) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def isDefault(self) -> bool: ...
    def value(self) -> str: ...
    def prefix(self) -> str: ...
    def qualifiedName(self) -> str: ...
    def name(self) -> str: ...
    def namespaceUri(self) -> str: ...

class QXmlStreamNamespaceDeclaration(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, prefix: str | None, namespaceUri: str | None
    ) -> None: ...
    @typing.overload
    def __init__(self, a0: QXmlStreamNamespaceDeclaration) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def namespaceUri(self) -> str: ...
    def prefix(self) -> str: ...

class QXmlStreamNotationDeclaration(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QXmlStreamNotationDeclaration) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def publicId(self) -> str: ...
    def systemId(self) -> str: ...
    def name(self) -> str: ...

class QXmlStreamEntityDeclaration(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QXmlStreamEntityDeclaration) -> None: ...
    def __eq__(self, other: object) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def value(self) -> str: ...
    def publicId(self) -> str: ...
    def systemId(self) -> str: ...
    def notationName(self) -> str: ...
    def name(self) -> str: ...

class QXmlStreamEntityResolver(PyQt6.sip.simplewrapper):
    def __init__(self) -> None: ...
    def resolveUndeclaredEntity(self, name: str | None) -> str: ...

class QXmlStreamReader(PyQt6.sip.simplewrapper):
    class Error(enum.Enum):
        NoError = ...
        UnexpectedElementError = ...
        CustomError = ...
        NotWellFormedError = ...
        PrematureEndOfDocumentError = ...

    class ReadElementTextBehaviour(enum.Enum):
        ErrorOnUnexpectedElement = ...
        IncludeChildElements = ...
        SkipChildElements = ...

    class TokenType(enum.Enum):
        NoToken = ...
        Invalid = ...
        StartDocument = ...
        EndDocument = ...
        StartElement = ...
        EndElement = ...
        Characters = ...
        Comment = ...
        DTD = ...
        EntityReference = ...
        ProcessingInstruction = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, device: QIODevice | None) -> None: ...
    @typing.overload
    def __init__(
        self, data: QByteArray | bytes | bytearray | memoryview | str | None
    ) -> None: ...
    def hasStandaloneDeclaration(self) -> bool: ...
    def setEntityExpansionLimit(self, limit: int) -> None: ...
    def entityExpansionLimit(self) -> int: ...
    def skipCurrentElement(self) -> None: ...
    def readNextStartElement(self) -> bool: ...
    def entityResolver(self) -> QXmlStreamEntityResolver | None: ...
    def setEntityResolver(
        self, resolver: QXmlStreamEntityResolver | None
    ) -> None: ...
    def hasError(self) -> bool: ...
    def error(self) -> QXmlStreamReader.Error: ...
    def errorString(self) -> str: ...
    def raiseError(self, message: str | None = ...) -> None: ...
    def dtdSystemId(self) -> str: ...
    def dtdPublicId(self) -> str: ...
    def dtdName(self) -> str: ...
    def entityDeclarations(self) -> list[QXmlStreamEntityDeclaration]: ...
    def notationDeclarations(self) -> list[QXmlStreamNotationDeclaration]: ...
    def addExtraNamespaceDeclarations(
        self,
        extraNamespaceDeclaractions: collections.abc.Iterable[
            QXmlStreamNamespaceDeclaration
        ],
    ) -> None: ...
    def addExtraNamespaceDeclaration(
        self, extraNamespaceDeclaraction: QXmlStreamNamespaceDeclaration
    ) -> None: ...
    def namespaceDeclarations(
        self,
    ) -> list[QXmlStreamNamespaceDeclaration]: ...
    def text(self) -> str: ...
    def processingInstructionData(self) -> str: ...
    def processingInstructionTarget(self) -> str: ...
    def prefix(self) -> str: ...
    def qualifiedName(self) -> str: ...
    def namespaceUri(self) -> str: ...
    def name(self) -> str: ...
    def readElementText(
        self, behaviour: QXmlStreamReader.ReadElementTextBehaviour = ...
    ) -> str: ...
    def attributes(self) -> QXmlStreamAttributes: ...
    def characterOffset(self) -> int: ...
    def columnNumber(self) -> int: ...
    def lineNumber(self) -> int: ...
    def documentEncoding(self) -> str: ...
    def documentVersion(self) -> str: ...
    def isStandaloneDocument(self) -> bool: ...
    def isProcessingInstruction(self) -> bool: ...
    def isEntityReference(self) -> bool: ...
    def isDTD(self) -> bool: ...
    def isComment(self) -> bool: ...
    def isCDATA(self) -> bool: ...
    def isWhitespace(self) -> bool: ...
    def isCharacters(self) -> bool: ...
    def isEndElement(self) -> bool: ...
    def isStartElement(self) -> bool: ...
    def isEndDocument(self) -> bool: ...
    def isStartDocument(self) -> bool: ...
    def namespaceProcessing(self) -> bool: ...
    def setNamespaceProcessing(self, a0: bool) -> None: ...
    def tokenString(self) -> str: ...
    def tokenType(self) -> QXmlStreamReader.TokenType: ...
    def readNext(self) -> QXmlStreamReader.TokenType: ...
    def atEnd(self) -> bool: ...
    def clear(self) -> None: ...
    def addData(
        self, data: QByteArray | bytes | bytearray | memoryview | str | None
    ) -> None: ...
    def device(self) -> QIODevice | None: ...
    def setDevice(self, device: QIODevice | None) -> None: ...

class QXmlStreamWriter(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, device: QIODevice | None) -> None: ...
    @typing.overload
    def __init__(
        self, array: QByteArray | bytes | bytearray | memoryview | None
    ) -> None: ...
    def hasError(self) -> bool: ...
    def writeCurrentToken(self, reader: QXmlStreamReader) -> None: ...
    @typing.overload
    def writeStartElement(
        self,
        namespaceUri: QByteArray | bytes | bytearray | memoryview | str | None,
        name: QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> None: ...
    @typing.overload
    def writeStartElement(
        self,
        qualifiedName: QByteArray
        | bytes
        | bytearray
        | memoryview
        | str
        | None,
    ) -> None: ...
    @typing.overload
    def writeStartDocument(
        self,
        version: QByteArray | bytes | bytearray | memoryview | str | None,
        standalone: bool,
    ) -> None: ...
    @typing.overload
    def writeStartDocument(
        self, version: QByteArray | bytes | bytearray | memoryview | str | None
    ) -> None: ...
    @typing.overload
    def writeStartDocument(self) -> None: ...
    def writeProcessingInstruction(
        self,
        target: QByteArray | bytes | bytearray | memoryview | str | None,
        data: QByteArray | bytes | bytearray | memoryview | str | None = ...,
    ) -> None: ...
    def writeDefaultNamespace(
        self,
        namespaceUri: QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> None: ...
    def writeNamespace(
        self,
        namespaceUri: QByteArray | bytes | bytearray | memoryview | str | None,
        prefix: QByteArray | bytes | bytearray | memoryview | str | None = ...,
    ) -> None: ...
    def writeEntityReference(
        self, name: QByteArray | bytes | bytearray | memoryview | str | None
    ) -> None: ...
    def writeEndElement(self) -> None: ...
    def writeEndDocument(self) -> None: ...
    @typing.overload
    def writeTextElement(
        self,
        namespaceUri: QByteArray | bytes | bytearray | memoryview | str | None,
        name: QByteArray | bytes | bytearray | memoryview | str | None,
        text: QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> None: ...
    @typing.overload
    def writeTextElement(
        self,
        qualifiedName: QByteArray
        | bytes
        | bytearray
        | memoryview
        | str
        | None,
        text: QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> None: ...
    @typing.overload
    def writeEmptyElement(
        self,
        namespaceUri: QByteArray | bytes | bytearray | memoryview | str | None,
        name: QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> None: ...
    @typing.overload
    def writeEmptyElement(
        self,
        qualifiedName: QByteArray
        | bytes
        | bytearray
        | memoryview
        | str
        | None,
    ) -> None: ...
    def writeDTD(
        self, dtd: QByteArray | bytes | bytearray | memoryview | str | None
    ) -> None: ...
    def writeComment(
        self, text: QByteArray | bytes | bytearray | memoryview | str | None
    ) -> None: ...
    def writeCharacters(
        self, text: QByteArray | bytes | bytearray | memoryview | str | None
    ) -> None: ...
    def writeCDATA(
        self, text: QByteArray | bytes | bytearray | memoryview | str | None
    ) -> None: ...
    def writeAttributes(self, attributes: QXmlStreamAttributes) -> None: ...
    @typing.overload
    def writeAttribute(
        self,
        namespaceUri: QByteArray | bytes | bytearray | memoryview | str | None,
        name: QByteArray | bytes | bytearray | memoryview | str | None,
        value: QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> None: ...
    @typing.overload
    def writeAttribute(
        self,
        qualifiedName: QByteArray
        | bytes
        | bytearray
        | memoryview
        | str
        | None,
        value: QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> None: ...
    @typing.overload
    def writeAttribute(self, attribute: QXmlStreamAttribute) -> None: ...
    def autoFormattingIndent(self) -> int: ...
    def setAutoFormattingIndent(self, spaces: int) -> None: ...
    def autoFormatting(self) -> bool: ...
    def setAutoFormatting(self, a0: bool) -> None: ...
    def device(self) -> QIODevice | None: ...
    def setDevice(self, device: QIODevice | None) -> None: ...

class QXmlStreamAttributes(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QXmlStreamAttributes) -> None: ...
    def __contains__(self, value: QXmlStreamAttribute) -> int: ...
    @typing.overload
    def __delitem__(self, i: int) -> None: ...
    @typing.overload
    def __delitem__(self, slice: slice) -> None: ...
    @typing.overload
    def __setitem__(self, i: int, value: QXmlStreamAttribute) -> None: ...
    @typing.overload
    def __setitem__(
        self, slice: slice, list: QXmlStreamAttributes
    ) -> None: ...
    @typing.overload
    def __getitem__(self, i: int) -> QXmlStreamAttribute: ...
    @typing.overload
    def __getitem__(self, slice: slice) -> QXmlStreamAttributes: ...
    def __eq__(self, other: object) -> bool: ...
    @typing.overload
    def __iadd__(
        self, other: QXmlStreamAttributes
    ) -> QXmlStreamAttributes: ...
    @typing.overload
    def __iadd__(self, value: QXmlStreamAttribute) -> QXmlStreamAttributes: ...
    def __ne__(self, other: object) -> bool: ...
    def size(self) -> int: ...
    def replace(self, i: int, value: QXmlStreamAttribute) -> None: ...
    def resize(self, size: int) -> None: ...
    @typing.overload
    def remove(self, i: int) -> None: ...
    @typing.overload
    def remove(self, i: int, count: int) -> None: ...
    def prepend(self, value: QXmlStreamAttribute) -> None: ...
    def lastIndexOf(
        self, value: QXmlStreamAttribute, from_: int = ...
    ) -> int: ...
    def last(self) -> QXmlStreamAttribute: ...
    def isEmpty(self) -> bool: ...
    def insert(self, i: int, value: QXmlStreamAttribute) -> None: ...
    def indexOf(self, value: QXmlStreamAttribute, from_: int = ...) -> int: ...
    def first(self) -> QXmlStreamAttribute: ...
    def fill(self, value: QXmlStreamAttribute, size: int = ...) -> None: ...
    def data(self) -> PyQt6.sip.voidptr | None: ...
    def __len__(self) -> int: ...
    @typing.overload
    def count(self, value: QXmlStreamAttribute) -> int: ...
    @typing.overload
    def count(self) -> int: ...
    def contains(self, value: QXmlStreamAttribute) -> bool: ...
    def clear(self) -> None: ...
    def at(self, i: int) -> QXmlStreamAttribute: ...
    @typing.overload
    def hasAttribute(
        self,
        namespaceUri: QByteArray | bytes | bytearray | memoryview | str | None,
        name: QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> bool: ...
    @typing.overload
    def hasAttribute(
        self,
        qualifiedName: QByteArray
        | bytes
        | bytearray
        | memoryview
        | str
        | None,
    ) -> bool: ...
    @typing.overload
    def append(
        self, namespaceUri: str | None, name: str | None, value: str | None
    ) -> None: ...
    @typing.overload
    def append(self, qualifiedName: str | None, value: str | None) -> None: ...
    @typing.overload
    def append(self, value: QXmlStreamAttribute) -> None: ...
    @typing.overload
    def value(
        self,
        namespaceUri: QByteArray | bytes | bytearray | memoryview | str | None,
        name: QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> str: ...
    @typing.overload
    def value(
        self,
        qualifiedName: QByteArray
        | bytes
        | bytearray
        | memoryview
        | str
        | None,
    ) -> str: ...

class QMutexLocker(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self, mutex: QMutex | None) -> None: ...
    @typing.overload
    def __init__(self, mutex: QRecursiveMutex | None) -> None: ...
    def __exit__(
        self, type: typing.Any, value: typing.Any, traceback: typing.Any
    ) -> None: ...
    def __enter__(self) -> typing.Any: ...
    def relock(self) -> None: ...
    def unlock(self) -> None: ...
    def mutex(self) -> QMutex | QRecursiveMutex: ...

PYQT_VERSION: int = ...
PYQT_VERSION_STR: str = ...
QT_VERSION: int = ...
QT_VERSION_STR: str = ...

def qYieldCpu() -> None: ...
def qSetRealNumberPrecision(precision: int) -> QTextStreamManipulator: ...
def qSetPadChar(ch: str) -> QTextStreamManipulator: ...
def qSetFieldWidth(width: int) -> QTextStreamManipulator: ...
def Q_RETURN_ARG(type: typing.Any) -> QGenericReturnArgument: ...
def Q_ARG(type: typing.Any, data: typing.Any) -> QGenericArgument: ...
def QT_TRANSLATE_NOOP(a0: str, a1: str) -> str: ...
def QT_TR_NOOP(a0: str) -> str: ...
def pyqtEnum(a0: enum.Enum = ...) -> None: ...
def pyqtClassInfo(a0: str | None, a1: str | None) -> None: ...
def qRound64(d: float) -> int: ...
def qRound(d: float) -> int: ...
def qAbs(t: float) -> float: ...
def qFloatDistance(a: float, b: float) -> int: ...
def qQNaN() -> float: ...
def qSNaN() -> float: ...
def qInf() -> float: ...
def qIsNaN(d: float) -> bool: ...
def qIsFinite(d: float) -> bool: ...
def qIsInf(d: float) -> bool: ...
def qFormatLogMessage(
    type: QtMsgType, context: QMessageLogContext, buf: str | None
) -> str: ...
def qSetMessagePattern(messagePattern: str | None) -> None: ...
def qInstallMessageHandler(
    a0: collections.abc.Callable[
        [QtMsgType, QMessageLogContext, str | None], None
    ]
    | None,
) -> (
    collections.abc.Callable[[QtMsgType, QMessageLogContext, str | None], None]
    | None
): ...
def qWarning(msg: str | None) -> None: ...
def qInfo(msg: str | None) -> None: ...
def qFatal(msg: str | None) -> None: ...
def qDebug(msg: str | None) -> None: ...
def qCritical(msg: str | None) -> None: ...
@typing.overload
def qFuzzyIsNull(line: QLineF) -> bool: ...
@typing.overload
def qFuzzyIsNull(m: QMarginsF) -> bool: ...
@typing.overload
def qFuzzyIsNull(d: float) -> bool: ...
@typing.overload
def qFuzzyIsNull(point: QPointF) -> bool: ...
@typing.overload
def qFuzzyIsNull(rect: QRectF) -> bool: ...
@typing.overload
def qFuzzyIsNull(size: QSizeF) -> bool: ...
@typing.overload
def qFuzzyCompare(lhs: QLineF, rhs: QLineF) -> bool: ...
@typing.overload
def qFuzzyCompare(lhs: QMarginsF, rhs: QMarginsF) -> bool: ...
@typing.overload
def qFuzzyCompare(p1: float, p2: float) -> bool: ...
@typing.overload
def qFuzzyCompare(p1: QPointF, p2: QPointF) -> bool: ...
@typing.overload
def qFuzzyCompare(lhs: QRectF, rhs: QRectF) -> bool: ...
@typing.overload
def qFuzzyCompare(s1: QSizeF, s2: QSizeF) -> bool: ...
def pyqtRestoreInputHook() -> None: ...
def pyqtRemoveInputHook() -> None: ...
def qAddPreRoutine(routine: collections.abc.Callable[[], None]) -> None: ...
def qRemovePostRoutine(a0: collections.abc.Callable[..., None]) -> None: ...
def qAddPostRoutine(a0: collections.abc.Callable[..., None]) -> None: ...
def qChecksum(
    data: QByteArray | bytes | bytearray | memoryview,
    standard: Qt.ChecksumType = ...,
) -> int: ...
@typing.overload
def qUncompress(data: PyQt6.sip.array[bytes] | None) -> QByteArray: ...
@typing.overload
def qUncompress(
    data: QByteArray | bytes | bytearray | memoryview,
) -> QByteArray: ...
@typing.overload
def qCompress(
    data: PyQt6.sip.array[bytes] | None, compressionLevel: int = ...
) -> QByteArray: ...
@typing.overload
def qCompress(
    data: QByteArray | bytes | bytearray | memoryview,
    compressionLevel: int = ...,
) -> QByteArray: ...
def qVersion() -> str | None: ...
def qEnvironmentVariableIntValue(
    varName: str | None,
) -> tuple[int, bool | None]: ...
def qEnvironmentVariableIsSet(varName: str | None) -> bool: ...
def qEnvironmentVariableIsEmpty(varName: str | None) -> bool: ...
@typing.overload
def qEnvironmentVariable(
    varName: str | None, defaultValue: str | None
) -> str: ...
@typing.overload
def qEnvironmentVariable(varName: str | None) -> str: ...
def pyqtPickleProtocol() -> int | None: ...
def pyqtSetPickleProtocol(a0: int | None) -> None: ...
def qUnregisterResourceData(
    a0: int, a1: bytes | None, a2: bytes | None, a3: bytes | None
) -> bool: ...
def qRegisterResourceData(
    a0: int, a1: bytes | None, a2: bytes | None, a3: bytes | None
) -> bool: ...
