# The PEP 484 type hints stub file for the QtGui module.
#
# Generated by SIP 6.12.0
#
# Copyright (c) 2025 Riverbank Computing Limited <info@riverbankcomputing.com>
#
# This file is part of PyQt6.
#
# This file may be used under the terms of the GNU General Public License
# version 3.0 as published by the Free Software Foundation and appearing in
# the file LICENSE included in the packaging of this file.  Please review the
# following information to ensure the GNU General Public License version 3.0
# requirements will be met: http://www.gnu.org/copyleft/gpl.html.
#
# If you do not wish to use this file under the terms of the GPL version 3.0
# then you may purchase a commercial license.  For more information contact
# info@riverbankcomputing.com.
#
# This file is provided AS IS with NO WARRANTY OF ANY KIND, INCLUDING THE
# WARRANTY OF DESIGN, MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE.

import collections
import collections.abc
import enum
import typing
from typing import Any

import PyQt6.sip
from PyQt6 import QtCore
from PyQt6.QtWidgets import QMenu

# Support for QDate, QDateTime and QTime.

# Convenient type aliases.
type PYQT_SIGNAL = QtCore.pyqtSignal | QtCore.pyqtBoundSignal
type PYQT_SLOT = collections.abc.Callable[..., Any] | QtCore.pyqtBoundSignal

class QAbstractFileIconProvider(PyQt6.sip.simplewrapper):
    class Option(enum.Flag):
        DontUseCustomDirectoryIcons = ...

    class IconType(enum.Enum):
        Computer = ...
        Desktop = ...
        Trashcan = ...
        Network = ...
        Drive = ...
        Folder = ...
        File = ...

    def __init__(self) -> None: ...
    def options(self) -> QAbstractFileIconProvider.Option: ...
    def setOptions(self, a0: QAbstractFileIconProvider.Option) -> None: ...
    def type(self, a0: QtCore.QFileInfo) -> str: ...
    @typing.overload
    def icon(self, a0: QAbstractFileIconProvider.IconType) -> QIcon: ...
    @typing.overload
    def icon(self, a0: QtCore.QFileInfo) -> QIcon: ...

class QAbstractTextDocumentLayout(QtCore.QObject):
    class Selection(PyQt6.sip.simplewrapper):
        cursor: QTextCursor = ...
        format: QTextCharFormat = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(
            self, a0: QAbstractTextDocumentLayout.Selection
        ) -> None: ...

    class PaintContext(PyQt6.sip.simplewrapper):
        clip: QtCore.QRectF = ...
        cursorPosition: int = ...
        palette: QPalette = ...
        selections: collections.abc.Iterable[
            QAbstractTextDocumentLayout.Selection
        ] = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(
            self, a0: QAbstractTextDocumentLayout.PaintContext
        ) -> None: ...

    def __init__(self, doc: QTextDocument | None) -> None: ...
    def blockWithMarkerAt(self, pos: QtCore.QPointF) -> QTextBlock: ...
    def formatAt(self, pos: QtCore.QPointF) -> QTextFormat: ...
    def imageAt(self, pos: QtCore.QPointF) -> str: ...
    def format(self, pos: int) -> QTextCharFormat: ...
    def drawInlineObject(
        self,
        painter: QPainter | None,
        rect: QtCore.QRectF,
        object: QTextInlineObject,
        posInDocument: int,
        format: QTextFormat,
    ) -> None: ...
    def positionInlineObject(
        self, item: QTextInlineObject, posInDocument: int, format: QTextFormat
    ) -> None: ...
    def resizeInlineObject(
        self, item: QTextInlineObject, posInDocument: int, format: QTextFormat
    ) -> None: ...
    def documentChanged(
        self, from_: int, charsRemoved: int, charsAdded: int
    ) -> None: ...
    updateBlock: typing.ClassVar[QtCore.pyqtSignal]
    pageCountChanged: typing.ClassVar[QtCore.pyqtSignal]
    documentSizeChanged: typing.ClassVar[QtCore.pyqtSignal]
    update: typing.ClassVar[QtCore.pyqtSignal]
    def handlerForObject(
        self, objectType: int
    ) -> QTextObjectInterface | None: ...
    def unregisterHandler(
        self, objectType: int, component: QtCore.QObject | None = ...
    ) -> None: ...
    def registerHandler(
        self, objectType: int, component: QtCore.QObject | None
    ) -> None: ...
    def document(self) -> QTextDocument | None: ...
    def paintDevice(self) -> QPaintDevice | None: ...
    def setPaintDevice(self, device: QPaintDevice | None) -> None: ...
    def blockBoundingRect(self, block: QTextBlock) -> QtCore.QRectF: ...
    def frameBoundingRect(self, frame: QTextFrame | None) -> QtCore.QRectF: ...
    def documentSize(self) -> QtCore.QSizeF: ...
    def pageCount(self) -> int: ...
    def anchorAt(self, pos: QtCore.QPointF) -> str: ...
    def hitTest(
        self, point: QtCore.QPointF, accuracy: QtCore.Qt.HitTestAccuracy
    ) -> int: ...
    def draw(
        self,
        painter: QPainter | None,
        context: QAbstractTextDocumentLayout.PaintContext,
    ) -> None: ...

class QTextObjectInterface(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QTextObjectInterface) -> None: ...
    def drawObject(
        self,
        painter: QPainter | None,
        rect: QtCore.QRectF,
        doc: QTextDocument | None,
        posInDocument: int,
        format: QTextFormat,
    ) -> None: ...
    def intrinsicSize(
        self,
        doc: QTextDocument | None,
        posInDocument: int,
        format: QTextFormat,
    ) -> QtCore.QSizeF: ...

class QAction(QtCore.QObject):
    class Priority(enum.Enum):
        LowPriority = ...
        NormalPriority = ...
        HighPriority = ...

    class MenuRole(enum.Enum):
        NoRole = ...
        TextHeuristicRole = ...
        ApplicationSpecificRole = ...
        AboutQtRole = ...
        AboutRole = ...
        PreferencesRole = ...
        QuitRole = ...

    class ActionEvent(enum.Enum):
        Trigger = ...
        Hover = ...

    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self, text: str | None, parent: QtCore.QObject | None = ...
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        icon: QIcon,
        text: str | None,
        parent: QtCore.QObject | None = ...,
    ) -> None: ...

    visibleChanged: typing.ClassVar[QtCore.pyqtSignal]
    checkableChanged: typing.ClassVar[QtCore.pyqtSignal]
    enabledChanged: typing.ClassVar[QtCore.pyqtSignal]
    def resetEnabled(self) -> None: ...
    def associatedObjects(self) -> list[QtCore.QObject]: ...
    def isShortcutVisibleInContextMenu(self) -> bool: ...
    def setShortcutVisibleInContextMenu(self, show: bool) -> None: ...
    def priority(self) -> QAction.Priority: ...
    def setPriority(self, priority: QAction.Priority) -> None: ...
    def isIconVisibleInMenu(self) -> bool: ...
    def setIconVisibleInMenu(self, visible: bool) -> None: ...
    def setMenu(self, menu: QMenu | None) -> None: ...
    def menu(self) -> QMenu | None: ...
    def menuRole(self) -> QAction.MenuRole: ...
    def setMenuRole(self, menuRole: QAction.MenuRole) -> None: ...
    def autoRepeat(self) -> bool: ...
    def setAutoRepeat(self, a0: bool) -> None: ...
    def shortcuts(self) -> list[QKeySequence]: ...
    @typing.overload
    def setShortcuts(
        self,
        shortcuts: collections.abc.Iterable[
            QKeySequence | QKeySequence.StandardKey | str | None | int
        ],
    ) -> None: ...
    @typing.overload
    def setShortcuts(self, a0: QKeySequence.StandardKey) -> None: ...
    toggled: typing.ClassVar[QtCore.pyqtSignal]
    hovered: typing.ClassVar[QtCore.pyqtSignal]
    triggered: typing.ClassVar[QtCore.pyqtSignal]
    changed: typing.ClassVar[QtCore.pyqtSignal]
    def setVisible(self, a0: bool) -> None: ...
    def setDisabled(self, b: bool) -> None: ...
    def setEnabled(self, a0: bool) -> None: ...
    def toggle(self) -> None: ...
    def setChecked(self, a0: bool) -> None: ...
    def hover(self) -> None: ...
    def trigger(self) -> None: ...
    def event(self, a0: QtCore.QEvent | None) -> bool: ...
    def showStatusText(self, object: QtCore.QObject | None = ...) -> bool: ...
    def activate(self, event: QAction.ActionEvent) -> None: ...
    def isVisible(self) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isChecked(self) -> bool: ...
    def setData(self, var: typing.Any) -> None: ...
    def data(self) -> typing.Any: ...
    def isCheckable(self) -> bool: ...
    def setCheckable(self, a0: bool) -> None: ...
    def font(self) -> QFont: ...
    def setFont(self, font: QFont) -> None: ...
    def shortcutContext(self) -> QtCore.Qt.ShortcutContext: ...
    def setShortcutContext(
        self, context: QtCore.Qt.ShortcutContext
    ) -> None: ...
    def shortcut(self) -> QKeySequence: ...
    def setShortcut(
        self,
        shortcut: QKeySequence | QKeySequence.StandardKey | str | None | int,
    ) -> None: ...
    def isSeparator(self) -> bool: ...
    def setSeparator(self, b: bool) -> None: ...
    def whatsThis(self) -> str: ...
    def setWhatsThis(self, what: str | None) -> None: ...
    def statusTip(self) -> str: ...
    def setStatusTip(self, statusTip: str | None) -> None: ...
    def toolTip(self) -> str: ...
    def setToolTip(self, tip: str | None) -> None: ...
    def iconText(self) -> str: ...
    def setIconText(self, text: str | None) -> None: ...
    def text(self) -> str: ...
    def setText(self, text: str | None) -> None: ...
    def icon(self) -> QIcon: ...
    def setIcon(self, icon: QIcon) -> None: ...
    def actionGroup(self) -> QActionGroup | None: ...
    def setActionGroup(self, group: QActionGroup | None) -> None: ...

class QActionGroup(QtCore.QObject):
    class ExclusionPolicy(enum.Enum):
        None_ = ...
        Exclusive = ...
        ExclusiveOptional = ...

    def __init__(self, parent: QtCore.QObject | None) -> None: ...

    hovered: typing.ClassVar[QtCore.pyqtSignal]
    triggered: typing.ClassVar[QtCore.pyqtSignal]
    def setExclusionPolicy(
        self, policy: QActionGroup.ExclusionPolicy
    ) -> None: ...
    def setExclusive(self, a0: bool) -> None: ...
    def setVisible(self, a0: bool) -> None: ...
    def setDisabled(self, b: bool) -> None: ...
    def setEnabled(self, a0: bool) -> None: ...
    def exclusionPolicy(self) -> QActionGroup.ExclusionPolicy: ...
    def isVisible(self) -> bool: ...
    def isEnabled(self) -> bool: ...
    def isExclusive(self) -> bool: ...
    def checkedAction(self) -> QAction | None: ...
    def actions(self) -> list[QAction]: ...
    def removeAction(self, a: QAction | None) -> None: ...
    @typing.overload
    def addAction(self, a: QAction | None) -> QAction | None: ...
    @typing.overload
    def addAction(self, text: str | None) -> QAction | None: ...
    @typing.overload
    def addAction(self, icon: QIcon, text: str | None) -> QAction | None: ...

class QBackingStore(PyQt6.sip.simplewrapper):
    def __init__(self, window: QWindow | None) -> None: ...
    def hasStaticContents(self) -> bool: ...
    def staticContents(self) -> QRegion: ...
    def setStaticContents(self, region: QRegion) -> None: ...
    def endPaint(self) -> None: ...
    def beginPaint(self, a0: QRegion) -> None: ...
    def scroll(self, area: QRegion, dx: int, dy: int) -> bool: ...
    def size(self) -> QtCore.QSize: ...
    def resize(self, size: QtCore.QSize) -> None: ...
    def flush(
        self,
        region: QRegion,
        window: QWindow | None = ...,
        offset: QtCore.QPoint = ...,
    ) -> None: ...
    def paintDevice(self) -> QPaintDevice | None: ...
    def window(self) -> QWindow | None: ...

class QPaintDevice(PyQt6.sip.simplewrapper):
    class PaintDeviceMetric(enum.Enum):
        PdmWidth = ...
        PdmHeight = ...
        PdmWidthMM = ...
        PdmHeightMM = ...
        PdmNumColors = ...
        PdmDepth = ...
        PdmDpiX = ...
        PdmDpiY = ...
        PdmPhysicalDpiX = ...
        PdmPhysicalDpiY = ...
        PdmDevicePixelRatio = ...
        PdmDevicePixelRatioScaled = ...
        PdmDevicePixelRatioF_EncodedA = ...
        PdmDevicePixelRatioF_EncodedB = ...

    def __init__(self) -> None: ...
    @staticmethod
    def devicePixelRatioFScale() -> float: ...
    def devicePixelRatioF(self) -> float: ...
    def metric(self, metric: QPaintDevice.PaintDeviceMetric) -> int: ...
    def devicePixelRatio(self) -> float: ...
    def colorCount(self) -> int: ...
    def paintingActive(self) -> bool: ...
    def depth(self) -> int: ...
    def physicalDpiY(self) -> int: ...
    def physicalDpiX(self) -> int: ...
    def logicalDpiY(self) -> int: ...
    def logicalDpiX(self) -> int: ...
    def heightMM(self) -> int: ...
    def widthMM(self) -> int: ...
    def height(self) -> int: ...
    def width(self) -> int: ...
    def paintEngine(self) -> QPaintEngine | None: ...

class QPixmap(QPaintDevice):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, w: int, h: int) -> None: ...
    @typing.overload
    def __init__(self, a0: QtCore.QSize) -> None: ...
    @typing.overload
    def __init__(
        self,
        fileName: str | None,
        format: str | None = ...,
        flags: QtCore.Qt.ImageConversionFlag = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, xpm: list[str]) -> None: ...
    @typing.overload
    def __init__(self, a0: QPixmap) -> None: ...
    @typing.overload
    def __init__(self, variant: typing.Any) -> None: ...
    def deviceIndependentSize(self) -> QtCore.QSizeF: ...
    def setDevicePixelRatio(self, scaleFactor: float) -> None: ...
    def devicePixelRatio(self) -> float: ...
    def swap(self, other: QPixmap) -> None: ...
    @typing.overload
    def scroll(
        self, dx: int, dy: int, rect: QtCore.QRect
    ) -> QRegion | None: ...
    @typing.overload
    def scroll(
        self, dx: int, dy: int, x: int, y: int, width: int, height: int
    ) -> QRegion | None: ...
    def cacheKey(self) -> int: ...
    @staticmethod
    def trueMatrix(m: QTransform, w: int, h: int) -> QTransform: ...
    def transformed(
        self, transform: QTransform, mode: QtCore.Qt.TransformationMode = ...
    ) -> QPixmap: ...
    def metric(self, a0: QPaintDevice.PaintDeviceMetric) -> int: ...
    def paintEngine(self) -> QPaintEngine | None: ...
    def isQBitmap(self) -> bool: ...
    def detach(self) -> None: ...
    @typing.overload
    def copy(self, rect: QtCore.QRect = ...) -> QPixmap: ...
    @typing.overload
    def copy(self, ax: int, ay: int, awidth: int, aheight: int) -> QPixmap: ...
    @typing.overload
    def save(
        self,
        fileName: str | None,
        format: str | None = ...,
        quality: int = ...,
    ) -> bool: ...
    @typing.overload
    def save(
        self,
        device: QtCore.QIODevice | None,
        format: str | None = ...,
        quality: int = ...,
    ) -> bool: ...
    @typing.overload
    def loadFromData(
        self,
        buf: PyQt6.sip.array[bytes] | None,
        format: str | None = ...,
        flags: QtCore.Qt.ImageConversionFlag = ...,
    ) -> bool: ...
    @typing.overload
    def loadFromData(
        self,
        buf: QtCore.QByteArray | bytes | bytearray | memoryview,
        format: str | None = ...,
        flags: QtCore.Qt.ImageConversionFlag = ...,
    ) -> bool: ...
    def load(
        self,
        fileName: str | None,
        format: str | None = ...,
        flags: QtCore.Qt.ImageConversionFlag = ...,
    ) -> bool: ...
    def convertFromImage(
        self, img: QImage, flags: QtCore.Qt.ImageConversionFlag = ...
    ) -> bool: ...
    @staticmethod
    def fromImageReader(
        imageReader: QImageReader | None,
        flags: QtCore.Qt.ImageConversionFlag = ...,
    ) -> QPixmap: ...
    @staticmethod
    def fromImage(
        image: QImage, flags: QtCore.Qt.ImageConversionFlag = ...
    ) -> QPixmap: ...
    def toImage(self) -> QImage: ...
    def scaledToHeight(
        self, height: int, mode: QtCore.Qt.TransformationMode = ...
    ) -> QPixmap: ...
    def scaledToWidth(
        self, width: int, mode: QtCore.Qt.TransformationMode = ...
    ) -> QPixmap: ...
    @typing.overload
    def scaled(
        self,
        width: int,
        height: int,
        aspectRatioMode: QtCore.Qt.AspectRatioMode = ...,
        transformMode: QtCore.Qt.TransformationMode = ...,
    ) -> QPixmap: ...
    @typing.overload
    def scaled(
        self,
        size: QtCore.QSize,
        aspectRatioMode: QtCore.Qt.AspectRatioMode = ...,
        transformMode: QtCore.Qt.TransformationMode = ...,
    ) -> QPixmap: ...
    def createMaskFromColor(
        self,
        maskColor: QColor | QtCore.Qt.GlobalColor | int,
        mode: QtCore.Qt.MaskMode = ...,
    ) -> QBitmap: ...
    def createHeuristicMask(self, clipTight: bool = ...) -> QBitmap: ...
    def hasAlphaChannel(self) -> bool: ...
    def hasAlpha(self) -> bool: ...
    def setMask(self, a0: QBitmap) -> None: ...
    def mask(self) -> QBitmap: ...
    def fill(
        self, color: QColor | QtCore.Qt.GlobalColor | int = ...
    ) -> None: ...
    @staticmethod
    def defaultDepth() -> int: ...
    def depth(self) -> int: ...
    def rect(self) -> QtCore.QRect: ...
    def size(self) -> QtCore.QSize: ...
    def height(self) -> int: ...
    def width(self) -> int: ...
    def devType(self) -> int: ...
    def isNull(self) -> bool: ...

class QBitmap(QPixmap):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, w: int, h: int) -> None: ...
    @typing.overload
    def __init__(self, a0: QtCore.QSize) -> None: ...
    @typing.overload
    def __init__(
        self, fileName: str | None, format: str | None = ...
    ) -> None: ...
    @typing.overload
    def __init__(self, variant: typing.Any) -> None: ...
    @typing.overload
    def __init__(self, a0: QBitmap) -> None: ...
    def swap(self, other: QBitmap) -> None: ...
    def transformed(self, matrix: QTransform) -> QBitmap: ...
    @staticmethod
    def fromData(
        size: QtCore.QSize, bits: bytes | None, format: QImage.Format = ...
    ) -> QBitmap: ...
    @staticmethod
    def fromPixmap(pixmap: QPixmap) -> QBitmap: ...
    @staticmethod
    def fromImage(
        image: QImage, flags: QtCore.Qt.ImageConversionFlag = ...
    ) -> QBitmap: ...
    def clear(self) -> None: ...

class QColor(PyQt6.sip.simplewrapper):
    class NameFormat(enum.Enum):
        HexRgb = ...
        HexArgb = ...

    class Spec(enum.Enum):
        Invalid = ...
        Rgb = ...
        Hsv = ...
        Cmyk = ...
        Hsl = ...
        ExtendedRgb = ...

    @typing.overload
    def __init__(self, color: QtCore.Qt.GlobalColor) -> None: ...
    @typing.overload
    def __init__(self, rgb: int) -> None: ...
    @typing.overload
    def __init__(self, rgba64: QRgba64) -> None: ...
    @typing.overload
    def __init__(self, variant: typing.Any) -> None: ...
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, r: int, g: int, b: int, alpha: int = ...) -> None: ...
    @typing.overload
    def __init__(self, name: str) -> None: ...
    @typing.overload
    def __init__(self, a0: QColor) -> None: ...
    @staticmethod
    def isValidColorName(
        a0: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> bool: ...
    @staticmethod
    def fromString(
        name: QtCore.QByteArray | bytes | bytearray | memoryview | str | None,
    ) -> QColor: ...
    def toExtendedRgb(self) -> QColor: ...
    @typing.overload
    @staticmethod
    def fromRgba64(r: int, g: int, b: int, alpha: int = ...) -> QColor: ...
    @typing.overload
    @staticmethod
    def fromRgba64(rgba: QRgba64) -> QColor: ...
    def setRgba64(self, rgba: QRgba64) -> None: ...
    def rgba64(self) -> QRgba64: ...
    @staticmethod
    def isValidColor(name: str | None) -> bool: ...
    @staticmethod
    def fromHslF(
        h: float, s: float, l: float, alpha: float = ...
    ) -> QColor: ...
    @staticmethod
    def fromHsl(h: int, s: int, l: int, alpha: int = ...) -> QColor: ...
    def toHsl(self) -> QColor: ...
    def setHslF(
        self, h: float, s: float, l: float, alpha: float = ...
    ) -> None: ...
    def getHslF(
        self,
    ) -> tuple[float | None, float | None, float | None, float | None]: ...
    def setHsl(self, h: int, s: int, l: int, alpha: int = ...) -> None: ...
    def getHsl(
        self,
    ) -> tuple[int | None, int | None, int | None, int | None]: ...
    def lightnessF(self) -> float: ...
    def hslSaturationF(self) -> float: ...
    def hslHueF(self) -> float: ...
    def lightness(self) -> int: ...
    def hslSaturation(self) -> int: ...
    def hslHue(self) -> int: ...
    def hsvSaturationF(self) -> float: ...
    def hsvHueF(self) -> float: ...
    def hsvSaturation(self) -> int: ...
    def hsvHue(self) -> int: ...
    def darker(self, factor: int = ...) -> QColor: ...
    def lighter(self, factor: int = ...) -> QColor: ...
    def isValid(self) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    @staticmethod
    def fromCmykF(
        c: float, m: float, y: float, k: float, alpha: float = ...
    ) -> QColor: ...
    @staticmethod
    def fromCmyk(
        c: int, m: int, y: int, k: int, alpha: int = ...
    ) -> QColor: ...
    @staticmethod
    def fromHsvF(
        h: float, s: float, v: float, alpha: float = ...
    ) -> QColor: ...
    @staticmethod
    def fromHsv(h: int, s: int, v: int, alpha: int = ...) -> QColor: ...
    @staticmethod
    def fromRgbF(
        r: float, g: float, b: float, alpha: float = ...
    ) -> QColor: ...
    @staticmethod
    def fromRgba(rgba: int) -> QColor: ...
    @typing.overload
    @staticmethod
    def fromRgb(rgb: int) -> QColor: ...
    @typing.overload
    @staticmethod
    def fromRgb(r: int, g: int, b: int, alpha: int = ...) -> QColor: ...
    def convertTo(self, colorSpec: QColor.Spec) -> QColor: ...
    def toCmyk(self) -> QColor: ...
    def toHsv(self) -> QColor: ...
    def toRgb(self) -> QColor: ...
    def setCmykF(
        self, c: float, m: float, y: float, k: float, alpha: float = ...
    ) -> None: ...
    def getCmykF(
        self,
    ) -> tuple[
        float | None, float | None, float | None, float | None, float | None
    ]: ...
    def setCmyk(
        self, c: int, m: int, y: int, k: int, alpha: int = ...
    ) -> None: ...
    def getCmyk(
        self,
    ) -> tuple[int | None, int | None, int | None, int | None, int | None]: ...
    def blackF(self) -> float: ...
    def yellowF(self) -> float: ...
    def magentaF(self) -> float: ...
    def cyanF(self) -> float: ...
    def black(self) -> int: ...
    def yellow(self) -> int: ...
    def magenta(self) -> int: ...
    def cyan(self) -> int: ...
    def setHsvF(
        self, h: float, s: float, v: float, alpha: float = ...
    ) -> None: ...
    def getHsvF(
        self,
    ) -> tuple[float | None, float | None, float | None, float | None]: ...
    def setHsv(self, h: int, s: int, v: int, alpha: int = ...) -> None: ...
    def getHsv(
        self,
    ) -> tuple[int | None, int | None, int | None, int | None]: ...
    def valueF(self) -> float: ...
    def saturationF(self) -> float: ...
    def hueF(self) -> float: ...
    def value(self) -> int: ...
    def saturation(self) -> int: ...
    def hue(self) -> int: ...
    def rgb(self) -> int: ...
    def setRgba(self, rgba: int) -> None: ...
    def rgba(self) -> int: ...
    def setRgbF(
        self, r: float, g: float, b: float, alpha: float = ...
    ) -> None: ...
    def getRgbF(
        self,
    ) -> tuple[float | None, float | None, float | None, float | None]: ...
    @typing.overload
    def setRgb(self, r: int, g: int, b: int, alpha: int = ...) -> None: ...
    @typing.overload
    def setRgb(self, rgb: int) -> None: ...
    def getRgb(
        self,
    ) -> tuple[int | None, int | None, int | None, int | None]: ...
    def setBlueF(self, blue: float) -> None: ...
    def setGreenF(self, green: float) -> None: ...
    def setRedF(self, red: float) -> None: ...
    def blueF(self) -> float: ...
    def greenF(self) -> float: ...
    def redF(self) -> float: ...
    def setBlue(self, blue: int) -> None: ...
    def setGreen(self, green: int) -> None: ...
    def setRed(self, red: int) -> None: ...
    def blue(self) -> int: ...
    def green(self) -> int: ...
    def red(self) -> int: ...
    def setAlphaF(self, alpha: float) -> None: ...
    def alphaF(self) -> float: ...
    def setAlpha(self, alpha: int) -> None: ...
    def alpha(self) -> int: ...
    def spec(self) -> QColor.Spec: ...
    @staticmethod
    def colorNames() -> list[str]: ...
    def setNamedColor(self, name: str) -> None: ...
    def name(self, format: QColor.NameFormat = ...) -> str: ...

class QColorConstants(PyQt6.sip.simplewrapper):
    class Svg(PyQt6.sip.simplewrapper):
        aliceblue: QColor | QtCore.Qt.GlobalColor | int = ...
        antiquewhite: QColor | QtCore.Qt.GlobalColor | int = ...
        aqua: QColor | QtCore.Qt.GlobalColor | int = ...
        aquamarine: QColor | QtCore.Qt.GlobalColor | int = ...
        azure: QColor | QtCore.Qt.GlobalColor | int = ...
        beige: QColor | QtCore.Qt.GlobalColor | int = ...
        bisque: QColor | QtCore.Qt.GlobalColor | int = ...
        black: QColor | QtCore.Qt.GlobalColor | int = ...
        blanchedalmond: QColor | QtCore.Qt.GlobalColor | int = ...
        blue: QColor | QtCore.Qt.GlobalColor | int = ...
        blueviolet: QColor | QtCore.Qt.GlobalColor | int = ...
        brown: QColor | QtCore.Qt.GlobalColor | int = ...
        burlywood: QColor | QtCore.Qt.GlobalColor | int = ...
        cadetblue: QColor | QtCore.Qt.GlobalColor | int = ...
        chartreuse: QColor | QtCore.Qt.GlobalColor | int = ...
        chocolate: QColor | QtCore.Qt.GlobalColor | int = ...
        coral: QColor | QtCore.Qt.GlobalColor | int = ...
        cornflowerblue: QColor | QtCore.Qt.GlobalColor | int = ...
        cornsilk: QColor | QtCore.Qt.GlobalColor | int = ...
        crimson: QColor | QtCore.Qt.GlobalColor | int = ...
        cyan: QColor | QtCore.Qt.GlobalColor | int = ...
        darkblue: QColor | QtCore.Qt.GlobalColor | int = ...
        darkcyan: QColor | QtCore.Qt.GlobalColor | int = ...
        darkgoldenrod: QColor | QtCore.Qt.GlobalColor | int = ...
        darkgray: QColor | QtCore.Qt.GlobalColor | int = ...
        darkgreen: QColor | QtCore.Qt.GlobalColor | int = ...
        darkgrey: QColor | QtCore.Qt.GlobalColor | int = ...
        darkkhaki: QColor | QtCore.Qt.GlobalColor | int = ...
        darkmagenta: QColor | QtCore.Qt.GlobalColor | int = ...
        darkolivegreen: QColor | QtCore.Qt.GlobalColor | int = ...
        darkorange: QColor | QtCore.Qt.GlobalColor | int = ...
        darkorchid: QColor | QtCore.Qt.GlobalColor | int = ...
        darkred: QColor | QtCore.Qt.GlobalColor | int = ...
        darksalmon: QColor | QtCore.Qt.GlobalColor | int = ...
        darkseagreen: QColor | QtCore.Qt.GlobalColor | int = ...
        darkslateblue: QColor | QtCore.Qt.GlobalColor | int = ...
        darkslategray: QColor | QtCore.Qt.GlobalColor | int = ...
        darkslategrey: QColor | QtCore.Qt.GlobalColor | int = ...
        darkturquoise: QColor | QtCore.Qt.GlobalColor | int = ...
        darkviolet: QColor | QtCore.Qt.GlobalColor | int = ...
        deeppink: QColor | QtCore.Qt.GlobalColor | int = ...
        deepskyblue: QColor | QtCore.Qt.GlobalColor | int = ...
        dimgray: QColor | QtCore.Qt.GlobalColor | int = ...
        dimgrey: QColor | QtCore.Qt.GlobalColor | int = ...
        dodgerblue: QColor | QtCore.Qt.GlobalColor | int = ...
        firebrick: QColor | QtCore.Qt.GlobalColor | int = ...
        floralwhite: QColor | QtCore.Qt.GlobalColor | int = ...
        forestgreen: QColor | QtCore.Qt.GlobalColor | int = ...
        fuchsia: QColor | QtCore.Qt.GlobalColor | int = ...
        gainsboro: QColor | QtCore.Qt.GlobalColor | int = ...
        ghostwhite: QColor | QtCore.Qt.GlobalColor | int = ...
        gold: QColor | QtCore.Qt.GlobalColor | int = ...
        goldenrod: QColor | QtCore.Qt.GlobalColor | int = ...
        gray: QColor | QtCore.Qt.GlobalColor | int = ...
        green: QColor | QtCore.Qt.GlobalColor | int = ...
        greenyellow: QColor | QtCore.Qt.GlobalColor | int = ...
        grey: QColor | QtCore.Qt.GlobalColor | int = ...
        honeydew: QColor | QtCore.Qt.GlobalColor | int = ...
        hotpink: QColor | QtCore.Qt.GlobalColor | int = ...
        indianred: QColor | QtCore.Qt.GlobalColor | int = ...
        indigo: QColor | QtCore.Qt.GlobalColor | int = ...
        ivory: QColor | QtCore.Qt.GlobalColor | int = ...
        khaki: QColor | QtCore.Qt.GlobalColor | int = ...
        lavender: QColor | QtCore.Qt.GlobalColor | int = ...
        lavenderblush: QColor | QtCore.Qt.GlobalColor | int = ...
        lawngreen: QColor | QtCore.Qt.GlobalColor | int = ...
        lemonchiffon: QColor | QtCore.Qt.GlobalColor | int = ...
        lightblue: QColor | QtCore.Qt.GlobalColor | int = ...
        lightcoral: QColor | QtCore.Qt.GlobalColor | int = ...
        lightcyan: QColor | QtCore.Qt.GlobalColor | int = ...
        lightgoldenrodyellow: QColor | QtCore.Qt.GlobalColor | int = ...
        lightgray: QColor | QtCore.Qt.GlobalColor | int = ...
        lightgreen: QColor | QtCore.Qt.GlobalColor | int = ...
        lightgrey: QColor | QtCore.Qt.GlobalColor | int = ...
        lightpink: QColor | QtCore.Qt.GlobalColor | int = ...
        lightsalmon: QColor | QtCore.Qt.GlobalColor | int = ...
        lightseagreen: QColor | QtCore.Qt.GlobalColor | int = ...
        lightskyblue: QColor | QtCore.Qt.GlobalColor | int = ...
        lightslategray: QColor | QtCore.Qt.GlobalColor | int = ...
        lightslategrey: QColor | QtCore.Qt.GlobalColor | int = ...
        lightsteelblue: QColor | QtCore.Qt.GlobalColor | int = ...
        lightyellow: QColor | QtCore.Qt.GlobalColor | int = ...
        lime: QColor | QtCore.Qt.GlobalColor | int = ...
        limegreen: QColor | QtCore.Qt.GlobalColor | int = ...
        linen: QColor | QtCore.Qt.GlobalColor | int = ...
        magenta: QColor | QtCore.Qt.GlobalColor | int = ...
        maroon: QColor | QtCore.Qt.GlobalColor | int = ...
        mediumaquamarine: QColor | QtCore.Qt.GlobalColor | int = ...
        mediumblue: QColor | QtCore.Qt.GlobalColor | int = ...
        mediumorchid: QColor | QtCore.Qt.GlobalColor | int = ...
        mediumpurple: QColor | QtCore.Qt.GlobalColor | int = ...
        mediumseagreen: QColor | QtCore.Qt.GlobalColor | int = ...
        mediumslateblue: QColor | QtCore.Qt.GlobalColor | int = ...
        mediumspringgreen: QColor | QtCore.Qt.GlobalColor | int = ...
        mediumturquoise: QColor | QtCore.Qt.GlobalColor | int = ...
        mediumvioletred: QColor | QtCore.Qt.GlobalColor | int = ...
        midnightblue: QColor | QtCore.Qt.GlobalColor | int = ...
        mintcream: QColor | QtCore.Qt.GlobalColor | int = ...
        mistyrose: QColor | QtCore.Qt.GlobalColor | int = ...
        moccasin: QColor | QtCore.Qt.GlobalColor | int = ...
        navajowhite: QColor | QtCore.Qt.GlobalColor | int = ...
        navy: QColor | QtCore.Qt.GlobalColor | int = ...
        oldlace: QColor | QtCore.Qt.GlobalColor | int = ...
        olive: QColor | QtCore.Qt.GlobalColor | int = ...
        olivedrab: QColor | QtCore.Qt.GlobalColor | int = ...
        orange: QColor | QtCore.Qt.GlobalColor | int = ...
        orangered: QColor | QtCore.Qt.GlobalColor | int = ...
        orchid: QColor | QtCore.Qt.GlobalColor | int = ...
        palegoldenrod: QColor | QtCore.Qt.GlobalColor | int = ...
        palegreen: QColor | QtCore.Qt.GlobalColor | int = ...
        paleturquoise: QColor | QtCore.Qt.GlobalColor | int = ...
        palevioletred: QColor | QtCore.Qt.GlobalColor | int = ...
        papayawhip: QColor | QtCore.Qt.GlobalColor | int = ...
        peachpuff: QColor | QtCore.Qt.GlobalColor | int = ...
        peru: QColor | QtCore.Qt.GlobalColor | int = ...
        pink: QColor | QtCore.Qt.GlobalColor | int = ...
        plum: QColor | QtCore.Qt.GlobalColor | int = ...
        powderblue: QColor | QtCore.Qt.GlobalColor | int = ...
        purple: QColor | QtCore.Qt.GlobalColor | int = ...
        red: QColor | QtCore.Qt.GlobalColor | int = ...
        rosybrown: QColor | QtCore.Qt.GlobalColor | int = ...
        royalblue: QColor | QtCore.Qt.GlobalColor | int = ...
        saddlebrown: QColor | QtCore.Qt.GlobalColor | int = ...
        salmon: QColor | QtCore.Qt.GlobalColor | int = ...
        sandybrown: QColor | QtCore.Qt.GlobalColor | int = ...
        seagreen: QColor | QtCore.Qt.GlobalColor | int = ...
        seashell: QColor | QtCore.Qt.GlobalColor | int = ...
        sienna: QColor | QtCore.Qt.GlobalColor | int = ...
        silver: QColor | QtCore.Qt.GlobalColor | int = ...
        skyblue: QColor | QtCore.Qt.GlobalColor | int = ...
        slateblue: QColor | QtCore.Qt.GlobalColor | int = ...
        slategray: QColor | QtCore.Qt.GlobalColor | int = ...
        slategrey: QColor | QtCore.Qt.GlobalColor | int = ...
        snow: QColor | QtCore.Qt.GlobalColor | int = ...
        springgreen: QColor | QtCore.Qt.GlobalColor | int = ...
        steelblue: QColor | QtCore.Qt.GlobalColor | int = ...
        tan: QColor | QtCore.Qt.GlobalColor | int = ...
        teal: QColor | QtCore.Qt.GlobalColor | int = ...
        thistle: QColor | QtCore.Qt.GlobalColor | int = ...
        tomato: QColor | QtCore.Qt.GlobalColor | int = ...
        turquoise: QColor | QtCore.Qt.GlobalColor | int = ...
        violet: QColor | QtCore.Qt.GlobalColor | int = ...
        wheat: QColor | QtCore.Qt.GlobalColor | int = ...
        white: QColor | QtCore.Qt.GlobalColor | int = ...
        whitesmoke: QColor | QtCore.Qt.GlobalColor | int = ...
        yellow: QColor | QtCore.Qt.GlobalColor | int = ...
        yellowgreen: QColor | QtCore.Qt.GlobalColor | int = ...

    Black: QColor | QtCore.Qt.GlobalColor | int = ...
    Blue: QColor | QtCore.Qt.GlobalColor | int = ...
    Color0: QColor | QtCore.Qt.GlobalColor | int = ...
    Color1: QColor | QtCore.Qt.GlobalColor | int = ...
    Cyan: QColor | QtCore.Qt.GlobalColor | int = ...
    DarkBlue: QColor | QtCore.Qt.GlobalColor | int = ...
    DarkCyan: QColor | QtCore.Qt.GlobalColor | int = ...
    DarkGray: QColor | QtCore.Qt.GlobalColor | int = ...
    DarkGreen: QColor | QtCore.Qt.GlobalColor | int = ...
    DarkMagenta: QColor | QtCore.Qt.GlobalColor | int = ...
    DarkRed: QColor | QtCore.Qt.GlobalColor | int = ...
    DarkYellow: QColor | QtCore.Qt.GlobalColor | int = ...
    Gray: QColor | QtCore.Qt.GlobalColor | int = ...
    Green: QColor | QtCore.Qt.GlobalColor | int = ...
    LightGray: QColor | QtCore.Qt.GlobalColor | int = ...
    Magenta: QColor | QtCore.Qt.GlobalColor | int = ...
    Red: QColor | QtCore.Qt.GlobalColor | int = ...
    Transparent: QColor | QtCore.Qt.GlobalColor | int = ...
    White: QColor | QtCore.Qt.GlobalColor | int = ...
    Yellow: QColor | QtCore.Qt.GlobalColor | int = ...

class QBrush(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, bs: QtCore.Qt.BrushStyle) -> None: ...
    @typing.overload
    def __init__(
        self,
        color: QColor | QtCore.Qt.GlobalColor | int,
        style: QtCore.Qt.BrushStyle = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self, color: QColor | QtCore.Qt.GlobalColor | int, pixmap: QPixmap
    ) -> None: ...
    @typing.overload
    def __init__(self, pixmap: QPixmap) -> None: ...
    @typing.overload
    def __init__(self, image: QImage) -> None: ...
    @typing.overload
    def __init__(
        self, brush: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient
    ) -> None: ...
    @typing.overload
    def __init__(self, variant: typing.Any) -> None: ...
    def swap(self, other: QBrush) -> None: ...
    def transform(self) -> QTransform: ...
    def setTransform(self, a0: QTransform) -> None: ...
    def textureImage(self) -> QImage: ...
    def setTextureImage(self, image: QImage) -> None: ...
    def color(self) -> QColor: ...
    def style(self) -> QtCore.Qt.BrushStyle: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def isOpaque(self) -> bool: ...
    def gradient(self) -> QGradient | None: ...
    @typing.overload
    def setColor(
        self, color: QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    @typing.overload
    def setColor(self, acolor: QtCore.Qt.GlobalColor) -> None: ...
    def setTexture(self, pixmap: QPixmap) -> None: ...
    def texture(self) -> QPixmap: ...
    def setStyle(self, a0: QtCore.Qt.BrushStyle) -> None: ...

class QGradient(PyQt6.sip.simplewrapper):
    class Preset(enum.Enum):
        WarmFlame = ...
        NightFade = ...
        SpringWarmth = ...
        JuicyPeach = ...
        YoungPassion = ...
        LadyLips = ...
        SunnyMorning = ...
        RainyAshville = ...
        FrozenDreams = ...
        WinterNeva = ...
        DustyGrass = ...
        TemptingAzure = ...
        HeavyRain = ...
        AmyCrisp = ...
        MeanFruit = ...
        DeepBlue = ...
        RipeMalinka = ...
        CloudyKnoxville = ...
        MalibuBeach = ...
        NewLife = ...
        TrueSunset = ...
        MorpheusDen = ...
        RareWind = ...
        NearMoon = ...
        WildApple = ...
        SaintPetersburg = ...
        PlumPlate = ...
        EverlastingSky = ...
        HappyFisher = ...
        Blessing = ...
        SharpeyeEagle = ...
        LadogaBottom = ...
        LemonGate = ...
        ItmeoBranding = ...
        ZeusMiracle = ...
        OldHat = ...
        StarWine = ...
        HappyAcid = ...
        AwesomePine = ...
        NewYork = ...
        ShyRainbow = ...
        MixedHopes = ...
        FlyHigh = ...
        StrongBliss = ...
        FreshMilk = ...
        SnowAgain = ...
        FebruaryInk = ...
        KindSteel = ...
        SoftGrass = ...
        GrownEarly = ...
        SharpBlues = ...
        ShadyWater = ...
        DirtyBeauty = ...
        GreatWhale = ...
        TeenNotebook = ...
        PoliteRumors = ...
        SweetPeriod = ...
        WideMatrix = ...
        SoftCherish = ...
        RedSalvation = ...
        BurningSpring = ...
        NightParty = ...
        SkyGlider = ...
        HeavenPeach = ...
        PurpleDivision = ...
        AquaSplash = ...
        SpikyNaga = ...
        LoveKiss = ...
        CleanMirror = ...
        PremiumDark = ...
        ColdEvening = ...
        CochitiLake = ...
        SummerGames = ...
        PassionateBed = ...
        MountainRock = ...
        DesertHump = ...
        JungleDay = ...
        PhoenixStart = ...
        OctoberSilence = ...
        FarawayRiver = ...
        AlchemistLab = ...
        OverSun = ...
        PremiumWhite = ...
        MarsParty = ...
        EternalConstance = ...
        JapanBlush = ...
        SmilingRain = ...
        CloudyApple = ...
        BigMango = ...
        HealthyWater = ...
        AmourAmour = ...
        RiskyConcrete = ...
        StrongStick = ...
        ViciousStance = ...
        PaloAlto = ...
        HappyMemories = ...
        MidnightBloom = ...
        Crystalline = ...
        PartyBliss = ...
        ConfidentCloud = ...
        LeCocktail = ...
        RiverCity = ...
        FrozenBerry = ...
        ChildCare = ...
        FlyingLemon = ...
        NewRetrowave = ...
        HiddenJaguar = ...
        AboveTheSky = ...
        Nega = ...
        DenseWater = ...
        Seashore = ...
        MarbleWall = ...
        CheerfulCaramel = ...
        NightSky = ...
        MagicLake = ...
        YoungGrass = ...
        ColorfulPeach = ...
        GentleCare = ...
        PlumBath = ...
        HappyUnicorn = ...
        AfricanField = ...
        SolidStone = ...
        OrangeJuice = ...
        GlassWater = ...
        NorthMiracle = ...
        FruitBlend = ...
        MillenniumPine = ...
        HighFlight = ...
        MoleHall = ...
        SpaceShift = ...
        ForestInei = ...
        RoyalGarden = ...
        RichMetal = ...
        JuicyCake = ...
        SmartIndigo = ...
        SandStrike = ...
        NorseBeauty = ...
        AquaGuidance = ...
        SunVeggie = ...
        SeaLord = ...
        BlackSea = ...
        GrassShampoo = ...
        LandingAircraft = ...
        WitchDance = ...
        SleeplessNight = ...
        AngelCare = ...
        CrystalRiver = ...
        SoftLipstick = ...
        SaltMountain = ...
        PerfectWhite = ...
        FreshOasis = ...
        StrictNovember = ...
        MorningSalad = ...
        DeepRelief = ...
        SeaStrike = ...
        NightCall = ...
        SupremeSky = ...
        LightBlue = ...
        MindCrawl = ...
        LilyMeadow = ...
        SugarLollipop = ...
        SweetDessert = ...
        MagicRay = ...
        TeenParty = ...
        FrozenHeat = ...
        GagarinView = ...
        FabledSunset = ...
        PerfectBlue = ...
        NumPresets = ...

    class Spread(enum.Enum):
        PadSpread = ...
        ReflectSpread = ...
        RepeatSpread = ...

    class Type(enum.Enum):
        LinearGradient = ...
        RadialGradient = ...
        ConicalGradient = ...
        NoGradient = ...

    class CoordinateMode(enum.Enum):
        LogicalMode = ...
        StretchToDeviceMode = ...
        ObjectBoundingMode = ...
        ObjectMode = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QGradient.Preset) -> None: ...
    @typing.overload
    def __init__(self, a0: QGradient) -> None: ...
    def setCoordinateMode(self, mode: QGradient.CoordinateMode) -> None: ...
    def coordinateMode(self) -> QGradient.CoordinateMode: ...
    def setSpread(self, aspread: QGradient.Spread) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def stops(self) -> list[tuple[float, QColor]]: ...
    def setStops(
        self,
        stops: collections.abc.Iterable[
            tuple[float, QColor | QtCore.Qt.GlobalColor | int]
        ],
    ) -> None: ...
    def setColorAt(
        self, pos: float, color: QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def spread(self) -> QGradient.Spread: ...
    def type(self) -> QGradient.Type: ...

class QLinearGradient(QGradient):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, start: QtCore.QPointF, finalStop: QtCore.QPointF
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        xStart: float,
        yStart: float,
        xFinalStop: float,
        yFinalStop: float,
    ) -> None: ...
    @typing.overload
    def __init__(self, a0: QLinearGradient) -> None: ...
    @typing.overload
    def setFinalStop(self, stop: QtCore.QPointF) -> None: ...
    @typing.overload
    def setFinalStop(self, x: float, y: float) -> None: ...
    @typing.overload
    def setStart(self, start: QtCore.QPointF) -> None: ...
    @typing.overload
    def setStart(self, x: float, y: float) -> None: ...
    def finalStop(self) -> QtCore.QPointF: ...
    def start(self) -> QtCore.QPointF: ...

class QRadialGradient(QGradient):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, center: QtCore.QPointF, radius: float, focalPoint: QtCore.QPointF
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        center: QtCore.QPointF,
        centerRadius: float,
        focalPoint: QtCore.QPointF,
        focalRadius: float,
    ) -> None: ...
    @typing.overload
    def __init__(self, center: QtCore.QPointF, radius: float) -> None: ...
    @typing.overload
    def __init__(
        self, cx: float, cy: float, radius: float, fx: float, fy: float
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        cx: float,
        cy: float,
        centerRadius: float,
        fx: float,
        fy: float,
        focalRadius: float,
    ) -> None: ...
    @typing.overload
    def __init__(self, cx: float, cy: float, radius: float) -> None: ...
    @typing.overload
    def __init__(self, a0: QRadialGradient) -> None: ...
    def setFocalRadius(self, radius: float) -> None: ...
    def focalRadius(self) -> float: ...
    def setCenterRadius(self, radius: float) -> None: ...
    def centerRadius(self) -> float: ...
    def setRadius(self, radius: float) -> None: ...
    @typing.overload
    def setFocalPoint(self, focalPoint: QtCore.QPointF) -> None: ...
    @typing.overload
    def setFocalPoint(self, x: float, y: float) -> None: ...
    @typing.overload
    def setCenter(self, center: QtCore.QPointF) -> None: ...
    @typing.overload
    def setCenter(self, x: float, y: float) -> None: ...
    def radius(self) -> float: ...
    def focalPoint(self) -> QtCore.QPointF: ...
    def center(self) -> QtCore.QPointF: ...

class QConicalGradient(QGradient):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, center: QtCore.QPointF, startAngle: float) -> None: ...
    @typing.overload
    def __init__(self, cx: float, cy: float, startAngle: float) -> None: ...
    @typing.overload
    def __init__(self, a0: QConicalGradient) -> None: ...
    def setAngle(self, angle: float) -> None: ...
    @typing.overload
    def setCenter(self, center: QtCore.QPointF) -> None: ...
    @typing.overload
    def setCenter(self, x: float, y: float) -> None: ...
    def angle(self) -> float: ...
    def center(self) -> QtCore.QPointF: ...

class QClipboard(QtCore.QObject):
    class Mode(enum.Enum):
        Clipboard = ...
        Selection = ...
        FindBuffer = ...

    selectionChanged: typing.ClassVar[QtCore.pyqtSignal]
    findBufferChanged: typing.ClassVar[QtCore.pyqtSignal]
    dataChanged: typing.ClassVar[QtCore.pyqtSignal]
    changed: typing.ClassVar[QtCore.pyqtSignal]
    def setPixmap(self, a0: QPixmap, mode: QClipboard.Mode = ...) -> None: ...
    def setImage(self, a0: QImage, mode: QClipboard.Mode = ...) -> None: ...
    def pixmap(self, mode: QClipboard.Mode = ...) -> QPixmap: ...
    def image(self, mode: QClipboard.Mode = ...) -> QImage: ...
    def setMimeData(
        self, data: QtCore.QMimeData | None, mode: QClipboard.Mode = ...
    ) -> None: ...
    def mimeData(
        self, mode: QClipboard.Mode = ...
    ) -> QtCore.QMimeData | None: ...
    def setText(self, a0: str | None, mode: QClipboard.Mode = ...) -> None: ...
    @typing.overload
    def text(self, mode: QClipboard.Mode = ...) -> str: ...
    @typing.overload
    def text(
        self, subtype: str | None, mode: QClipboard.Mode = ...
    ) -> tuple[str, str]: ...
    def ownsSelection(self) -> bool: ...
    def ownsFindBuffer(self) -> bool: ...
    def ownsClipboard(self) -> bool: ...
    def supportsSelection(self) -> bool: ...
    def supportsFindBuffer(self) -> bool: ...
    def clear(self, mode: QClipboard.Mode = ...) -> None: ...

class QColorSpace(PyQt6.sip.simplewrapper):
    class TransformModel(enum.Enum):
        ThreeComponentMatrix = ...
        ElementListProcessing = ...

    class TransferFunction(enum.Enum):
        Custom = ...
        Linear = ...
        Gamma = ...
        SRgb = ...
        ProPhotoRgb = ...
        Bt2020 = ...
        St2084 = ...
        Hlg = ...

    class Primaries(enum.Enum):
        Custom = ...
        SRgb = ...
        AdobeRgb = ...
        DciP3D65 = ...
        ProPhotoRgb = ...
        Bt2020 = ...

    class NamedColorSpace(enum.Enum):
        SRgb = ...
        SRgbLinear = ...
        AdobeRgb = ...
        DisplayP3 = ...
        ProPhotoRgb = ...
        Bt2020 = ...
        Bt2100Pq = ...
        Bt2100Hlg = ...

    class ColorModel(enum.Enum):
        Undefined = ...
        Rgb = ...
        Gray = ...
        Cmyk = ...

    class PrimaryPoints(PyQt6.sip.simplewrapper):
        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: QColorSpace.PrimaryPoints) -> None: ...
        def isValid(self) -> bool: ...
        @staticmethod
        def fromPrimaries(
            primaries: QColorSpace.Primaries,
        ) -> QColorSpace.PrimaryPoints: ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, namedColorSpace: QColorSpace.NamedColorSpace
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        primaries: QColorSpace.Primaries,
        fun: QColorSpace.TransferFunction,
        gamma: float = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self, primaries: QColorSpace.Primaries, gamma: float
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        primaries: QColorSpace.Primaries,
        transferFunctionTable: collections.abc.Iterable[int],
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        whitePoint: QtCore.QPointF,
        redPoint: QtCore.QPointF,
        greenPoint: QtCore.QPointF,
        bluePoint: QtCore.QPointF,
        fun: QColorSpace.TransferFunction,
        gamma: float = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        whitePoint: QtCore.QPointF,
        redPoint: QtCore.QPointF,
        greenPoint: QtCore.QPointF,
        bluePoint: QtCore.QPointF,
        redTransferFunctionTable: collections.abc.Iterable[int],
        greenTransferFunctionTable: collections.abc.Iterable[int],
        blueTransferFunctionTable: collections.abc.Iterable[int],
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        whitePoint: QtCore.QPointF,
        redPoint: QtCore.QPointF,
        greenPoint: QtCore.QPointF,
        bluePoint: QtCore.QPointF,
        transferFunctionTable: collections.abc.Iterable[int],
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        whitePoint: QtCore.QPointF,
        transferFunctionTable: collections.abc.Iterable[int],
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        whitePoint: QtCore.QPointF,
        transferFunction: QColorSpace.TransferFunction,
        gamma: float = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, colorSpace: QColorSpace) -> None: ...
    @typing.overload
    def __init__(
        self,
        primaryPoints: QColorSpace.PrimaryPoints,
        transferFunction: QColorSpace.TransferFunction,
        gamma: float = ...,
    ) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def primaryPoints(self) -> QColorSpace.PrimaryPoints: ...
    def setPrimaryPoints(
        self, primaryPoints: QColorSpace.PrimaryPoints
    ) -> None: ...
    def isValidTarget(self) -> bool: ...
    def colorModel(self) -> QColorSpace.ColorModel: ...
    def transformModel(self) -> QColorSpace.TransformModel: ...
    def whitePoint(self) -> QtCore.QPointF: ...
    def setWhitePoint(self, whitePoint: QtCore.QPointF) -> None: ...
    def setDescription(self, description: str | None) -> None: ...
    def description(self) -> str: ...
    def transformationToColorSpace(
        self, colorspace: QColorSpace
    ) -> QColorTransform: ...
    def iccProfile(self) -> QtCore.QByteArray: ...
    @staticmethod
    def fromIccProfile(
        iccProfile: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> QColorSpace: ...
    def isValid(self) -> bool: ...
    @typing.overload
    def setPrimaries(self, primariesId: QColorSpace.Primaries) -> None: ...
    @typing.overload
    def setPrimaries(
        self,
        whitePoint: QtCore.QPointF,
        redPoint: QtCore.QPointF,
        greenPoint: QtCore.QPointF,
        bluePoint: QtCore.QPointF,
    ) -> None: ...
    def withTransferFunctions(
        self,
        redTransferFunctionTable: collections.abc.Iterable[int],
        greenTransferFunctionTable: collections.abc.Iterable[int],
        blueTransferFunctionTable: collections.abc.Iterable[int],
    ) -> QColorSpace: ...
    @typing.overload
    def withTransferFunction(
        self, transferFunctionTable: collections.abc.Iterable[int]
    ) -> QColorSpace: ...
    @typing.overload
    def withTransferFunction(
        self,
        transferFunction: QColorSpace.TransferFunction,
        gamma: float = ...,
    ) -> QColorSpace: ...
    def setTransferFunctions(
        self,
        redTransferFunctionTable: collections.abc.Iterable[int],
        greenTransferFunctionTable: collections.abc.Iterable[int],
        blueTransferFunctionTable: collections.abc.Iterable[int],
    ) -> None: ...
    @typing.overload
    def setTransferFunction(
        self,
        transferFunction: QColorSpace.TransferFunction,
        gamma: float = ...,
    ) -> None: ...
    @typing.overload
    def setTransferFunction(
        self, transferFunctionTable: collections.abc.Iterable[int]
    ) -> None: ...
    def gamma(self) -> float: ...
    def transferFunction(self) -> QColorSpace.TransferFunction: ...
    def primaries(self) -> QColorSpace.Primaries: ...
    def swap(self, colorSpace: QColorSpace) -> None: ...

class QColorTransform(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, colorTransform: QColorTransform) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def isIdentity(self) -> bool: ...
    @typing.overload
    def map(self, argb: int) -> int: ...
    @typing.overload
    def map(self, rgba64: QRgba64) -> QRgba64: ...
    @typing.overload
    def map(self, color: QColor | QtCore.Qt.GlobalColor | int) -> QColor: ...
    def swap(self, other: QColorTransform) -> None: ...

class QCursor(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, bitmap: QBitmap, mask: QBitmap, hotX: int = ..., hotY: int = ...
    ) -> None: ...
    @typing.overload
    def __init__(
        self, pixmap: QPixmap, hotX: int = ..., hotY: int = ...
    ) -> None: ...
    @typing.overload
    def __init__(self, cursor: QCursor | QtCore.Qt.CursorShape) -> None: ...
    @typing.overload
    def __init__(self, variant: typing.Any) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def swap(self, other: QCursor | QtCore.Qt.CursorShape) -> None: ...
    @typing.overload
    @staticmethod
    def setPos(x: int, y: int) -> None: ...
    @typing.overload
    @staticmethod
    def setPos(p: QtCore.QPoint) -> None: ...
    @typing.overload
    @staticmethod
    def setPos(screen: QScreen | None, x: int, y: int) -> None: ...
    @typing.overload
    @staticmethod
    def setPos(screen: QScreen | None, p: QtCore.QPoint) -> None: ...
    @typing.overload
    @staticmethod
    def pos() -> QtCore.QPoint: ...
    @typing.overload
    @staticmethod
    def pos(screen: QScreen | None) -> QtCore.QPoint: ...
    def hotSpot(self) -> QtCore.QPoint: ...
    def pixmap(self) -> QPixmap: ...
    def mask(self) -> QBitmap: ...
    def bitmap(self) -> QBitmap: ...
    def setShape(self, newShape: QtCore.Qt.CursorShape) -> None: ...
    def shape(self) -> QtCore.Qt.CursorShape: ...

class QDesktopServices(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QDesktopServices) -> None: ...
    @staticmethod
    def unsetUrlHandler(scheme: str | None) -> None: ...
    @typing.overload
    @staticmethod
    def setUrlHandler(
        scheme: str | None, receiver: QtCore.QObject | None, method: str | None
    ) -> None: ...
    @typing.overload
    @staticmethod
    def setUrlHandler(
        scheme: str | None,
        method: collections.abc.Callable[[QtCore.QUrl], None],
    ) -> None: ...
    @staticmethod
    def openUrl(url: QtCore.QUrl) -> bool: ...

class QDrag(QtCore.QObject):
    def __init__(self, dragSource: QtCore.QObject | None) -> None: ...
    @staticmethod
    def cancel() -> None: ...
    def defaultAction(self) -> QtCore.Qt.DropAction: ...
    def supportedActions(self) -> QtCore.Qt.DropAction: ...
    def dragCursor(self, action: QtCore.Qt.DropAction) -> QPixmap: ...
    targetChanged: typing.ClassVar[QtCore.pyqtSignal]
    actionChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setDragCursor(
        self, cursor: QPixmap, action: QtCore.Qt.DropAction
    ) -> None: ...
    def target(self) -> QtCore.QObject | None: ...
    def source(self) -> QtCore.QObject | None: ...
    def hotSpot(self) -> QtCore.QPoint: ...
    def setHotSpot(self, hotspot: QtCore.QPoint) -> None: ...
    def pixmap(self) -> QPixmap: ...
    def setPixmap(self, a0: QPixmap) -> None: ...
    def mimeData(self) -> QtCore.QMimeData | None: ...
    def setMimeData(self, data: QtCore.QMimeData | None) -> None: ...
    @typing.overload
    def exec(
        self, supportedActions: QtCore.Qt.DropAction = ...
    ) -> QtCore.Qt.DropAction: ...
    @typing.overload
    def exec(
        self,
        supportedActions: QtCore.Qt.DropAction,
        defaultDropAction: QtCore.Qt.DropAction,
    ) -> QtCore.Qt.DropAction: ...

class QInputEvent(QtCore.QEvent):
    def clone(self) -> QInputEvent | None: ...
    def deviceType(self) -> QInputDevice.DeviceType: ...
    def device(self) -> QInputDevice | None: ...
    def timestamp(self) -> int: ...
    def modifiers(self) -> QtCore.Qt.KeyboardModifier: ...

class QKeyEvent(QInputEvent):
    @typing.overload
    def __init__(
        self,
        type: QtCore.QEvent.Type,
        key: int,
        modifiers: QtCore.Qt.KeyboardModifier,
        nativeScanCode: int,
        nativeVirtualKey: int,
        nativeModifiers: int,
        text: str | None = ...,
        autorep: bool = ...,
        count: int = ...,
        device: QInputDevice | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        type: QtCore.QEvent.Type,
        key: int,
        modifiers: QtCore.Qt.KeyboardModifier,
        text: str | None = ...,
        autorep: bool = ...,
        count: int = ...,
    ) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def clone(self) -> QKeyEvent | None: ...
    def keyCombination(self) -> QtCore.QKeyCombination: ...
    def nativeVirtualKey(self) -> int: ...
    def nativeScanCode(self) -> int: ...
    def nativeModifiers(self) -> int: ...
    def matches(self, key: QKeySequence.StandardKey) -> bool: ...
    def __len__(self) -> int: ...
    def count(self) -> int: ...
    def isAutoRepeat(self) -> bool: ...
    def text(self) -> str: ...
    def modifiers(self) -> QtCore.Qt.KeyboardModifier: ...
    def key(self) -> int: ...

class QFocusEvent(QtCore.QEvent):
    def __init__(
        self, type: QtCore.QEvent.Type, reason: QtCore.Qt.FocusReason = ...
    ) -> None: ...
    def clone(self) -> QFocusEvent | None: ...
    def reason(self) -> QtCore.Qt.FocusReason: ...
    def lostFocus(self) -> bool: ...
    def gotFocus(self) -> bool: ...

class QPaintEvent(QtCore.QEvent):
    @typing.overload
    def __init__(self, paintRegion: QRegion) -> None: ...
    @typing.overload
    def __init__(self, paintRect: QtCore.QRect) -> None: ...
    def clone(self) -> QPaintEvent | None: ...
    def region(self) -> QRegion: ...
    def rect(self) -> QtCore.QRect: ...

class QMoveEvent(QtCore.QEvent):
    def __init__(self, pos: QtCore.QPoint, oldPos: QtCore.QPoint) -> None: ...
    def clone(self) -> QMoveEvent | None: ...
    def oldPos(self) -> QtCore.QPoint: ...
    def pos(self) -> QtCore.QPoint: ...

class QResizeEvent(QtCore.QEvent):
    def __init__(self, size: QtCore.QSize, oldSize: QtCore.QSize) -> None: ...
    def clone(self) -> QResizeEvent | None: ...
    def oldSize(self) -> QtCore.QSize: ...
    def size(self) -> QtCore.QSize: ...

class QCloseEvent(QtCore.QEvent):
    def __init__(self) -> None: ...
    def clone(self) -> QCloseEvent | None: ...

class QIconDragEvent(QtCore.QEvent):
    def __init__(self) -> None: ...
    def clone(self) -> QIconDragEvent | None: ...

class QShowEvent(QtCore.QEvent):
    def __init__(self) -> None: ...
    def clone(self) -> QShowEvent | None: ...

class QHideEvent(QtCore.QEvent):
    def __init__(self) -> None: ...
    def clone(self) -> QHideEvent | None: ...

class QContextMenuEvent(QInputEvent):
    class Reason(enum.Enum):
        Mouse = ...
        Keyboard = ...
        Other = ...

    @typing.overload
    def __init__(
        self,
        reason: QContextMenuEvent.Reason,
        pos: QtCore.QPoint,
        globalPos: QtCore.QPoint,
        modifiers: QtCore.Qt.KeyboardModifier = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self, reason: QContextMenuEvent.Reason, pos: QtCore.QPoint
    ) -> None: ...
    def clone(self) -> QContextMenuEvent | None: ...
    def reason(self) -> QContextMenuEvent.Reason: ...
    def globalPos(self) -> QtCore.QPoint: ...
    def pos(self) -> QtCore.QPoint: ...
    def globalY(self) -> int: ...
    def globalX(self) -> int: ...
    def y(self) -> int: ...
    def x(self) -> int: ...

class QInputMethodEvent(QtCore.QEvent):
    class AttributeType(enum.Enum):
        TextFormat = ...
        Cursor = ...
        Language = ...
        Ruby = ...
        Selection = ...

    class Attribute(PyQt6.sip.simplewrapper):
        length: int = ...
        start: int = ...
        type: QInputMethodEvent.AttributeType = ...
        value: typing.Any = ...

        @typing.overload
        def __init__(
            self,
            t: QInputMethodEvent.AttributeType,
            s: int,
            l: int,
            val: typing.Any,
        ) -> None: ...
        @typing.overload
        def __init__(
            self, typ: QInputMethodEvent.AttributeType, s: int, l: int
        ) -> None: ...
        @typing.overload
        def __init__(self, a0: QInputMethodEvent.Attribute) -> None: ...
        def __ne__(self, other: object) -> bool: ...
        def __eq__(self, other: object) -> bool: ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self,
        preeditText: str | None,
        attributes: collections.abc.Iterable[QInputMethodEvent.Attribute],
    ) -> None: ...
    def clone(self) -> QInputMethodEvent | None: ...
    def replacementLength(self) -> int: ...
    def replacementStart(self) -> int: ...
    def commitString(self) -> str: ...
    def preeditString(self) -> str: ...
    def attributes(self) -> list[QInputMethodEvent.Attribute]: ...
    def setCommitString(
        self, commitString: str | None, from_: int = ..., length: int = ...
    ) -> None: ...

class QInputMethodQueryEvent(QtCore.QEvent):
    def __init__(self, queries: QtCore.Qt.InputMethodQuery) -> None: ...
    def clone(self) -> QInputMethodQueryEvent | None: ...
    def value(self, query: QtCore.Qt.InputMethodQuery) -> typing.Any: ...
    def setValue(
        self, query: QtCore.Qt.InputMethodQuery, value: typing.Any
    ) -> None: ...
    def queries(self) -> QtCore.Qt.InputMethodQuery: ...

class QDropEvent(QtCore.QEvent):
    def __init__(
        self,
        pos: QtCore.QPointF,
        actions: QtCore.Qt.DropAction,
        data: QtCore.QMimeData | None,
        buttons: QtCore.Qt.MouseButton,
        modifiers: QtCore.Qt.KeyboardModifier,
        type: QtCore.QEvent.Type = ...,
    ) -> None: ...
    def clone(self) -> QDropEvent | None: ...
    def modifiers(self) -> QtCore.Qt.KeyboardModifier: ...
    def buttons(self) -> QtCore.Qt.MouseButton: ...
    def position(self) -> QtCore.QPointF: ...
    def mimeData(self) -> QtCore.QMimeData | None: ...
    def source(self) -> QtCore.QObject | None: ...
    def setDropAction(self, action: QtCore.Qt.DropAction) -> None: ...
    def dropAction(self) -> QtCore.Qt.DropAction: ...
    def acceptProposedAction(self) -> None: ...
    def proposedAction(self) -> QtCore.Qt.DropAction: ...
    def possibleActions(self) -> QtCore.Qt.DropAction: ...

class QDragMoveEvent(QDropEvent):
    def __init__(
        self,
        pos: QtCore.QPoint,
        actions: QtCore.Qt.DropAction,
        data: QtCore.QMimeData | None,
        buttons: QtCore.Qt.MouseButton,
        modifiers: QtCore.Qt.KeyboardModifier,
        type: QtCore.QEvent.Type = ...,
    ) -> None: ...
    def clone(self) -> QDragMoveEvent | None: ...
    @typing.overload
    def ignore(self) -> None: ...
    @typing.overload
    def ignore(self, r: QtCore.QRect) -> None: ...
    @typing.overload
    def accept(self) -> None: ...
    @typing.overload
    def accept(self, r: QtCore.QRect) -> None: ...
    def answerRect(self) -> QtCore.QRect: ...

class QDragEnterEvent(QDragMoveEvent):
    def __init__(
        self,
        pos: QtCore.QPoint,
        actions: QtCore.Qt.DropAction,
        data: QtCore.QMimeData | None,
        buttons: QtCore.Qt.MouseButton,
        modifiers: QtCore.Qt.KeyboardModifier,
    ) -> None: ...
    def clone(self) -> QDragEnterEvent | None: ...

class QDragLeaveEvent(QtCore.QEvent):
    def __init__(self) -> None: ...
    def clone(self) -> QDragLeaveEvent | None: ...

class QHelpEvent(QtCore.QEvent):
    def __init__(
        self,
        type: QtCore.QEvent.Type,
        pos: QtCore.QPoint,
        globalPos: QtCore.QPoint,
    ) -> None: ...
    def clone(self) -> QHelpEvent | None: ...
    def globalPos(self) -> QtCore.QPoint: ...
    def pos(self) -> QtCore.QPoint: ...
    def globalY(self) -> int: ...
    def globalX(self) -> int: ...
    def y(self) -> int: ...
    def x(self) -> int: ...

class QStatusTipEvent(QtCore.QEvent):
    def __init__(self, tip: str | None) -> None: ...
    def clone(self) -> QStatusTipEvent | None: ...
    def tip(self) -> str: ...

class QWhatsThisClickedEvent(QtCore.QEvent):
    def __init__(self, href: str | None) -> None: ...
    def clone(self) -> QWhatsThisClickedEvent | None: ...
    def href(self) -> str: ...

class QActionEvent(QtCore.QEvent):
    def __init__(
        self, type: int, action: QAction | None, before: QAction | None = ...
    ) -> None: ...
    def clone(self) -> QActionEvent | None: ...
    def before(self) -> QAction | None: ...
    def action(self) -> QAction | None: ...

class QFileOpenEvent(QtCore.QEvent):
    def clone(self) -> QFileOpenEvent | None: ...
    def openFile(
        self, file: QtCore.QFile, flags: QtCore.QIODeviceBase.OpenModeFlag
    ) -> bool: ...
    def url(self) -> QtCore.QUrl: ...
    def file(self) -> str: ...

class QShortcutEvent(QtCore.QEvent):
    @typing.overload
    def __init__(
        self,
        key: QKeySequence | QKeySequence.StandardKey | str | None | int,
        id: int,
        ambiguous: bool = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        key: QKeySequence | QKeySequence.StandardKey | str | None | int,
        shortcut: QShortcut | None = ...,
        ambiguous: bool = ...,
    ) -> None: ...
    def clone(self) -> QShortcutEvent | None: ...
    def shortcutId(self) -> int: ...
    def key(self) -> QKeySequence: ...
    def isAmbiguous(self) -> bool: ...

class QWindowStateChangeEvent(QtCore.QEvent):
    def clone(self) -> QWindowStateChangeEvent | None: ...
    def oldState(self) -> QtCore.Qt.WindowState: ...

class QExposeEvent(QtCore.QEvent):
    def __init__(self, rgn: QRegion) -> None: ...
    def clone(self) -> QExposeEvent | None: ...

class QScrollPrepareEvent(QtCore.QEvent):
    def __init__(self, startPos: QtCore.QPointF) -> None: ...
    def clone(self) -> QScrollPrepareEvent | None: ...
    def setContentPos(self, pos: QtCore.QPointF) -> None: ...
    def setContentPosRange(self, rect: QtCore.QRectF) -> None: ...
    def setViewportSize(self, size: QtCore.QSizeF) -> None: ...
    def contentPos(self) -> QtCore.QPointF: ...
    def contentPosRange(self) -> QtCore.QRectF: ...
    def viewportSize(self) -> QtCore.QSizeF: ...
    def startPos(self) -> QtCore.QPointF: ...

class QScrollEvent(QtCore.QEvent):
    class ScrollState(enum.Enum):
        ScrollStarted = ...
        ScrollUpdated = ...
        ScrollFinished = ...

    def __init__(
        self,
        contentPos: QtCore.QPointF,
        overshoot: QtCore.QPointF,
        scrollState: QScrollEvent.ScrollState,
    ) -> None: ...
    def clone(self) -> QScrollEvent | None: ...
    def scrollState(self) -> QScrollEvent.ScrollState: ...
    def overshootDistance(self) -> QtCore.QPointF: ...
    def contentPos(self) -> QtCore.QPointF: ...

class QPlatformSurfaceEvent(QtCore.QEvent):
    class SurfaceEventType(enum.Enum):
        SurfaceCreated = ...
        SurfaceAboutToBeDestroyed = ...

    def __init__(
        self, surfaceEventType: QPlatformSurfaceEvent.SurfaceEventType
    ) -> None: ...
    def clone(self) -> QPlatformSurfaceEvent | None: ...
    def surfaceEventType(self) -> QPlatformSurfaceEvent.SurfaceEventType: ...

class QPointerEvent(QInputEvent):
    def clone(self) -> QPointerEvent | None: ...
    def setAccepted(self, accepted: bool) -> None: ...
    def allPointsAccepted(self) -> bool: ...
    def isEndEvent(self) -> bool: ...
    def isUpdateEvent(self) -> bool: ...
    def isBeginEvent(self) -> bool: ...
    def pointById(self, id: int) -> QEventPoint | None: ...
    def points(self) -> list[QEventPoint]: ...
    def point(self, i: int) -> QEventPoint: ...
    def pointCount(self) -> int: ...
    def pointerType(self) -> QPointingDevice.PointerType: ...
    def pointingDevice(self) -> QPointingDevice | None: ...

class QSinglePointEvent(QPointerEvent):
    def clone(self) -> QSinglePointEvent | None: ...
    def setExclusivePointGrabber(
        self, exclusiveGrabber: QtCore.QObject | None
    ) -> None: ...
    def exclusivePointGrabber(self) -> QtCore.QObject | None: ...
    def isEndEvent(self) -> bool: ...
    def isUpdateEvent(self) -> bool: ...
    def isBeginEvent(self) -> bool: ...
    def globalPosition(self) -> QtCore.QPointF: ...
    def scenePosition(self) -> QtCore.QPointF: ...
    def position(self) -> QtCore.QPointF: ...
    def buttons(self) -> QtCore.Qt.MouseButton: ...
    def button(self) -> QtCore.Qt.MouseButton: ...

class QEnterEvent(QSinglePointEvent):
    def __init__(
        self,
        localPos: QtCore.QPointF,
        scenePos: QtCore.QPointF,
        globalPos: QtCore.QPointF,
        device: QPointingDevice | None = ...,
    ) -> None: ...
    def clone(self) -> QEnterEvent | None: ...

class QMouseEvent(QSinglePointEvent):
    @typing.overload
    def __init__(
        self,
        type: QtCore.QEvent.Type,
        localPos: QtCore.QPointF,
        button: QtCore.Qt.MouseButton,
        buttons: QtCore.Qt.MouseButton,
        modifiers: QtCore.Qt.KeyboardModifier,
        device: QPointingDevice | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        type: QtCore.QEvent.Type,
        localPos: QtCore.QPointF,
        globalPos: QtCore.QPointF,
        button: QtCore.Qt.MouseButton,
        buttons: QtCore.Qt.MouseButton,
        modifiers: QtCore.Qt.KeyboardModifier,
        device: QPointingDevice | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        type: QtCore.QEvent.Type,
        localPos: QtCore.QPointF,
        scenePos: QtCore.QPointF,
        globalPos: QtCore.QPointF,
        button: QtCore.Qt.MouseButton,
        buttons: QtCore.Qt.MouseButton,
        modifiers: QtCore.Qt.KeyboardModifier,
        device: QPointingDevice | None = ...,
    ) -> None: ...
    def clone(self) -> QMouseEvent | None: ...
    def flags(self) -> QtCore.Qt.MouseEventFlag: ...
    def pos(self) -> QtCore.QPoint: ...

class QHoverEvent(QSinglePointEvent):
    @typing.overload
    def __init__(
        self,
        type: QtCore.QEvent.Type,
        pos: QtCore.QPointF,
        globalPos: QtCore.QPointF,
        oldPos: QtCore.QPointF,
        modifiers: QtCore.Qt.KeyboardModifier = ...,
        device: QPointingDevice | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        type: QtCore.QEvent.Type,
        pos: QtCore.QPointF,
        oldPos: QtCore.QPointF,
        modifiers: QtCore.Qt.KeyboardModifier = ...,
        device: QPointingDevice | None = ...,
    ) -> None: ...
    def clone(self) -> QHoverEvent | None: ...
    def oldPosF(self) -> QtCore.QPointF: ...
    def oldPos(self) -> QtCore.QPoint: ...
    def isUpdateEvent(self) -> bool: ...

class QWheelEvent(QSinglePointEvent):
    def __init__(
        self,
        pos: QtCore.QPointF,
        globalPos: QtCore.QPointF,
        pixelDelta: QtCore.QPoint,
        angleDelta: QtCore.QPoint,
        buttons: QtCore.Qt.MouseButton,
        modifiers: QtCore.Qt.KeyboardModifier,
        phase: QtCore.Qt.ScrollPhase,
        inverted: bool,
        source: QtCore.Qt.MouseEventSource = ...,
        device: QPointingDevice | None = ...,
    ) -> None: ...
    def clone(self) -> QWheelEvent | None: ...
    def isEndEvent(self) -> bool: ...
    def isUpdateEvent(self) -> bool: ...
    def isBeginEvent(self) -> bool: ...
    def inverted(self) -> bool: ...
    def phase(self) -> QtCore.Qt.ScrollPhase: ...
    def angleDelta(self) -> QtCore.QPoint: ...
    def pixelDelta(self) -> QtCore.QPoint: ...

class QTabletEvent(QSinglePointEvent):
    def __init__(
        self,
        t: QtCore.QEvent.Type,
        device: QPointingDevice | None,
        pos: QtCore.QPointF,
        globalPos: QtCore.QPointF,
        pressure: float,
        xTilt: float,
        yTilt: float,
        tangentialPressure: float,
        rotation: float,
        z: float,
        keyState: QtCore.Qt.KeyboardModifier,
        button: QtCore.Qt.MouseButton,
        buttons: QtCore.Qt.MouseButton,
    ) -> None: ...
    def clone(self) -> QTabletEvent | None: ...
    def yTilt(self) -> float: ...
    def xTilt(self) -> float: ...
    def tangentialPressure(self) -> float: ...
    def z(self) -> float: ...
    def rotation(self) -> float: ...
    def pressure(self) -> float: ...

class QNativeGestureEvent(QSinglePointEvent):
    @typing.overload
    def __init__(
        self,
        type: QtCore.Qt.NativeGestureType,
        dev: QPointingDevice | None,
        fingerCount: int,
        localPos: QtCore.QPointF,
        scenePos: QtCore.QPointF,
        globalPos: QtCore.QPointF,
        value: float,
        delta: QtCore.QPointF,
        sequenceId: int = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        type: QtCore.Qt.NativeGestureType,
        dev: QPointingDevice | None,
        localPos: QtCore.QPointF,
        scenePos: QtCore.QPointF,
        globalPos: QtCore.QPointF,
        value: float,
        sequenceId: int,
        intArgument: int,
    ) -> None: ...
    def delta(self) -> QtCore.QPointF: ...
    def fingerCount(self) -> int: ...
    def clone(self) -> QNativeGestureEvent | None: ...
    def value(self) -> float: ...
    def gestureType(self) -> QtCore.Qt.NativeGestureType: ...

class QTouchEvent(QPointerEvent):
    def __init__(
        self,
        eventType: QtCore.QEvent.Type,
        device: QPointingDevice | None = ...,
        modifiers: QtCore.Qt.KeyboardModifier = ...,
        touchPoints: collections.abc.Iterable[QEventPoint] = ...,
    ) -> None: ...
    def clone(self) -> QTouchEvent | None: ...
    def isEndEvent(self) -> bool: ...
    def isUpdateEvent(self) -> bool: ...
    def isBeginEvent(self) -> bool: ...
    def touchPointStates(self) -> QEventPoint.State: ...
    def target(self) -> QtCore.QObject | None: ...

class QChildWindowEvent(QtCore.QEvent):
    def __init__(
        self, type: QtCore.QEvent.Type, childWindow: QWindow | None
    ) -> None: ...
    def clone(self) -> QChildWindowEvent | None: ...
    def child(self) -> QWindow | None: ...

class QEventPoint(PyQt6.sip.simplewrapper):
    class State(enum.Flag):
        Unknown = ...
        Stationary = ...
        Pressed = ...
        Updated = ...
        Released = ...

    @typing.overload
    def __init__(
        self,
        pointId: int,
        state: QEventPoint.State,
        scenePosition: QtCore.QPointF,
        globalPosition: QtCore.QPointF,
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QEventPoint) -> None: ...
    def setAccepted(self, accepted: bool = ...) -> None: ...
    def isAccepted(self) -> bool: ...
    def ellipseDiameters(self) -> QtCore.QSizeF: ...
    def rotation(self) -> float: ...
    def pressure(self) -> float: ...
    def timeHeld(self) -> float: ...
    def pressTimestamp(self) -> int: ...
    def lastTimestamp(self) -> int: ...
    def timestamp(self) -> int: ...
    def uniqueId(self) -> QPointingDeviceUniqueId: ...
    def id(self) -> int: ...
    def device(self) -> QPointingDevice | None: ...
    def state(self) -> QEventPoint.State: ...
    def velocity(self) -> QVector2D: ...
    def normalizedPosition(self) -> QtCore.QPointF: ...
    def globalLastPosition(self) -> QtCore.QPointF: ...
    def globalGrabPosition(self) -> QtCore.QPointF: ...
    def globalPressPosition(self) -> QtCore.QPointF: ...
    def globalPosition(self) -> QtCore.QPointF: ...
    def sceneLastPosition(self) -> QtCore.QPointF: ...
    def sceneGrabPosition(self) -> QtCore.QPointF: ...
    def scenePressPosition(self) -> QtCore.QPointF: ...
    def scenePosition(self) -> QtCore.QPointF: ...
    def lastPosition(self) -> QtCore.QPointF: ...
    def grabPosition(self) -> QtCore.QPointF: ...
    def pressPosition(self) -> QtCore.QPointF: ...
    def position(self) -> QtCore.QPointF: ...
    def swap(self, other: QEventPoint) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...

class QFileSystemModel(QtCore.QAbstractItemModel):
    class Option(enum.Flag):
        DontWatchForChanges = ...
        DontResolveSymlinks = ...
        DontUseCustomDirectoryIcons = ...

    class Roles(enum.IntEnum):
        FileIconRole = ...
        FilePathRole = ...
        FileNameRole = ...
        FilePermissions = ...
        FileInfoRole = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def roleNames(self) -> dict[int, QtCore.QByteArray]: ...
    def options(self) -> QFileSystemModel.Option: ...
    def setOptions(self, options: QFileSystemModel.Option) -> None: ...
    def testOption(self, option: QFileSystemModel.Option) -> bool: ...
    def setOption(
        self, option: QFileSystemModel.Option, on: bool = ...
    ) -> None: ...
    def sibling(
        self, row: int, column: int, idx: QtCore.QModelIndex
    ) -> QtCore.QModelIndex: ...
    def timerEvent(self, event: QtCore.QTimerEvent | None) -> None: ...
    def event(self, event: QtCore.QEvent | None) -> bool: ...
    directoryLoaded: typing.ClassVar[QtCore.pyqtSignal]
    rootPathChanged: typing.ClassVar[QtCore.pyqtSignal]
    fileRenamed: typing.ClassVar[QtCore.pyqtSignal]
    def remove(self, index: QtCore.QModelIndex) -> bool: ...
    def fileInfo(self, aindex: QtCore.QModelIndex) -> QtCore.QFileInfo: ...
    def fileIcon(self, aindex: QtCore.QModelIndex) -> QIcon: ...
    def fileName(self, aindex: QtCore.QModelIndex) -> str: ...
    def rmdir(self, index: QtCore.QModelIndex) -> bool: ...
    def permissions(
        self, index: QtCore.QModelIndex
    ) -> QtCore.QFileDevice.Permission: ...
    def mkdir(
        self, parent: QtCore.QModelIndex, name: str | None
    ) -> QtCore.QModelIndex: ...
    @typing.overload
    def lastModified(self, index: QtCore.QModelIndex) -> QtCore.QDateTime: ...
    @typing.overload
    def lastModified(
        self, index: QtCore.QModelIndex, tz: QtCore.QTimeZone
    ) -> QtCore.QDateTime: ...
    def type(self, index: QtCore.QModelIndex) -> str: ...
    def size(self, index: QtCore.QModelIndex) -> int: ...
    def isDir(self, index: QtCore.QModelIndex) -> bool: ...
    def filePath(self, index: QtCore.QModelIndex) -> str: ...
    def nameFilters(self) -> list[str]: ...
    def setNameFilters(
        self, filters: collections.abc.Iterable[str | None]
    ) -> None: ...
    def nameFilterDisables(self) -> bool: ...
    def setNameFilterDisables(self, enable: bool) -> None: ...
    def isReadOnly(self) -> bool: ...
    def setReadOnly(self, enable: bool) -> None: ...
    def resolveSymlinks(self) -> bool: ...
    def setResolveSymlinks(self, enable: bool) -> None: ...
    def filter(self) -> QtCore.QDir.Filter: ...
    def setFilter(self, filters: QtCore.QDir.Filter) -> None: ...
    def iconProvider(self) -> QAbstractFileIconProvider | None: ...
    def setIconProvider(
        self, provider: QAbstractFileIconProvider | None
    ) -> None: ...
    def rootDirectory(self) -> QtCore.QDir: ...
    def rootPath(self) -> str: ...
    def setRootPath(self, path: str | None) -> QtCore.QModelIndex: ...
    def supportedDropActions(self) -> QtCore.Qt.DropAction: ...
    def dropMimeData(
        self,
        data: QtCore.QMimeData | None,
        action: QtCore.Qt.DropAction,
        row: int,
        column: int,
        parent: QtCore.QModelIndex,
    ) -> bool: ...
    def mimeData(
        self, indexes: collections.abc.Iterable[QtCore.QModelIndex]
    ) -> QtCore.QMimeData | None: ...
    def mimeTypes(self) -> list[str]: ...
    def sort(self, column: int, order: QtCore.Qt.SortOrder = ...) -> None: ...
    def flags(self, index: QtCore.QModelIndex) -> QtCore.Qt.ItemFlag: ...
    def headerData(
        self, section: int, orientation: QtCore.Qt.Orientation, role: int = ...
    ) -> typing.Any: ...
    def setData(
        self, index: QtCore.QModelIndex, value: typing.Any, role: int = ...
    ) -> bool: ...
    def data(
        self, index: QtCore.QModelIndex, role: int = ...
    ) -> typing.Any: ...
    def myComputer(self, role: int = ...) -> typing.Any: ...
    def columnCount(self, parent: QtCore.QModelIndex = ...) -> int: ...
    def rowCount(self, parent: QtCore.QModelIndex = ...) -> int: ...
    def fetchMore(self, parent: QtCore.QModelIndex) -> None: ...
    def canFetchMore(self, parent: QtCore.QModelIndex) -> bool: ...
    def hasChildren(self, parent: QtCore.QModelIndex = ...) -> bool: ...
    def parent(self, child: QtCore.QModelIndex) -> QtCore.QModelIndex: ...
    @typing.overload
    def index(
        self, row: int, column: int, parent: QtCore.QModelIndex = ...
    ) -> QtCore.QModelIndex: ...
    @typing.overload
    def index(
        self, path: str | None, column: int = ...
    ) -> QtCore.QModelIndex: ...

class QFont(PyQt6.sip.simplewrapper):
    class HintingPreference(enum.Enum):
        PreferDefaultHinting = ...
        PreferNoHinting = ...
        PreferVerticalHinting = ...
        PreferFullHinting = ...

    class SpacingType(enum.Enum):
        PercentageSpacing = ...
        AbsoluteSpacing = ...

    class Capitalization(enum.Enum):
        MixedCase = ...
        AllUppercase = ...
        AllLowercase = ...
        SmallCaps = ...
        Capitalize = ...

    class Stretch(enum.IntEnum):
        AnyStretch = ...
        UltraCondensed = ...
        ExtraCondensed = ...
        Condensed = ...
        SemiCondensed = ...
        Unstretched = ...
        SemiExpanded = ...
        Expanded = ...
        ExtraExpanded = ...
        UltraExpanded = ...

    class Style(enum.Enum):
        StyleNormal = ...
        StyleItalic = ...
        StyleOblique = ...

    class Weight(enum.IntEnum):
        Thin = ...
        ExtraLight = ...
        Light = ...
        Normal = ...
        Medium = ...
        DemiBold = ...
        Bold = ...
        ExtraBold = ...
        Black = ...

    class StyleStrategy(enum.Flag):
        PreferDefault = ...
        PreferBitmap = ...
        PreferDevice = ...
        PreferOutline = ...
        ForceOutline = ...
        PreferMatch = ...
        PreferQuality = ...
        PreferAntialias = ...
        NoAntialias = ...
        NoSubpixelAntialias = ...
        NoFontMerging = ...
        PreferNoShaping = ...
        ContextFontMerging = ...
        PreferTypoLineMetrics = ...

    class StyleHint(enum.Enum):
        Helvetica = ...
        SansSerif = ...
        Times = ...
        Serif = ...
        Courier = ...
        TypeWriter = ...
        OldEnglish = ...
        Decorative = ...
        System = ...
        AnyStyle = ...
        Cursive = ...
        Monospace = ...
        Fantasy = ...

    class Tag(PyQt6.sip.simplewrapper):
        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(
            self,
            view: QtCore.QByteArray
            | bytes
            | bytearray
            | memoryview
            | str
            | None,
        ) -> None: ...
        @typing.overload
        def __init__(self, a0: QFont.Tag) -> None: ...
        def __ne__(self, other: object) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __ge__(self, rhs: QFont.Tag) -> bool: ...
        def __le__(self, rhs: QFont.Tag) -> bool: ...
        def __gt__(self, rhs: QFont.Tag) -> bool: ...
        def __lt__(self, rhs: QFont.Tag) -> bool: ...
        def __hash__(self) -> int: ...
        @staticmethod
        def fromString(
            view: QtCore.QByteArray
            | bytes
            | bytearray
            | memoryview
            | str
            | None,
        ) -> QFont.Tag | None: ...
        @staticmethod
        def fromValue(value: int) -> QFont.Tag | None: ...
        def toString(self) -> QtCore.QByteArray: ...
        def value(self) -> int: ...
        def isValid(self) -> bool: ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self,
        families: collections.abc.Iterable[str | None],
        pointSize: int = ...,
        weight: int = ...,
        italic: bool = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        family: str | None,
        pointSize: int = ...,
        weight: int = ...,
        italic: bool = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, a0: QFont) -> None: ...
    @typing.overload
    def __init__(self, variant: typing.Any) -> None: ...
    def __ge__(self, a0: QFont) -> bool: ...
    def variableAxisTags(self) -> list[QFont.Tag]: ...
    def clearVariableAxes(self) -> None: ...
    def variableAxisValue(self, tag: QFont.Tag) -> float: ...
    def isVariableAxisSet(self, tag: QFont.Tag) -> bool: ...
    def unsetVariableAxis(self, tag: QFont.Tag) -> None: ...
    def setVariableAxis(self, tag: QFont.Tag, value: float) -> None: ...
    def clearFeatures(self) -> None: ...
    def featureTags(self) -> list[QFont.Tag]: ...
    def isFeatureSet(self, tag: QFont.Tag) -> bool: ...
    def featureValue(self, tag: QFont.Tag) -> int: ...
    def unsetFeature(self, tag: QFont.Tag) -> None: ...
    def setFeature(self, tag: QFont.Tag, value: int) -> None: ...
    def setFamilies(
        self, a0: collections.abc.Iterable[str | None]
    ) -> None: ...
    def families(self) -> list[str]: ...
    def __hash__(self) -> int: ...
    def swap(self, other: QFont) -> None: ...
    def hintingPreference(self) -> QFont.HintingPreference: ...
    def setHintingPreference(
        self, hintingPreference: QFont.HintingPreference
    ) -> None: ...
    def setStyleName(self, styleName: str | None) -> None: ...
    def styleName(self) -> str: ...
    def capitalization(self) -> QFont.Capitalization: ...
    def setCapitalization(self, a0: QFont.Capitalization) -> None: ...
    def setWordSpacing(self, spacing: float) -> None: ...
    def wordSpacing(self) -> float: ...
    def setLetterSpacing(
        self, type: QFont.SpacingType, spacing: float
    ) -> None: ...
    def letterSpacingType(self) -> QFont.SpacingType: ...
    def letterSpacing(self) -> float: ...
    def setItalic(self, b: bool) -> None: ...
    def italic(self) -> bool: ...
    def setBold(self, enable: bool) -> None: ...
    def bold(self) -> bool: ...
    def resolve(self, a0: QFont) -> QFont: ...
    def defaultFamily(self) -> str: ...
    @staticmethod
    def cacheStatistics() -> None: ...
    @staticmethod
    def cleanup() -> None: ...
    @staticmethod
    def initialize() -> None: ...
    @staticmethod
    def removeSubstitutions(a0: str | None) -> None: ...
    @staticmethod
    def insertSubstitutions(
        a0: str | None, a1: collections.abc.Iterable[str | None]
    ) -> None: ...
    @staticmethod
    def insertSubstitution(a0: str | None, a1: str | None) -> None: ...
    @staticmethod
    def substitutions() -> list[str]: ...
    @staticmethod
    def substitutes(a0: str | None) -> list[str]: ...
    @staticmethod
    def substitute(a0: str | None) -> str: ...
    def fromString(self, a0: str | None) -> bool: ...
    def toString(self) -> str: ...
    def key(self) -> str: ...
    def isCopyOf(self, a0: QFont) -> bool: ...
    def __lt__(self, a0: QFont) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def exactMatch(self) -> bool: ...
    def setStretch(self, a0: int) -> None: ...
    def stretch(self) -> int: ...
    def setStyleStrategy(self, s: QFont.StyleStrategy) -> None: ...
    def setStyleHint(
        self, hint: QFont.StyleHint, strategy: QFont.StyleStrategy = ...
    ) -> None: ...
    def styleStrategy(self) -> QFont.StyleStrategy: ...
    def styleHint(self) -> QFont.StyleHint: ...
    def setKerning(self, a0: bool) -> None: ...
    def kerning(self) -> bool: ...
    def setFixedPitch(self, a0: bool) -> None: ...
    def fixedPitch(self) -> bool: ...
    def setStrikeOut(self, a0: bool) -> None: ...
    def strikeOut(self) -> bool: ...
    def setOverline(self, a0: bool) -> None: ...
    def overline(self) -> bool: ...
    def setUnderline(self, a0: bool) -> None: ...
    def underline(self) -> bool: ...
    def style(self) -> QFont.Style: ...
    def setStyle(self, style: QFont.Style) -> None: ...
    def setWeight(self, weight: int) -> None: ...
    def weight(self) -> int: ...
    def setPixelSize(self, a0: int) -> None: ...
    def pixelSize(self) -> int: ...
    def setPointSizeF(self, a0: float) -> None: ...
    def pointSizeF(self) -> float: ...
    def setPointSize(self, a0: int) -> None: ...
    def pointSize(self) -> int: ...
    def setFamily(self, a0: str | None) -> None: ...
    def family(self) -> str: ...

class QFontDatabase(PyQt6.sip.simplewrapper):
    class SystemFont(enum.Enum):
        GeneralFont = ...
        FixedFont = ...
        TitleFont = ...
        SmallestReadableFont = ...

    class WritingSystem(enum.Enum):
        Any = ...
        Latin = ...
        Greek = ...
        Cyrillic = ...
        Armenian = ...
        Hebrew = ...
        Arabic = ...
        Syriac = ...
        Thaana = ...
        Devanagari = ...
        Bengali = ...
        Gurmukhi = ...
        Gujarati = ...
        Oriya = ...
        Tamil = ...
        Telugu = ...
        Kannada = ...
        Malayalam = ...
        Sinhala = ...
        Thai = ...
        Lao = ...
        Tibetan = ...
        Myanmar = ...
        Georgian = ...
        Khmer = ...
        SimplifiedChinese = ...
        TraditionalChinese = ...
        Japanese = ...
        Korean = ...
        Vietnamese = ...
        Other = ...
        Symbol = ...
        Ogham = ...
        Runic = ...
        Nko = ...

    def __init__(self, a0: QFontDatabase) -> None: ...
    @staticmethod
    def applicationEmojiFontFamilies() -> list[str]: ...
    @staticmethod
    def setApplicationEmojiFontFamilies(
        familyNames: collections.abc.Iterable[str | None],
    ) -> None: ...
    @staticmethod
    def removeApplicationEmojiFontFamily(familyName: str | None) -> bool: ...
    @staticmethod
    def addApplicationEmojiFontFamily(familyName: str | None) -> None: ...
    @staticmethod
    def applicationFallbackFontFamilies(
        script: QtCore.QChar.Script,
    ) -> list[str]: ...
    @staticmethod
    def setApplicationFallbackFontFamilies(
        a0: QtCore.QChar.Script,
        familyNames: collections.abc.Iterable[str | None],
    ) -> None: ...
    @staticmethod
    def removeApplicationFallbackFontFamily(
        script: QtCore.QChar.Script, familyName: str | None
    ) -> bool: ...
    @staticmethod
    def addApplicationFallbackFontFamily(
        script: QtCore.QChar.Script, familyName: str | None
    ) -> None: ...
    @staticmethod
    def isPrivateFamily(family: str | None) -> bool: ...
    @staticmethod
    def systemFont(type: QFontDatabase.SystemFont) -> QFont: ...
    @staticmethod
    def removeAllApplicationFonts() -> bool: ...
    @staticmethod
    def removeApplicationFont(id: int) -> bool: ...
    @staticmethod
    def applicationFontFamilies(id: int) -> list[str]: ...
    @staticmethod
    def addApplicationFontFromData(
        fontData: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> int: ...
    @staticmethod
    def addApplicationFont(fileName: str | None) -> int: ...
    @staticmethod
    def writingSystemSample(
        writingSystem: QFontDatabase.WritingSystem,
    ) -> str: ...
    @staticmethod
    def writingSystemName(
        writingSystem: QFontDatabase.WritingSystem,
    ) -> str: ...
    @staticmethod
    def weight(family: str | None, style: str | None) -> int: ...
    @staticmethod
    def bold(family: str | None, style: str | None) -> bool: ...
    @staticmethod
    def italic(family: str | None, style: str | None) -> bool: ...
    @staticmethod
    def isFixedPitch(family: str | None, style: str | None = ...) -> bool: ...
    @staticmethod
    def isScalable(family: str | None, style: str | None = ...) -> bool: ...
    @staticmethod
    def isSmoothlyScalable(
        family: str | None, style: str | None = ...
    ) -> bool: ...
    @staticmethod
    def isBitmapScalable(
        family: str | None, style: str | None = ...
    ) -> bool: ...
    @staticmethod
    def font(
        family: str | None, style: str | None, pointSize: int
    ) -> QFont: ...
    @typing.overload
    @staticmethod
    def styleString(fontInfo: QFontInfo) -> str: ...
    @typing.overload
    @staticmethod
    def styleString(font: QFont) -> str: ...
    @staticmethod
    def smoothSizes(family: str | None, style: str | None) -> list[int]: ...
    @staticmethod
    def pointSizes(
        family: str | None, style: str | None = ...
    ) -> list[int]: ...
    @staticmethod
    def styles(family: str | None) -> list[str]: ...
    @staticmethod
    def families(
        writingSystem: QFontDatabase.WritingSystem = ...,
    ) -> list[str]: ...
    @typing.overload
    @staticmethod
    def writingSystems(
        family: str | None,
    ) -> list[QFontDatabase.WritingSystem]: ...
    @typing.overload
    @staticmethod
    def writingSystems() -> list[QFontDatabase.WritingSystem]: ...
    @staticmethod
    def standardSizes() -> list[int]: ...

class QFontInfo(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self, a0: QFont) -> None: ...
    @typing.overload
    def __init__(self, a0: QFontInfo) -> None: ...
    def variableAxes(self) -> list[QFontVariableAxis]: ...
    def swap(self, other: QFontInfo) -> None: ...
    def styleName(self) -> str: ...
    def exactMatch(self) -> bool: ...
    def styleHint(self) -> QFont.StyleHint: ...
    def fixedPitch(self) -> bool: ...
    def bold(self) -> bool: ...
    def weight(self) -> int: ...
    def style(self) -> QFont.Style: ...
    def italic(self) -> bool: ...
    def pointSizeF(self) -> float: ...
    def pointSize(self) -> int: ...
    def pixelSize(self) -> int: ...
    def family(self) -> str: ...

class QFontMetrics(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self, a0: QFont) -> None: ...
    @typing.overload
    def __init__(self, font: QFont, pd: QPaintDevice | None) -> None: ...
    @typing.overload
    def __init__(self, a0: QFontMetrics) -> None: ...
    def fontDpi(self) -> float: ...
    @typing.overload
    def horizontalAdvance(
        self, a0: str | None, textOption: QTextOption
    ) -> int: ...
    @typing.overload
    def horizontalAdvance(self, a0: str | None, length: int = ...) -> int: ...
    def capHeight(self) -> int: ...
    def swap(self, other: QFontMetrics) -> None: ...
    def inFontUcs4(self, character: int) -> bool: ...
    @typing.overload
    def tightBoundingRect(
        self, text: str | None, textOption: QTextOption
    ) -> QtCore.QRect: ...
    @typing.overload
    def tightBoundingRect(self, text: str | None) -> QtCore.QRect: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def elidedText(
        self,
        text: str | None,
        mode: QtCore.Qt.TextElideMode,
        width: int,
        flags: int = ...,
    ) -> str: ...
    def averageCharWidth(self) -> int: ...
    def lineWidth(self) -> int: ...
    def strikeOutPos(self) -> int: ...
    def overlinePos(self) -> int: ...
    def underlinePos(self) -> int: ...
    def size(
        self,
        flags: int,
        text: str | None,
        tabStops: int = ...,
        tabArray: list[int] | None = ...,
    ) -> QtCore.QSize: ...
    def boundingRectChar(self, a0: str) -> QtCore.QRect: ...
    @typing.overload
    def boundingRect(
        self, text: str | None, textOption: QTextOption
    ) -> QtCore.QRect: ...
    @typing.overload
    def boundingRect(self, text: str | None) -> QtCore.QRect: ...
    @typing.overload
    def boundingRect(
        self,
        rect: QtCore.QRect,
        flags: int,
        text: str | None,
        tabStops: int = ...,
        tabArray: list[int] | None = ...,
    ) -> QtCore.QRect: ...
    @typing.overload
    def boundingRect(
        self,
        x: int,
        y: int,
        width: int,
        height: int,
        flags: int,
        text: str | None,
        tabStops: int = ...,
        tabArray: list[int] | None = ...,
    ) -> QtCore.QRect: ...
    def rightBearing(self, a0: str) -> int: ...
    def leftBearing(self, a0: str) -> int: ...
    def inFont(self, a0: str) -> bool: ...
    def xHeight(self) -> int: ...
    def maxWidth(self) -> int: ...
    def minRightBearing(self) -> int: ...
    def minLeftBearing(self) -> int: ...
    def lineSpacing(self) -> int: ...
    def leading(self) -> int: ...
    def height(self) -> int: ...
    def descent(self) -> int: ...
    def ascent(self) -> int: ...

class QFontMetricsF(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self, a0: QFont) -> None: ...
    @typing.overload
    def __init__(self, font: QFont, pd: QPaintDevice | None) -> None: ...
    @typing.overload
    def __init__(self, a0: QFontMetrics) -> None: ...
    @typing.overload
    def __init__(self, a0: QFontMetricsF) -> None: ...
    def fontDpi(self) -> float: ...
    @typing.overload
    def horizontalAdvance(
        self, string: str | None, textOption: QTextOption
    ) -> float: ...
    @typing.overload
    def horizontalAdvance(
        self, string: str | None, length: int = ...
    ) -> float: ...
    def capHeight(self) -> float: ...
    def swap(self, other: QFontMetricsF) -> None: ...
    def inFontUcs4(self, character: int) -> bool: ...
    @typing.overload
    def tightBoundingRect(
        self, text: str | None, textOption: QTextOption
    ) -> QtCore.QRectF: ...
    @typing.overload
    def tightBoundingRect(self, text: str | None) -> QtCore.QRectF: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def elidedText(
        self,
        text: str | None,
        mode: QtCore.Qt.TextElideMode,
        width: float,
        flags: int = ...,
    ) -> str: ...
    def averageCharWidth(self) -> float: ...
    def lineWidth(self) -> float: ...
    def strikeOutPos(self) -> float: ...
    def overlinePos(self) -> float: ...
    def underlinePos(self) -> float: ...
    def size(
        self,
        flags: int,
        text: str | None,
        tabStops: int = ...,
        tabArray: list[int] | None = ...,
    ) -> QtCore.QSizeF: ...
    def boundingRectChar(self, a0: str) -> QtCore.QRectF: ...
    @typing.overload
    def boundingRect(
        self, text: str | None, textOption: QTextOption
    ) -> QtCore.QRectF: ...
    @typing.overload
    def boundingRect(self, string: str | None) -> QtCore.QRectF: ...
    @typing.overload
    def boundingRect(
        self,
        rect: QtCore.QRectF,
        flags: int,
        text: str | None,
        tabStops: int = ...,
        tabArray: list[int] | None = ...,
    ) -> QtCore.QRectF: ...
    def rightBearing(self, a0: str) -> float: ...
    def leftBearing(self, a0: str) -> float: ...
    def inFont(self, a0: str) -> bool: ...
    def xHeight(self) -> float: ...
    def maxWidth(self) -> float: ...
    def minRightBearing(self) -> float: ...
    def minLeftBearing(self) -> float: ...
    def lineSpacing(self) -> float: ...
    def leading(self) -> float: ...
    def height(self) -> float: ...
    def descent(self) -> float: ...
    def ascent(self) -> float: ...

class QFontVariableAxis(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, axis: QFontVariableAxis) -> None: ...
    def setDefaultValue(self, defaultValue: float) -> None: ...
    def defaultValue(self) -> float: ...
    def setMaximumValue(self, maximumValue: float) -> None: ...
    def maximumValue(self) -> float: ...
    def setMinimumValue(self, minimumValue: float) -> None: ...
    def minimumValue(self) -> float: ...
    def setName(self, name: str | None) -> None: ...
    def name(self) -> str: ...
    def setTag(self, tag: QFont.Tag) -> None: ...
    def tag(self) -> QFont.Tag: ...
    def swap(self, other: QFontVariableAxis) -> None: ...

class QMatrix4x3(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QMatrix4x3) -> None: ...
    @typing.overload
    def __init__(self, values: collections.abc.Sequence[float]) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __itruediv__(self, a0: float) -> typing.Self: ...
    def __imul__(self, a0: float) -> typing.Self: ...
    def __isub__(self, a0: QMatrix4x3) -> typing.Self: ...
    def __iadd__(self, a0: QMatrix4x3) -> typing.Self: ...
    def transposed(self) -> QMatrix3x4: ...
    def fill(self, value: float) -> None: ...
    def setToIdentity(self) -> None: ...
    def isIdentity(self) -> bool: ...
    def __setitem__(self, a0: typing.Any, a1: float) -> None: ...
    def __getitem__(self, a0: typing.Any) -> typing.Any: ...
    def copyDataTo(self) -> list[float]: ...
    def data(self) -> list[float]: ...

class QMatrix4x2(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QMatrix4x2) -> None: ...
    @typing.overload
    def __init__(self, values: collections.abc.Sequence[float]) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __itruediv__(self, a0: float) -> typing.Self: ...
    def __imul__(self, a0: float) -> typing.Self: ...
    def __isub__(self, a0: QMatrix4x2) -> typing.Self: ...
    def __iadd__(self, a0: QMatrix4x2) -> typing.Self: ...
    def transposed(self) -> QMatrix2x4: ...
    def fill(self, value: float) -> None: ...
    def setToIdentity(self) -> None: ...
    def isIdentity(self) -> bool: ...
    def __setitem__(self, a0: typing.Any, a1: float) -> None: ...
    def __getitem__(self, a0: typing.Any) -> typing.Any: ...
    def copyDataTo(self) -> list[float]: ...
    def data(self) -> list[float]: ...

class QMatrix3x4(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QMatrix3x4) -> None: ...
    @typing.overload
    def __init__(self, values: collections.abc.Sequence[float]) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __itruediv__(self, a0: float) -> typing.Self: ...
    def __imul__(self, a0: float) -> typing.Self: ...
    def __isub__(self, a0: QMatrix3x4) -> typing.Self: ...
    def __iadd__(self, a0: QMatrix3x4) -> typing.Self: ...
    def transposed(self) -> QMatrix4x3: ...
    def fill(self, value: float) -> None: ...
    def setToIdentity(self) -> None: ...
    def isIdentity(self) -> bool: ...
    def __setitem__(self, a0: typing.Any, a1: float) -> None: ...
    def __getitem__(self, a0: typing.Any) -> typing.Any: ...
    def copyDataTo(self) -> list[float]: ...
    def data(self) -> list[float]: ...

class QMatrix3x3(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QMatrix3x3) -> None: ...
    @typing.overload
    def __init__(self, values: collections.abc.Sequence[float]) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __itruediv__(self, a0: float) -> typing.Self: ...
    def __imul__(self, a0: float) -> typing.Self: ...
    def __isub__(self, a0: QMatrix3x3) -> typing.Self: ...
    def __iadd__(self, a0: QMatrix3x3) -> typing.Self: ...
    def transposed(self) -> QMatrix3x3: ...
    def fill(self, value: float) -> None: ...
    def setToIdentity(self) -> None: ...
    def isIdentity(self) -> bool: ...
    def __setitem__(self, a0: typing.Any, a1: float) -> None: ...
    def __getitem__(self, a0: typing.Any) -> typing.Any: ...
    def copyDataTo(self) -> list[float]: ...
    def data(self) -> list[float]: ...

class QMatrix3x2(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QMatrix3x2) -> None: ...
    @typing.overload
    def __init__(self, values: collections.abc.Sequence[float]) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __itruediv__(self, a0: float) -> typing.Self: ...
    def __imul__(self, a0: float) -> typing.Self: ...
    def __isub__(self, a0: QMatrix3x2) -> typing.Self: ...
    def __iadd__(self, a0: QMatrix3x2) -> typing.Self: ...
    def transposed(self) -> QMatrix2x3: ...
    def fill(self, value: float) -> None: ...
    def setToIdentity(self) -> None: ...
    def isIdentity(self) -> bool: ...
    def __setitem__(self, a0: typing.Any, a1: float) -> None: ...
    def __getitem__(self, a0: typing.Any) -> typing.Any: ...
    def copyDataTo(self) -> list[float]: ...
    def data(self) -> list[float]: ...

class QMatrix2x4(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QMatrix2x4) -> None: ...
    @typing.overload
    def __init__(self, values: collections.abc.Sequence[float]) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __itruediv__(self, a0: float) -> typing.Self: ...
    def __imul__(self, a0: float) -> typing.Self: ...
    def __isub__(self, a0: QMatrix2x4) -> typing.Self: ...
    def __iadd__(self, a0: QMatrix2x4) -> typing.Self: ...
    def transposed(self) -> QMatrix4x2: ...
    def fill(self, value: float) -> None: ...
    def setToIdentity(self) -> None: ...
    def isIdentity(self) -> bool: ...
    def __setitem__(self, a0: typing.Any, a1: float) -> None: ...
    def __getitem__(self, a0: typing.Any) -> typing.Any: ...
    def copyDataTo(self) -> list[float]: ...
    def data(self) -> list[float]: ...

class QMatrix2x3(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QMatrix2x3) -> None: ...
    @typing.overload
    def __init__(self, values: collections.abc.Sequence[float]) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __itruediv__(self, a0: float) -> typing.Self: ...
    def __imul__(self, a0: float) -> typing.Self: ...
    def __isub__(self, a0: QMatrix2x3) -> typing.Self: ...
    def __iadd__(self, a0: QMatrix2x3) -> typing.Self: ...
    def transposed(self) -> QMatrix3x2: ...
    def fill(self, value: float) -> None: ...
    def setToIdentity(self) -> None: ...
    def isIdentity(self) -> bool: ...
    def __setitem__(self, a0: typing.Any, a1: float) -> None: ...
    def __getitem__(self, a0: typing.Any) -> typing.Any: ...
    def copyDataTo(self) -> list[float]: ...
    def data(self) -> list[float]: ...

class QMatrix2x2(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QMatrix2x2) -> None: ...
    @typing.overload
    def __init__(self, values: collections.abc.Sequence[float]) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __itruediv__(self, a0: float) -> typing.Self: ...
    def __imul__(self, a0: float) -> typing.Self: ...
    def __isub__(self, a0: QMatrix2x2) -> typing.Self: ...
    def __iadd__(self, a0: QMatrix2x2) -> typing.Self: ...
    def transposed(self) -> QMatrix2x2: ...
    def fill(self, value: float) -> None: ...
    def setToIdentity(self) -> None: ...
    def isIdentity(self) -> bool: ...
    def __setitem__(self, a0: typing.Any, a1: float) -> None: ...
    def __getitem__(self, a0: typing.Any) -> typing.Any: ...
    def copyDataTo(self) -> list[float]: ...
    def data(self) -> list[float]: ...

class QGlyphRun(PyQt6.sip.simplewrapper):
    class GlyphRunFlag(enum.Flag):
        Overline = ...
        Underline = ...
        StrikeOut = ...
        RightToLeft = ...
        SplitLigature = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QGlyphRun) -> None: ...
    def sourceString(self) -> str: ...
    def setSourceString(self, sourceString: str | None) -> None: ...
    def setStringIndexes(
        self, stringIndexes: collections.abc.Iterable[int]
    ) -> None: ...
    def stringIndexes(self) -> list[int]: ...
    def swap(self, other: QGlyphRun) -> None: ...
    def isEmpty(self) -> bool: ...
    def boundingRect(self) -> QtCore.QRectF: ...
    def setBoundingRect(self, boundingRect: QtCore.QRectF) -> None: ...
    def flags(self) -> QGlyphRun.GlyphRunFlag: ...
    def setFlags(self, flags: QGlyphRun.GlyphRunFlag) -> None: ...
    def setFlag(
        self, flag: QGlyphRun.GlyphRunFlag, enabled: bool = ...
    ) -> None: ...
    def isRightToLeft(self) -> bool: ...
    def setRightToLeft(self, on: bool) -> None: ...
    def strikeOut(self) -> bool: ...
    def setStrikeOut(self, strikeOut: bool) -> None: ...
    def underline(self) -> bool: ...
    def setUnderline(self, underline: bool) -> None: ...
    def overline(self) -> bool: ...
    def setOverline(self, overline: bool) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def clear(self) -> None: ...
    def setPositions(
        self, positions: collections.abc.Iterable[QtCore.QPointF]
    ) -> None: ...
    def positions(self) -> list[QtCore.QPointF]: ...
    def setGlyphIndexes(
        self, glyphIndexes: collections.abc.Iterable[int]
    ) -> None: ...
    def glyphIndexes(self) -> list[int]: ...
    def setRawFont(self, rawFont: QRawFont) -> None: ...
    def rawFont(self) -> QRawFont: ...

class QGuiApplication(QtCore.QCoreApplication):
    def __init__(self, argv: list[str]) -> None: ...
    def event(self, a0: QtCore.QEvent | None) -> bool: ...
    def setBadgeNumber(self, number: int) -> None: ...
    @staticmethod
    def highDpiScaleFactorRoundingPolicy() -> (
        QtCore.Qt.HighDpiScaleFactorRoundingPolicy
    ): ...
    @staticmethod
    def setHighDpiScaleFactorRoundingPolicy(
        policy: QtCore.Qt.HighDpiScaleFactorRoundingPolicy,
    ) -> None: ...
    @staticmethod
    def screenAt(point: QtCore.QPoint) -> QScreen | None: ...
    @staticmethod
    def desktopFileName() -> str: ...
    @staticmethod
    def setDesktopFileName(name: str | None) -> None: ...
    primaryScreenChanged: typing.ClassVar[QtCore.pyqtSignal]
    layoutDirectionChanged: typing.ClassVar[QtCore.pyqtSignal]
    screenRemoved: typing.ClassVar[QtCore.pyqtSignal]
    @staticmethod
    def windowIcon() -> QIcon: ...
    @staticmethod
    def setWindowIcon(icon: QIcon) -> None: ...
    @staticmethod
    def sync() -> None: ...
    @staticmethod
    def applicationState() -> QtCore.Qt.ApplicationState: ...
    def isSavingSession(self) -> bool: ...
    def sessionKey(self) -> str: ...
    def sessionId(self) -> str: ...
    def isSessionRestored(self) -> bool: ...
    def devicePixelRatio(self) -> float: ...
    @staticmethod
    def inputMethod() -> QInputMethod | None: ...
    @staticmethod
    def styleHints() -> QStyleHints | None: ...
    @staticmethod
    def modalWindow() -> QWindow | None: ...
    @staticmethod
    def applicationDisplayName() -> str: ...
    @staticmethod
    def setApplicationDisplayName(name: str | None) -> None: ...
    applicationDisplayNameChanged: typing.ClassVar[QtCore.pyqtSignal]
    applicationStateChanged: typing.ClassVar[QtCore.pyqtSignal]
    focusWindowChanged: typing.ClassVar[QtCore.pyqtSignal]
    saveStateRequest: typing.ClassVar[QtCore.pyqtSignal]
    commitDataRequest: typing.ClassVar[QtCore.pyqtSignal]
    focusObjectChanged: typing.ClassVar[QtCore.pyqtSignal]
    lastWindowClosed: typing.ClassVar[QtCore.pyqtSignal]
    screenAdded: typing.ClassVar[QtCore.pyqtSignal]
    fontDatabaseChanged: typing.ClassVar[QtCore.pyqtSignal]
    def notify(
        self, a0: QtCore.QObject | None, a1: QtCore.QEvent | None
    ) -> bool: ...
    @staticmethod
    def exec() -> int: ...
    @staticmethod
    def quitOnLastWindowClosed() -> bool: ...
    @staticmethod
    def setQuitOnLastWindowClosed(quit: bool) -> None: ...
    @staticmethod
    def desktopSettingsAware() -> bool: ...
    @staticmethod
    def setDesktopSettingsAware(on: bool) -> None: ...
    @staticmethod
    def isLeftToRight() -> bool: ...
    @staticmethod
    def isRightToLeft() -> bool: ...
    @staticmethod
    def layoutDirection() -> QtCore.Qt.LayoutDirection: ...
    @staticmethod
    def setLayoutDirection(direction: QtCore.Qt.LayoutDirection) -> None: ...
    @staticmethod
    def mouseButtons() -> QtCore.Qt.MouseButton: ...
    @staticmethod
    def queryKeyboardModifiers() -> QtCore.Qt.KeyboardModifier: ...
    @staticmethod
    def keyboardModifiers() -> QtCore.Qt.KeyboardModifier: ...
    @staticmethod
    def setPalette(pal: QPalette) -> None: ...
    @staticmethod
    def palette() -> QPalette: ...
    @staticmethod
    def clipboard() -> QClipboard | None: ...
    @staticmethod
    def setFont(a0: QFont) -> None: ...
    @staticmethod
    def font() -> QFont: ...
    @staticmethod
    def restoreOverrideCursor() -> None: ...
    @staticmethod
    def changeOverrideCursor(a0: QCursor | QtCore.Qt.CursorShape) -> None: ...
    @staticmethod
    def setOverrideCursor(a0: QCursor | QtCore.Qt.CursorShape) -> None: ...
    @staticmethod
    def overrideCursor() -> QCursor | None: ...
    @staticmethod
    def screens() -> list[QScreen]: ...
    @staticmethod
    def primaryScreen() -> QScreen | None: ...
    @staticmethod
    def focusObject() -> QtCore.QObject | None: ...
    @staticmethod
    def focusWindow() -> QWindow | None: ...
    @staticmethod
    def platformName() -> str: ...
    @staticmethod
    def topLevelAt(pos: QtCore.QPoint) -> QWindow | None: ...
    @staticmethod
    def topLevelWindows() -> list[QWindow]: ...
    @staticmethod
    def allWindows() -> list[QWindow]: ...

class QIcon(PyQt6.sip.wrapper):
    class ThemeIcon(enum.Enum):
        AddressBookNew = ...
        ApplicationExit = ...
        AppointmentNew = ...
        CallStart = ...
        CallStop = ...
        ContactNew = ...
        DocumentNew = ...
        DocumentOpen = ...
        DocumentOpenRecent = ...
        DocumentPageSetup = ...
        DocumentPrint = ...
        DocumentPrintPreview = ...
        DocumentProperties = ...
        DocumentRevert = ...
        DocumentSave = ...
        DocumentSaveAs = ...
        DocumentSend = ...
        EditClear = ...
        EditCopy = ...
        EditCut = ...
        EditDelete = ...
        EditFind = ...
        EditPaste = ...
        EditRedo = ...
        EditSelectAll = ...
        EditUndo = ...
        FolderNew = ...
        FormatIndentLess = ...
        FormatIndentMore = ...
        FormatJustifyCenter = ...
        FormatJustifyFill = ...
        FormatJustifyLeft = ...
        FormatJustifyRight = ...
        FormatTextDirectionLtr = ...
        FormatTextDirectionRtl = ...
        FormatTextBold = ...
        FormatTextItalic = ...
        FormatTextUnderline = ...
        FormatTextStrikethrough = ...
        GoDown = ...
        GoHome = ...
        GoNext = ...
        GoPrevious = ...
        GoUp = ...
        HelpAbout = ...
        HelpFaq = ...
        InsertImage = ...
        InsertLink = ...
        InsertText = ...
        ListAdd = ...
        ListRemove = ...
        MailForward = ...
        MailMarkImportant = ...
        MailMarkRead = ...
        MailMarkUnread = ...
        MailMessageNew = ...
        MailReplyAll = ...
        MailReplySender = ...
        MailSend = ...
        MediaEject = ...
        MediaPlaybackPause = ...
        MediaPlaybackStart = ...
        MediaPlaybackStop = ...
        MediaRecord = ...
        MediaSeekBackward = ...
        MediaSeekForward = ...
        MediaSkipBackward = ...
        MediaSkipForward = ...
        ObjectRotateLeft = ...
        ObjectRotateRight = ...
        ProcessStop = ...
        SystemLockScreen = ...
        SystemLogOut = ...
        SystemSearch = ...
        SystemReboot = ...
        SystemShutdown = ...
        ToolsCheckSpelling = ...
        ViewFullscreen = ...
        ViewRefresh = ...
        ViewRestore = ...
        WindowClose = ...
        WindowNew = ...
        ZoomFitBest = ...
        ZoomIn = ...
        ZoomOut = ...
        AudioCard = ...
        AudioInputMicrophone = ...
        Battery = ...
        CameraPhoto = ...
        CameraVideo = ...
        CameraWeb = ...
        Computer = ...
        DriveHarddisk = ...
        DriveOptical = ...
        InputGaming = ...
        InputKeyboard = ...
        InputMouse = ...
        InputTablet = ...
        MediaFlash = ...
        MediaOptical = ...
        MediaTape = ...
        MultimediaPlayer = ...
        NetworkWired = ...
        NetworkWireless = ...
        Phone = ...
        Printer = ...
        Scanner = ...
        VideoDisplay = ...
        AppointmentMissed = ...
        AppointmentSoon = ...
        AudioVolumeHigh = ...
        AudioVolumeLow = ...
        AudioVolumeMedium = ...
        AudioVolumeMuted = ...
        BatteryCaution = ...
        BatteryLow = ...
        DialogError = ...
        DialogInformation = ...
        DialogPassword = ...
        DialogQuestion = ...
        DialogWarning = ...
        FolderDragAccept = ...
        FolderOpen = ...
        FolderVisiting = ...
        ImageLoading = ...
        ImageMissing = ...
        MailAttachment = ...
        MailUnread = ...
        MailRead = ...
        MailReplied = ...
        MediaPlaylistRepeat = ...
        MediaPlaylistShuffle = ...
        NetworkOffline = ...
        PrinterPrinting = ...
        SecurityHigh = ...
        SecurityLow = ...
        SoftwareUpdateAvailable = ...
        SoftwareUpdateUrgent = ...
        SyncError = ...
        SyncSynchronizing = ...
        UserAvailable = ...
        UserOffline = ...
        WeatherClear = ...
        WeatherClearNight = ...
        WeatherFewClouds = ...
        WeatherFewCloudsNight = ...
        WeatherFog = ...
        WeatherShowers = ...
        WeatherSnow = ...
        WeatherStorm = ...

    class State(enum.Enum):
        On = ...
        Off = ...

    class Mode(enum.Enum):
        Normal = ...
        Disabled = ...
        Active = ...
        Selected = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pixmap: QPixmap) -> None: ...
    @typing.overload
    def __init__(self, other: QIcon) -> None: ...
    @typing.overload
    def __init__(self, fileName: str | None) -> None: ...
    @typing.overload
    def __init__(self, engine: QIconEngine | None) -> None: ...
    @typing.overload
    def __init__(self, variant: typing.Any) -> None: ...
    @staticmethod
    def setFallbackThemeName(name: str | None) -> None: ...
    @staticmethod
    def fallbackThemeName() -> str: ...
    @staticmethod
    def setFallbackSearchPaths(
        paths: collections.abc.Iterable[str | None],
    ) -> None: ...
    @staticmethod
    def fallbackSearchPaths() -> list[str]: ...
    def isMask(self) -> bool: ...
    def setIsMask(self, isMask: bool) -> None: ...
    def swap(self, other: QIcon) -> None: ...
    def name(self) -> str: ...
    @staticmethod
    def setThemeName(path: str | None) -> None: ...
    @staticmethod
    def themeName() -> str: ...
    @staticmethod
    def setThemeSearchPaths(
        searchpath: collections.abc.Iterable[str | None],
    ) -> None: ...
    @staticmethod
    def themeSearchPaths() -> list[str]: ...
    @typing.overload
    @staticmethod
    def hasThemeIcon(name: str | None) -> bool: ...
    @typing.overload
    @staticmethod
    def hasThemeIcon(icon: QIcon.ThemeIcon) -> bool: ...
    @typing.overload
    @staticmethod
    def fromTheme(name: str | None) -> QIcon: ...
    @typing.overload
    @staticmethod
    def fromTheme(name: str | None, fallback: QIcon) -> QIcon: ...
    @typing.overload
    @staticmethod
    def fromTheme(icon: QIcon.ThemeIcon) -> QIcon: ...
    @typing.overload
    @staticmethod
    def fromTheme(icon: QIcon.ThemeIcon, fallback: QIcon) -> QIcon: ...
    def cacheKey(self) -> int: ...
    def addFile(
        self,
        fileName: str | None,
        size: QtCore.QSize = ...,
        mode: QIcon.Mode = ...,
        state: QIcon.State = ...,
    ) -> None: ...
    def addPixmap(
        self, pixmap: QPixmap, mode: QIcon.Mode = ..., state: QIcon.State = ...
    ) -> None: ...
    def isDetached(self) -> bool: ...
    def isNull(self) -> bool: ...
    @typing.overload
    def paint(
        self,
        painter: QPainter | None,
        rect: QtCore.QRect,
        alignment: QtCore.Qt.AlignmentFlag = ...,
        mode: QIcon.Mode = ...,
        state: QIcon.State = ...,
    ) -> None: ...
    @typing.overload
    def paint(
        self,
        painter: QPainter | None,
        x: int,
        y: int,
        w: int,
        h: int,
        alignment: QtCore.Qt.AlignmentFlag = ...,
        mode: QIcon.Mode = ...,
        state: QIcon.State = ...,
    ) -> None: ...
    def availableSizes(
        self, mode: QIcon.Mode = ..., state: QIcon.State = ...
    ) -> list[QtCore.QSize]: ...
    def actualSize(
        self,
        size: QtCore.QSize,
        mode: QIcon.Mode = ...,
        state: QIcon.State = ...,
    ) -> QtCore.QSize: ...
    @typing.overload
    def pixmap(
        self,
        size: QtCore.QSize,
        devicePixelRatio: float,
        mode: QIcon.Mode = ...,
        state: QIcon.State = ...,
    ) -> QPixmap: ...
    @typing.overload
    def pixmap(
        self,
        size: QtCore.QSize,
        mode: QIcon.Mode = ...,
        state: QIcon.State = ...,
    ) -> QPixmap: ...
    @typing.overload
    def pixmap(
        self, w: int, h: int, mode: QIcon.Mode = ..., state: QIcon.State = ...
    ) -> QPixmap: ...
    @typing.overload
    def pixmap(
        self, extent: int, mode: QIcon.Mode = ..., state: QIcon.State = ...
    ) -> QPixmap: ...

class QIconEngine(PyQt6.sip.wrapper):
    class IconEngineHook(enum.Enum):
        IsNullHook = ...
        ScaledPixmapHook = ...

    class ScaledPixmapArgument(PyQt6.sip.simplewrapper):
        mode: QIcon.Mode = ...
        pixmap: QPixmap = ...
        scale: float = ...
        size: QtCore.QSize = ...
        state: QIcon.State = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: QIconEngine.ScaledPixmapArgument) -> None: ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QIconEngine) -> None: ...
    def scaledPixmap(
        self,
        size: QtCore.QSize,
        mode: QIcon.Mode,
        state: QIcon.State,
        scale: float,
    ) -> QPixmap: ...
    def isNull(self) -> bool: ...
    def iconName(self) -> str: ...
    def availableSizes(
        self, mode: QIcon.Mode = ..., state: QIcon.State = ...
    ) -> list[QtCore.QSize]: ...
    def write(self, out: QtCore.QDataStream) -> bool: ...
    def read(self, in_: QtCore.QDataStream) -> bool: ...
    def clone(self) -> QIconEngine | None: ...
    def key(self) -> str: ...
    def addFile(
        self,
        fileName: str | None,
        size: QtCore.QSize,
        mode: QIcon.Mode,
        state: QIcon.State,
    ) -> None: ...
    def addPixmap(
        self, pixmap: QPixmap, mode: QIcon.Mode, state: QIcon.State
    ) -> None: ...
    def pixmap(
        self, size: QtCore.QSize, mode: QIcon.Mode, state: QIcon.State
    ) -> QPixmap: ...
    def actualSize(
        self, size: QtCore.QSize, mode: QIcon.Mode, state: QIcon.State
    ) -> QtCore.QSize: ...
    def paint(
        self,
        painter: QPainter | None,
        rect: QtCore.QRect,
        mode: QIcon.Mode,
        state: QIcon.State,
    ) -> None: ...

class QImage(QPaintDevice):
    class Format(enum.Enum):
        Format_Invalid = ...
        Format_Mono = ...
        Format_MonoLSB = ...
        Format_Indexed8 = ...
        Format_RGB32 = ...
        Format_ARGB32 = ...
        Format_ARGB32_Premultiplied = ...
        Format_RGB16 = ...
        Format_ARGB8565_Premultiplied = ...
        Format_RGB666 = ...
        Format_ARGB6666_Premultiplied = ...
        Format_RGB555 = ...
        Format_ARGB8555_Premultiplied = ...
        Format_RGB888 = ...
        Format_RGB444 = ...
        Format_ARGB4444_Premultiplied = ...
        Format_RGBX8888 = ...
        Format_RGBA8888 = ...
        Format_RGBA8888_Premultiplied = ...
        Format_BGR30 = ...
        Format_A2BGR30_Premultiplied = ...
        Format_RGB30 = ...
        Format_A2RGB30_Premultiplied = ...
        Format_Alpha8 = ...
        Format_Grayscale8 = ...
        Format_RGBX64 = ...
        Format_RGBA64 = ...
        Format_RGBA64_Premultiplied = ...
        Format_Grayscale16 = ...
        Format_BGR888 = ...
        Format_RGBX16FPx4 = ...
        Format_RGBA16FPx4 = ...
        Format_RGBA16FPx4_Premultiplied = ...
        Format_RGBX32FPx4 = ...
        Format_RGBA32FPx4 = ...
        Format_RGBA32FPx4_Premultiplied = ...
        Format_CMYK8888 = ...

    class InvertMode(enum.Enum):
        InvertRgb = ...
        InvertRgba = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, size: QtCore.QSize, format: QImage.Format) -> None: ...
    @typing.overload
    def __init__(
        self, width: int, height: int, format: QImage.Format
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        data: bytes | None,
        width: int,
        height: int,
        format: QImage.Format,
        cleanupFunction: collections.abc.Callable[..., None] | None = ...,
        cleanupInfo: typing.Any | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        data: bytes | None,
        width: int,
        height: int,
        bytesPerLine: int,
        format: QImage.Format,
        cleanupFunction: collections.abc.Callable[..., None] | None = ...,
        cleanupInfo: typing.Any | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, xpm: list[str]) -> None: ...
    @typing.overload
    def __init__(
        self, fileName: str | None, format: str | None = ...
    ) -> None: ...
    @typing.overload
    def __init__(self, a0: QImage) -> None: ...
    @typing.overload
    def __init__(self, variant: typing.Any) -> None: ...
    def flip(self, orient: QtCore.Qt.Orientation = ...) -> None: ...
    def flipped(self, orient: QtCore.Qt.Orientation = ...) -> QImage: ...
    @typing.overload
    def colorTransformed(self, transform: QColorTransform) -> QImage: ...
    @typing.overload
    def colorTransformed(
        self,
        transform: QColorTransform,
        format: QImage.Format,
        flags: QtCore.Qt.ImageConversionFlag = ...,
    ) -> QImage: ...
    def deviceIndependentSize(self) -> QtCore.QSizeF: ...
    @typing.overload
    def applyColorTransform(self, transform: QColorTransform) -> None: ...
    @typing.overload
    def applyColorTransform(
        self,
        transform: QColorTransform,
        format: QImage.Format,
        flags: QtCore.Qt.ImageConversionFlag = ...,
    ) -> None: ...
    @typing.overload
    def convertToColorSpace(self, a0: QColorSpace) -> None: ...
    @typing.overload
    def convertToColorSpace(
        self,
        colorSpace: QColorSpace,
        format: QImage.Format,
        flags: QtCore.Qt.ImageConversionFlag = ...,
    ) -> None: ...
    @typing.overload
    def convertedToColorSpace(self, a0: QColorSpace) -> QImage: ...
    @typing.overload
    def convertedToColorSpace(
        self,
        colorSpace: QColorSpace,
        format: QImage.Format,
        flags: QtCore.Qt.ImageConversionFlag = ...,
    ) -> QImage: ...
    def setColorSpace(self, a0: QColorSpace) -> None: ...
    def colorSpace(self) -> QColorSpace: ...
    def convertTo(
        self, f: QImage.Format, flags: QtCore.Qt.ImageConversionFlag = ...
    ) -> None: ...
    def convertedTo(
        self, f: QImage.Format, flags: QtCore.Qt.ImageConversionFlag = ...
    ) -> QImage: ...
    def sizeInBytes(self) -> int: ...
    def reinterpretAsFormat(self, f: QImage.Format) -> bool: ...
    @typing.overload
    def setPixelColor(
        self, x: int, y: int, c: QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    @typing.overload
    def setPixelColor(
        self, pt: QtCore.QPoint, c: QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    @typing.overload
    def pixelColor(self, x: int, y: int) -> QColor: ...
    @typing.overload
    def pixelColor(self, pt: QtCore.QPoint) -> QColor: ...
    @staticmethod
    def toImageFormat(format: QPixelFormat) -> QImage.Format: ...
    @staticmethod
    def toPixelFormat(format: QImage.Format) -> QPixelFormat: ...
    def pixelFormat(self) -> QPixelFormat: ...
    def setDevicePixelRatio(self, scaleFactor: float) -> None: ...
    def devicePixelRatio(self) -> float: ...
    def swap(self, other: QImage) -> None: ...
    def bitPlaneCount(self) -> int: ...
    def setColorCount(self, a0: int) -> None: ...
    def colorCount(self) -> int: ...
    def cacheKey(self) -> int: ...
    @staticmethod
    def trueMatrix(a0: QTransform, w: int, h: int) -> QTransform: ...
    def transformed(
        self, matrix: QTransform, mode: QtCore.Qt.TransformationMode = ...
    ) -> QImage: ...
    def createMaskFromColor(
        self, color: int, mode: QtCore.Qt.MaskMode = ...
    ) -> QImage: ...
    def setText(self, key: str | None, value: str | None) -> None: ...
    def text(self, key: str | None = ...) -> str: ...
    def textKeys(self) -> list[str]: ...
    def setOffset(self, a0: QtCore.QPoint) -> None: ...
    def offset(self) -> QtCore.QPoint: ...
    def setDotsPerMeterY(self, a0: int) -> None: ...
    def setDotsPerMeterX(self, a0: int) -> None: ...
    def dotsPerMeterY(self) -> int: ...
    def dotsPerMeterX(self) -> int: ...
    def paintEngine(self) -> QPaintEngine | None: ...
    @typing.overload
    @staticmethod
    def fromData(
        data: PyQt6.sip.array[bytes] | None, format: str | None = ...
    ) -> QImage: ...
    @typing.overload
    @staticmethod
    def fromData(
        data: QtCore.QByteArray | bytes | bytearray | memoryview,
        format: str | None = ...,
    ) -> QImage: ...
    @typing.overload
    def save(
        self,
        fileName: str | None,
        format: str | None = ...,
        quality: int = ...,
    ) -> bool: ...
    @typing.overload
    def save(
        self,
        device: QtCore.QIODevice | None,
        format: str | None = ...,
        quality: int = ...,
    ) -> bool: ...
    @typing.overload
    def loadFromData(
        self, data: PyQt6.sip.array[bytes] | None, format: str | None = ...
    ) -> bool: ...
    @typing.overload
    def loadFromData(
        self,
        data: QtCore.QByteArray | bytes | bytearray | memoryview,
        format: str | None = ...,
    ) -> bool: ...
    @typing.overload
    def load(
        self, device: QtCore.QIODevice | None, format: str | None
    ) -> bool: ...
    @typing.overload
    def load(self, fileName: str | None, format: str | None = ...) -> bool: ...
    def invertPixels(self, mode: QImage.InvertMode = ...) -> None: ...
    def rgbSwap(self) -> None: ...
    def rgbSwapped(self) -> QImage: ...
    def mirror(self, horizontal: bool = ..., vertical: bool = ...) -> None: ...
    def mirrored(
        self, horizontal: bool = ..., vertical: bool = ...
    ) -> QImage: ...
    def scaledToHeight(
        self, height: int, mode: QtCore.Qt.TransformationMode = ...
    ) -> QImage: ...
    def scaledToWidth(
        self, width: int, mode: QtCore.Qt.TransformationMode = ...
    ) -> QImage: ...
    @typing.overload
    def scaled(
        self,
        width: int,
        height: int,
        aspectRatioMode: QtCore.Qt.AspectRatioMode = ...,
        transformMode: QtCore.Qt.TransformationMode = ...,
    ) -> QImage: ...
    @typing.overload
    def scaled(
        self,
        size: QtCore.QSize,
        aspectRatioMode: QtCore.Qt.AspectRatioMode = ...,
        transformMode: QtCore.Qt.TransformationMode = ...,
    ) -> QImage: ...
    def createHeuristicMask(self, clipTight: bool = ...) -> QImage: ...
    def createAlphaMask(
        self, flags: QtCore.Qt.ImageConversionFlag = ...
    ) -> QImage: ...
    def setAlphaChannel(self, alphaChannel: QImage) -> None: ...
    def hasAlphaChannel(self) -> bool: ...
    @typing.overload
    def fill(self, pixel: int) -> None: ...
    @typing.overload
    def fill(self, color: QtCore.Qt.GlobalColor) -> None: ...
    @typing.overload
    def fill(self, color: QColor | QtCore.Qt.GlobalColor | int) -> None: ...
    def setColorTable(self, colors: collections.abc.Iterable[int]) -> None: ...
    def colorTable(self) -> list[int]: ...
    @typing.overload
    def setPixel(self, pt: QtCore.QPoint, index_or_rgb: int) -> None: ...
    @typing.overload
    def setPixel(self, x: int, y: int, index_or_rgb: int) -> None: ...
    @typing.overload
    def pixel(self, pt: QtCore.QPoint) -> int: ...
    @typing.overload
    def pixel(self, x: int, y: int) -> int: ...
    @typing.overload
    def pixelIndex(self, pt: QtCore.QPoint) -> int: ...
    @typing.overload
    def pixelIndex(self, x: int, y: int) -> int: ...
    @typing.overload
    def valid(self, pt: QtCore.QPoint) -> bool: ...
    @typing.overload
    def valid(self, x: int, y: int) -> bool: ...
    def bytesPerLine(self) -> int: ...
    def constScanLine(self, a0: int) -> PyQt6.sip.voidptr | None: ...
    def scanLine(self, a0: int) -> PyQt6.sip.voidptr | None: ...
    def constBits(self) -> PyQt6.sip.voidptr | None: ...
    def bits(self) -> PyQt6.sip.voidptr | None: ...
    def isGrayscale(self) -> bool: ...
    def allGray(self) -> bool: ...
    def setColor(self, i: int, c: int) -> None: ...
    def color(self, i: int) -> int: ...
    def depth(self) -> int: ...
    def rect(self) -> QtCore.QRect: ...
    def size(self) -> QtCore.QSize: ...
    def height(self) -> int: ...
    def width(self) -> int: ...
    @typing.overload
    def convertToFormat(
        self, f: QImage.Format, flags: QtCore.Qt.ImageConversionFlag = ...
    ) -> QImage: ...
    @typing.overload
    def convertToFormat(
        self,
        f: QImage.Format,
        colorTable: collections.abc.Iterable[int],
        flags: QtCore.Qt.ImageConversionFlag = ...,
    ) -> QImage: ...
    def format(self) -> QImage.Format: ...
    @typing.overload
    def copy(self, rect: QtCore.QRect = ...) -> QImage: ...
    @typing.overload
    def copy(self, x: int, y: int, w: int, h: int) -> QImage: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def isNull(self) -> bool: ...

class QImageIOHandler(PyQt6.sip.simplewrapper):
    class Transformation(enum.Flag):
        TransformationNone = ...
        TransformationMirror = ...
        TransformationFlip = ...
        TransformationRotate180 = ...
        TransformationRotate90 = ...
        TransformationMirrorAndRotate90 = ...
        TransformationFlipAndRotate90 = ...
        TransformationRotate270 = ...

    class ImageOption(enum.Enum):
        Size = ...
        ClipRect = ...
        Description = ...
        ScaledClipRect = ...
        ScaledSize = ...
        CompressionRatio = ...
        Gamma = ...
        Quality = ...
        Name = ...
        SubType = ...
        IncrementalReading = ...
        Endianness = ...
        Animation = ...
        BackgroundColor = ...
        SupportedSubTypes = ...
        OptimizedWrite = ...
        ProgressiveScanWrite = ...
        ImageTransformation = ...

    def __init__(self) -> None: ...
    def currentImageRect(self) -> QtCore.QRect: ...
    def currentImageNumber(self) -> int: ...
    def nextImageDelay(self) -> int: ...
    def imageCount(self) -> int: ...
    def loopCount(self) -> int: ...
    def jumpToImage(self, imageNumber: int) -> bool: ...
    def jumpToNextImage(self) -> bool: ...
    def supportsOption(self, option: QImageIOHandler.ImageOption) -> bool: ...
    def setOption(
        self, option: QImageIOHandler.ImageOption, value: typing.Any
    ) -> None: ...
    def option(self, option: QImageIOHandler.ImageOption) -> typing.Any: ...
    def write(self, image: QImage) -> bool: ...
    def read(self, image: QImage | None) -> bool: ...
    def canRead(self) -> bool: ...
    def format(self) -> QtCore.QByteArray: ...
    def setFormat(
        self, format: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def device(self) -> QtCore.QIODevice | None: ...
    def setDevice(self, device: QtCore.QIODevice | None) -> None: ...

class QImageReader(PyQt6.sip.simplewrapper):
    class ImageReaderError(enum.Enum):
        UnknownError = ...
        FileNotFoundError = ...
        DeviceError = ...
        UnsupportedFormatError = ...
        InvalidDataError = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self,
        device: QtCore.QIODevice | None,
        format: QtCore.QByteArray | bytes | bytearray | memoryview = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        fileName: str | None,
        format: QtCore.QByteArray | bytes | bytearray | memoryview = ...,
    ) -> None: ...
    @staticmethod
    def setAllocationLimit(mbLimit: int) -> None: ...
    @staticmethod
    def allocationLimit() -> int: ...
    @staticmethod
    def imageFormatsForMimeType(
        mimeType: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> list[QtCore.QByteArray]: ...
    def autoTransform(self) -> bool: ...
    def setAutoTransform(self, enabled: bool) -> None: ...
    def transformation(self) -> QImageIOHandler.Transformation: ...
    def supportedSubTypes(self) -> list[QtCore.QByteArray]: ...
    def subType(self) -> QtCore.QByteArray: ...
    @staticmethod
    def supportedMimeTypes() -> list[QtCore.QByteArray]: ...
    def decideFormatFromContent(self) -> bool: ...
    def setDecideFormatFromContent(self, ignored: bool) -> None: ...
    def autoDetectImageFormat(self) -> bool: ...
    def setAutoDetectImageFormat(self, enabled: bool) -> None: ...
    def supportsOption(self, option: QImageIOHandler.ImageOption) -> bool: ...
    def quality(self) -> int: ...
    def setQuality(self, quality: int) -> None: ...
    def supportsAnimation(self) -> bool: ...
    def backgroundColor(self) -> QColor: ...
    def setBackgroundColor(
        self, color: QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def text(self, key: str | None) -> str: ...
    def textKeys(self) -> list[str]: ...
    @staticmethod
    def supportedImageFormats() -> list[QtCore.QByteArray]: ...
    @typing.overload
    @staticmethod
    def imageFormat(fileName: str | None) -> QtCore.QByteArray: ...
    @typing.overload
    @staticmethod
    def imageFormat(device: QtCore.QIODevice | None) -> QtCore.QByteArray: ...
    @typing.overload
    def imageFormat(self) -> QImage.Format: ...
    def errorString(self) -> str: ...
    def error(self) -> QImageReader.ImageReaderError: ...
    def currentImageRect(self) -> QtCore.QRect: ...
    def currentImageNumber(self) -> int: ...
    def nextImageDelay(self) -> int: ...
    def imageCount(self) -> int: ...
    def loopCount(self) -> int: ...
    def jumpToImage(self, imageNumber: int) -> bool: ...
    def jumpToNextImage(self) -> bool: ...
    @typing.overload
    def read(self) -> QImage: ...
    @typing.overload
    def read(self, image: QImage | None) -> bool: ...
    def canRead(self) -> bool: ...
    def scaledClipRect(self) -> QtCore.QRect: ...
    def setScaledClipRect(self, rect: QtCore.QRect) -> None: ...
    def scaledSize(self) -> QtCore.QSize: ...
    def setScaledSize(self, size: QtCore.QSize) -> None: ...
    def clipRect(self) -> QtCore.QRect: ...
    def setClipRect(self, rect: QtCore.QRect) -> None: ...
    def size(self) -> QtCore.QSize: ...
    def fileName(self) -> str: ...
    def setFileName(self, fileName: str | None) -> None: ...
    def device(self) -> QtCore.QIODevice | None: ...
    def setDevice(self, device: QtCore.QIODevice | None) -> None: ...
    def format(self) -> QtCore.QByteArray: ...
    def setFormat(
        self, format: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...

class QImageWriter(PyQt6.sip.simplewrapper):
    class ImageWriterError(enum.Enum):
        UnknownError = ...
        DeviceError = ...
        UnsupportedFormatError = ...
        InvalidImageError = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self,
        device: QtCore.QIODevice | None,
        format: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        fileName: str | None,
        format: QtCore.QByteArray | bytes | bytearray | memoryview = ...,
    ) -> None: ...
    @staticmethod
    def imageFormatsForMimeType(
        mimeType: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> list[QtCore.QByteArray]: ...
    def setTransformation(
        self, orientation: QImageIOHandler.Transformation
    ) -> None: ...
    def transformation(self) -> QImageIOHandler.Transformation: ...
    def progressiveScanWrite(self) -> bool: ...
    def setProgressiveScanWrite(self, progressive: bool) -> None: ...
    def optimizedWrite(self) -> bool: ...
    def setOptimizedWrite(self, optimize: bool) -> None: ...
    def supportedSubTypes(self) -> list[QtCore.QByteArray]: ...
    def subType(self) -> QtCore.QByteArray: ...
    def setSubType(
        self, type: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    @staticmethod
    def supportedMimeTypes() -> list[QtCore.QByteArray]: ...
    def compression(self) -> int: ...
    def setCompression(self, compression: int) -> None: ...
    def supportsOption(self, option: QImageIOHandler.ImageOption) -> bool: ...
    def setText(self, key: str | None, text: str | None) -> None: ...
    @staticmethod
    def supportedImageFormats() -> list[QtCore.QByteArray]: ...
    def errorString(self) -> str: ...
    def error(self) -> QImageWriter.ImageWriterError: ...
    def write(self, image: QImage) -> bool: ...
    def canWrite(self) -> bool: ...
    def quality(self) -> int: ...
    def setQuality(self, quality: int) -> None: ...
    def fileName(self) -> str: ...
    def setFileName(self, fileName: str | None) -> None: ...
    def device(self) -> QtCore.QIODevice | None: ...
    def setDevice(self, device: QtCore.QIODevice | None) -> None: ...
    def format(self) -> QtCore.QByteArray: ...
    def setFormat(
        self, format: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...

class QInputDevice(QtCore.QObject):
    class Capability(enum.Flag):
        None_ = ...
        Position = ...
        Area = ...
        Pressure = ...
        Velocity = ...
        NormalizedPosition = ...
        MouseEmulation = ...
        PixelScroll = ...
        Scroll = ...
        Hover = ...
        Rotation = ...
        XTilt = ...
        YTilt = ...
        TangentialPressure = ...
        ZPosition = ...
        All = ...

    class DeviceType(enum.Flag):
        Unknown = ...
        Mouse = ...
        TouchScreen = ...
        TouchPad = ...
        Puck = ...
        Stylus = ...
        Airbrush = ...
        Keyboard = ...
        AllDevices = ...

    @typing.overload
    def __init__(
        self,
        name: str | None,
        systemId: int,
        type: QInputDevice.DeviceType,
        seatName: str | None = ...,
        parent: QtCore.QObject | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    @staticmethod
    def seatNames() -> list[str]: ...
    capabilitiesChanged: typing.ClassVar[QtCore.pyqtSignal]
    availableVirtualGeometryChanged: typing.ClassVar[QtCore.pyqtSignal]
    def __eq__(self, other: object) -> bool: ...
    @staticmethod
    def primaryKeyboard(seatName: str | None = ...) -> QInputDevice | None: ...
    @staticmethod
    def devices() -> list[QInputDevice]: ...
    def availableVirtualGeometry(self) -> QtCore.QRect: ...
    def seatName(self) -> str: ...
    def systemId(self) -> int: ...
    def hasCapability(self, cap: QInputDevice.Capability) -> bool: ...
    def capabilities(self) -> QInputDevice.Capability: ...
    def type(self) -> QInputDevice.DeviceType: ...
    def name(self) -> str: ...

class QInputMethod(QtCore.QObject):
    class Action(enum.Enum):
        Click = ...
        ContextMenu = ...

    inputItemClipRectangleChanged: typing.ClassVar[QtCore.pyqtSignal]
    anchorRectangleChanged: typing.ClassVar[QtCore.pyqtSignal]
    def inputItemClipRectangle(self) -> QtCore.QRectF: ...
    def anchorRectangle(self) -> QtCore.QRectF: ...
    inputDirectionChanged: typing.ClassVar[QtCore.pyqtSignal]
    localeChanged: typing.ClassVar[QtCore.pyqtSignal]
    animatingChanged: typing.ClassVar[QtCore.pyqtSignal]
    visibleChanged: typing.ClassVar[QtCore.pyqtSignal]
    keyboardRectangleChanged: typing.ClassVar[QtCore.pyqtSignal]
    cursorRectangleChanged: typing.ClassVar[QtCore.pyqtSignal]
    def invokeAction(
        self, a: QInputMethod.Action, cursorPosition: int
    ) -> None: ...
    def commit(self) -> None: ...
    def reset(self) -> None: ...
    def update(self, queries: QtCore.Qt.InputMethodQuery) -> None: ...
    def hide(self) -> None: ...
    def show(self) -> None: ...
    @staticmethod
    def queryFocusObject(
        query: QtCore.Qt.InputMethodQuery, argument: typing.Any
    ) -> typing.Any: ...
    def setInputItemRectangle(self, rect: QtCore.QRectF) -> None: ...
    def inputItemRectangle(self) -> QtCore.QRectF: ...
    def inputDirection(self) -> QtCore.Qt.LayoutDirection: ...
    def locale(self) -> QtCore.QLocale: ...
    def isAnimating(self) -> bool: ...
    def setVisible(self, visible: bool) -> None: ...
    def isVisible(self) -> bool: ...
    def keyboardRectangle(self) -> QtCore.QRectF: ...
    def cursorRectangle(self) -> QtCore.QRectF: ...
    def setInputItemTransform(self, transform: QTransform) -> None: ...
    def inputItemTransform(self) -> QTransform: ...

class QKeySequence(PyQt6.sip.simplewrapper):
    class StandardKey(enum.Enum):
        UnknownKey = ...
        HelpContents = ...
        WhatsThis = ...
        Open = ...
        Close = ...
        Save = ...
        New = ...
        Delete = ...
        Cut = ...
        Copy = ...
        Paste = ...
        Undo = ...
        Redo = ...
        Back = ...
        Forward = ...
        Refresh = ...
        ZoomIn = ...
        ZoomOut = ...
        Print = ...
        AddTab = ...
        NextChild = ...
        PreviousChild = ...
        Find = ...
        FindNext = ...
        FindPrevious = ...
        Replace = ...
        SelectAll = ...
        Bold = ...
        Italic = ...
        Underline = ...
        MoveToNextChar = ...
        MoveToPreviousChar = ...
        MoveToNextWord = ...
        MoveToPreviousWord = ...
        MoveToNextLine = ...
        MoveToPreviousLine = ...
        MoveToNextPage = ...
        MoveToPreviousPage = ...
        MoveToStartOfLine = ...
        MoveToEndOfLine = ...
        MoveToStartOfBlock = ...
        MoveToEndOfBlock = ...
        MoveToStartOfDocument = ...
        MoveToEndOfDocument = ...
        SelectNextChar = ...
        SelectPreviousChar = ...
        SelectNextWord = ...
        SelectPreviousWord = ...
        SelectNextLine = ...
        SelectPreviousLine = ...
        SelectNextPage = ...
        SelectPreviousPage = ...
        SelectStartOfLine = ...
        SelectEndOfLine = ...
        SelectStartOfBlock = ...
        SelectEndOfBlock = ...
        SelectStartOfDocument = ...
        SelectEndOfDocument = ...
        DeleteStartOfWord = ...
        DeleteEndOfWord = ...
        DeleteEndOfLine = ...
        InsertParagraphSeparator = ...
        InsertLineSeparator = ...
        SaveAs = ...
        Preferences = ...
        Quit = ...
        FullScreen = ...
        Deselect = ...
        DeleteCompleteLine = ...
        Backspace = ...
        Cancel = ...

    class SequenceMatch(enum.Enum):
        NoMatch = ...
        PartialMatch = ...
        ExactMatch = ...

    class SequenceFormat(enum.Enum):
        NativeText = ...
        PortableText = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, ks: QKeySequence) -> None: ...
    @typing.overload
    def __init__(self, key: QKeySequence.StandardKey) -> None: ...
    @typing.overload
    def __init__(
        self, key: str | None, format: QKeySequence.SequenceFormat = ...
    ) -> None: ...
    @typing.overload
    def __init__(
        self, k1: int, key2: int = ..., key3: int = ..., key4: int = ...
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        k1: QtCore.QKeyCombination,
        key2: QtCore.QKeyCombination = ...,
        key3: QtCore.QKeyCombination = ...,
        key4: QtCore.QKeyCombination = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, variant: typing.Any) -> None: ...
    def __hash__(self) -> int: ...
    @staticmethod
    def listToString(
        list: collections.abc.Iterable[
            QKeySequence | QKeySequence.StandardKey | str | None | int
        ],
        format: QKeySequence.SequenceFormat = ...,
    ) -> str: ...
    @staticmethod
    def listFromString(
        str: str | None, format: QKeySequence.SequenceFormat = ...
    ) -> list[QKeySequence]: ...
    @staticmethod
    def keyBindings(key: QKeySequence.StandardKey) -> list[QKeySequence]: ...
    @staticmethod
    def fromString(
        str: str | None, format: QKeySequence.SequenceFormat = ...
    ) -> QKeySequence: ...
    def toString(self, format: QKeySequence.SequenceFormat = ...) -> str: ...
    def swap(self, other: QKeySequence) -> None: ...
    def isDetached(self) -> bool: ...
    def __ge__(
        self, other: QKeySequence | QKeySequence.StandardKey | str | None | int
    ) -> bool: ...
    def __le__(
        self, other: QKeySequence | QKeySequence.StandardKey | str | None | int
    ) -> bool: ...
    def __gt__(
        self, other: QKeySequence | QKeySequence.StandardKey | str | None | int
    ) -> bool: ...
    def __lt__(
        self, ks: QKeySequence | QKeySequence.StandardKey | str | None | int
    ) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __getitem__(self, i: int) -> QtCore.QKeyCombination: ...
    @staticmethod
    def mnemonic(text: str | None) -> QKeySequence: ...
    def matches(
        self, seq: QKeySequence | QKeySequence.StandardKey | str | None | int
    ) -> QKeySequence.SequenceMatch: ...
    def isEmpty(self) -> bool: ...
    def __len__(self) -> int: ...
    def count(self) -> int: ...

class QMatrix4x4(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, values: collections.abc.Sequence[float]) -> None: ...
    @typing.overload
    def __init__(
        self,
        m11: float,
        m12: float,
        m13: float,
        m14: float,
        m21: float,
        m22: float,
        m23: float,
        m24: float,
        m31: float,
        m32: float,
        m33: float,
        m34: float,
        m41: float,
        m42: float,
        m43: float,
        m44: float,
    ) -> None: ...
    @typing.overload
    def __init__(self, transform: QTransform) -> None: ...
    @typing.overload
    def __init__(self, a0: QMatrix4x4) -> None: ...
    def __truediv__(self, divisor: float) -> QMatrix4x4: ...
    def __add__(self, m2: QMatrix4x4) -> QMatrix4x4: ...
    def __sub__(self, m2: QMatrix4x4) -> QMatrix4x4: ...
    @typing.overload
    def __mul__(self, m2: QMatrix4x4) -> QMatrix4x4: ...
    @typing.overload
    def __mul__(self, point: QtCore.QPoint) -> QtCore.QPoint: ...
    @typing.overload
    def __mul__(self, point: QtCore.QPointF) -> QtCore.QPointF: ...
    @typing.overload
    def __mul__(self, factor: float) -> QMatrix4x4: ...
    @typing.overload
    def __mul__(self, vector: QVector4D) -> QVector4D: ...
    @typing.overload
    def __mul__(self, vector: QVector3D) -> QVector3D: ...
    def __rmul__(self, factor: float) -> QMatrix4x4: ...
    def __matmul__(self, m2: QMatrix4x4) -> QMatrix4x4: ...
    def __neg__(self) -> QMatrix4x4: ...
    def isAffine(self) -> bool: ...
    @typing.overload
    def viewport(
        self,
        left: float,
        bottom: float,
        width: float,
        height: float,
        nearPlane: float = ...,
        farPlane: float = ...,
    ) -> None: ...
    @typing.overload
    def viewport(self, rect: QtCore.QRectF) -> None: ...
    def mapVector(self, vector: QVector3D) -> QVector3D: ...
    @typing.overload
    def map(self, point: QtCore.QPoint) -> QtCore.QPoint: ...
    @typing.overload
    def map(self, point: QtCore.QPointF) -> QtCore.QPointF: ...
    @typing.overload
    def map(self, point: QVector3D) -> QVector3D: ...
    @typing.overload
    def map(self, point: QVector4D) -> QVector4D: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __itruediv__(self, divisor: float) -> typing.Self: ...
    def __imatmul__(self, other: QMatrix4x4) -> typing.Self: ...
    @typing.overload
    def __imul__(self, other: QMatrix4x4) -> QMatrix4x4: ...
    @typing.overload
    def __imul__(self, factor: float) -> QMatrix4x4: ...
    def __isub__(self, other: QMatrix4x4) -> typing.Self: ...
    def __iadd__(self, other: QMatrix4x4) -> typing.Self: ...
    def fill(self, value: float) -> None: ...
    def setToIdentity(self) -> None: ...
    def isIdentity(self) -> bool: ...
    def setRow(self, index: int, value: QVector4D) -> None: ...
    def row(self, index: int) -> QVector4D: ...
    def setColumn(self, index: int, value: QVector4D) -> None: ...
    def column(self, index: int) -> QVector4D: ...
    def __setitem__(self, a0: typing.Any, a1: float) -> None: ...
    def __getitem__(self, a0: typing.Any) -> typing.Any: ...
    def optimize(self) -> None: ...
    def data(self) -> list[float]: ...
    @typing.overload
    def mapRect(self, rect: QtCore.QRect) -> QtCore.QRect: ...
    @typing.overload
    def mapRect(self, rect: QtCore.QRectF) -> QtCore.QRectF: ...
    @typing.overload
    def toTransform(self) -> QTransform: ...
    @typing.overload
    def toTransform(self, distanceToPlane: float) -> QTransform: ...
    def copyDataTo(self) -> list[float]: ...
    def lookAt(
        self, eye: QVector3D, center: QVector3D, up: QVector3D
    ) -> None: ...
    def perspective(
        self, angle: float, aspect: float, nearPlane: float, farPlane: float
    ) -> None: ...
    def frustum(
        self,
        left: float,
        right: float,
        bottom: float,
        top: float,
        nearPlane: float,
        farPlane: float,
    ) -> None: ...
    @typing.overload
    def ortho(self, rect: QtCore.QRect) -> None: ...
    @typing.overload
    def ortho(self, rect: QtCore.QRectF) -> None: ...
    @typing.overload
    def ortho(
        self,
        left: float,
        right: float,
        bottom: float,
        top: float,
        nearPlane: float,
        farPlane: float,
    ) -> None: ...
    @typing.overload
    def rotate(self, angle: float, vector: QVector3D) -> None: ...
    @typing.overload
    def rotate(
        self, angle: float, x: float, y: float, z: float = ...
    ) -> None: ...
    @typing.overload
    def rotate(self, quaternion: QQuaternion) -> None: ...
    @typing.overload
    def translate(self, vector: QVector3D) -> None: ...
    @typing.overload
    def translate(self, x: float, y: float) -> None: ...
    @typing.overload
    def translate(self, x: float, y: float, z: float) -> None: ...
    @typing.overload
    def scale(self, vector: QVector3D) -> None: ...
    @typing.overload
    def scale(self, x: float, y: float) -> None: ...
    @typing.overload
    def scale(self, x: float, y: float, z: float) -> None: ...
    @typing.overload
    def scale(self, factor: float) -> None: ...
    def normalMatrix(self) -> QMatrix3x3: ...
    def transposed(self) -> QMatrix4x4: ...
    def inverted(self) -> tuple[QMatrix4x4, bool | None]: ...
    def determinant(self) -> float: ...

class QMovie(QtCore.QObject):
    class CacheMode(enum.Enum):
        CacheNone = ...
        CacheAll = ...

    class MovieState(enum.Enum):
        NotRunning = ...
        Paused = ...
        Running = ...

    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self,
        device: QtCore.QIODevice | None,
        format: QtCore.QByteArray | bytes | bytearray | memoryview = ...,
        parent: QtCore.QObject | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        fileName: str | None,
        format: QtCore.QByteArray | bytes | bytearray | memoryview = ...,
        parent: QtCore.QObject | None = ...,
    ) -> None: ...
    def lastErrorString(self) -> str: ...
    def lastError(self) -> QImageReader.ImageReaderError: ...
    def stop(self) -> None: ...
    def setPaused(self, paused: bool) -> None: ...
    def jumpToNextFrame(self) -> bool: ...
    def start(self) -> None: ...
    frameChanged: typing.ClassVar[QtCore.pyqtSignal]
    finished: typing.ClassVar[QtCore.pyqtSignal]
    error: typing.ClassVar[QtCore.pyqtSignal]
    stateChanged: typing.ClassVar[QtCore.pyqtSignal]
    updated: typing.ClassVar[QtCore.pyqtSignal]
    resized: typing.ClassVar[QtCore.pyqtSignal]
    started: typing.ClassVar[QtCore.pyqtSignal]
    def setCacheMode(self, mode: QMovie.CacheMode) -> None: ...
    def cacheMode(self) -> QMovie.CacheMode: ...
    def setScaledSize(self, size: QtCore.QSize) -> None: ...
    def scaledSize(self) -> QtCore.QSize: ...
    def speed(self) -> int: ...
    def setSpeed(self, percentSpeed: int) -> None: ...
    def currentFrameNumber(self) -> int: ...
    def nextFrameDelay(self) -> int: ...
    def frameCount(self) -> int: ...
    def loopCount(self) -> int: ...
    def jumpToFrame(self, frameNumber: int) -> bool: ...
    def isValid(self) -> bool: ...
    def currentPixmap(self) -> QPixmap: ...
    def currentImage(self) -> QImage: ...
    def frameRect(self) -> QtCore.QRect: ...
    def state(self) -> QMovie.MovieState: ...
    def backgroundColor(self) -> QColor: ...
    def setBackgroundColor(
        self, color: QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def format(self) -> QtCore.QByteArray: ...
    def setFormat(
        self, format: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def fileName(self) -> str: ...
    def setFileName(self, fileName: str | None) -> None: ...
    def device(self) -> QtCore.QIODevice | None: ...
    def setDevice(self, device: QtCore.QIODevice | None) -> None: ...
    @staticmethod
    def supportedFormats() -> list[QtCore.QByteArray]: ...

class QSurface(PyQt6.sip.simplewrapper):
    class SurfaceType(enum.Enum):
        RasterSurface = ...
        OpenGLSurface = ...
        RasterGLSurface = ...
        OpenVGSurface = ...
        VulkanSurface = ...
        MetalSurface = ...
        Direct3DSurface = ...

    class SurfaceClass(enum.Enum):
        Window = ...
        Offscreen = ...

    @typing.overload
    def __init__(self, type: QSurface.SurfaceClass) -> None: ...
    @typing.overload
    def __init__(self, a0: QSurface) -> None: ...
    def supportsOpenGL(self) -> bool: ...
    def size(self) -> QtCore.QSize: ...
    def surfaceType(self) -> QSurface.SurfaceType: ...
    def format(self) -> QSurfaceFormat: ...
    def surfaceClass(self) -> QSurface.SurfaceClass: ...

class QOffscreenSurface(QtCore.QObject, QSurface):
    def __init__(
        self, screen: QScreen | None = ..., parent: QtCore.QObject | None = ...
    ) -> None: ...

    screenChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setScreen(self, screen: QScreen | None) -> None: ...
    def screen(self) -> QScreen | None: ...
    def size(self) -> QtCore.QSize: ...
    def requestedFormat(self) -> QSurfaceFormat: ...
    def format(self) -> QSurfaceFormat: ...
    def setFormat(self, format: QSurfaceFormat) -> None: ...
    def isValid(self) -> bool: ...
    def destroy(self) -> None: ...
    def create(self) -> None: ...
    def surfaceType(self) -> QSurface.SurfaceType: ...

class QOpenGLContextGroup(QtCore.QObject):
    @staticmethod
    def currentContextGroup() -> QOpenGLContextGroup | None: ...
    def shares(self) -> list[QOpenGLContext]: ...

class QOpenGLContext(QtCore.QObject):
    class OpenGLModuleType(enum.Enum):
        LibGL = ...
        LibGLES = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    @staticmethod
    def globalShareContext() -> QOpenGLContext | None: ...
    @staticmethod
    def supportsThreadedOpenGL() -> bool: ...
    def isOpenGLES(self) -> bool: ...
    @staticmethod
    def openGLModuleType() -> QOpenGLContext.OpenGLModuleType: ...
    aboutToBeDestroyed: typing.ClassVar[QtCore.pyqtSignal]
    def hasExtension(
        self, extension: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> bool: ...
    def extensions(self) -> set[QtCore.QByteArray]: ...
    @staticmethod
    def areSharing(
        first: QOpenGLContext | None, second: QOpenGLContext | None
    ) -> bool: ...
    @staticmethod
    def currentContext() -> QOpenGLContext | None: ...
    def surface(self) -> QSurface | None: ...
    def getProcAddress(
        self, procName: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> PyQt6.sip.voidptr | None: ...
    def swapBuffers(self, surface: QSurface | None) -> None: ...
    def doneCurrent(self) -> None: ...
    def makeCurrent(self, surface: QSurface | None) -> bool: ...
    def defaultFramebufferObject(self) -> int: ...
    def screen(self) -> QScreen | None: ...
    def shareGroup(self) -> QOpenGLContextGroup | None: ...
    def shareContext(self) -> QOpenGLContext | None: ...
    def format(self) -> QSurfaceFormat: ...
    def isValid(self) -> bool: ...
    def create(self) -> bool: ...
    def setScreen(self, screen: QScreen | None) -> None: ...
    def setShareContext(self, shareContext: QOpenGLContext | None) -> None: ...
    def setFormat(self, format: QSurfaceFormat) -> None: ...

class QPagedPaintDevice(QPaintDevice):
    class PdfVersion(enum.Enum):
        PdfVersion_1_4 = ...
        PdfVersion_A1b = ...
        PdfVersion_1_6 = ...
        PdfVersion_X4 = ...

    def pageRanges(self) -> QPageRanges: ...
    def setPageRanges(self, ranges: QPageRanges) -> None: ...
    def setPageMargins(
        self, margins: QtCore.QMarginsF, units: QPageLayout.Unit = ...
    ) -> bool: ...
    def setPageOrientation(
        self, orientation: QPageLayout.Orientation
    ) -> bool: ...
    def pageLayout(self) -> QPageLayout: ...
    def setPageLayout(self, pageLayout: QPageLayout) -> bool: ...
    def setPageSize(self, pageSize: QPageSize) -> bool: ...
    def newPage(self) -> bool: ...

class QPageLayout(PyQt6.sip.simplewrapper):
    class OutOfBoundsPolicy(enum.Enum):
        Reject = ...
        Clamp = ...

    class Mode(enum.Enum):
        StandardMode = ...
        FullPageMode = ...

    class Orientation(enum.Enum):
        Portrait = ...
        Landscape = ...

    class Unit(enum.Enum):
        Millimeter = ...
        Point = ...
        Inch = ...
        Pica = ...
        Didot = ...
        Cicero = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self,
        pageSize: QPageSize,
        orientation: QPageLayout.Orientation,
        margins: QtCore.QMarginsF,
        units: QPageLayout.Unit = ...,
        minMargins: QtCore.QMarginsF = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QPageLayout) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def paintRectPixels(self, resolution: int) -> QtCore.QRect: ...
    def paintRectPoints(self) -> QtCore.QRect: ...
    @typing.overload
    def paintRect(self) -> QtCore.QRectF: ...
    @typing.overload
    def paintRect(self, units: QPageLayout.Unit) -> QtCore.QRectF: ...
    def fullRectPixels(self, resolution: int) -> QtCore.QRect: ...
    def fullRectPoints(self) -> QtCore.QRect: ...
    @typing.overload
    def fullRect(self) -> QtCore.QRectF: ...
    @typing.overload
    def fullRect(self, units: QPageLayout.Unit) -> QtCore.QRectF: ...
    def maximumMargins(self) -> QtCore.QMarginsF: ...
    def minimumMargins(self) -> QtCore.QMarginsF: ...
    def setMinimumMargins(self, minMargins: QtCore.QMarginsF) -> None: ...
    def marginsPixels(self, resolution: int) -> QtCore.QMargins: ...
    def marginsPoints(self) -> QtCore.QMargins: ...
    @typing.overload
    def margins(self) -> QtCore.QMarginsF: ...
    @typing.overload
    def margins(self, units: QPageLayout.Unit) -> QtCore.QMarginsF: ...
    def setBottomMargin(
        self,
        bottomMargin: float,
        outOfBoundsPolicy: QPageLayout.OutOfBoundsPolicy = ...,
    ) -> bool: ...
    def setTopMargin(
        self,
        topMargin: float,
        outOfBoundsPolicy: QPageLayout.OutOfBoundsPolicy = ...,
    ) -> bool: ...
    def setRightMargin(
        self,
        rightMargin: float,
        outOfBoundsPolicy: QPageLayout.OutOfBoundsPolicy = ...,
    ) -> bool: ...
    def setLeftMargin(
        self,
        leftMargin: float,
        outOfBoundsPolicy: QPageLayout.OutOfBoundsPolicy = ...,
    ) -> bool: ...
    def setMargins(
        self,
        margins: QtCore.QMarginsF,
        outOfBoundsPolicy: QPageLayout.OutOfBoundsPolicy = ...,
    ) -> bool: ...
    def units(self) -> QPageLayout.Unit: ...
    def setUnits(self, units: QPageLayout.Unit) -> None: ...
    def orientation(self) -> QPageLayout.Orientation: ...
    def setOrientation(self, orientation: QPageLayout.Orientation) -> None: ...
    def pageSize(self) -> QPageSize: ...
    def setPageSize(
        self, pageSize: QPageSize, minMargins: QtCore.QMarginsF = ...
    ) -> None: ...
    def mode(self) -> QPageLayout.Mode: ...
    def setMode(self, mode: QPageLayout.Mode) -> None: ...
    def isValid(self) -> bool: ...
    def isEquivalentTo(self, other: QPageLayout) -> bool: ...
    def swap(self, other: QPageLayout) -> None: ...

class QPageRanges(PyQt6.sip.simplewrapper):
    class Range(PyQt6.sip.simplewrapper):
        from_: int = ...
        to: int = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: QPageRanges.Range) -> None: ...
        def __ge__(self, rhs: QPageRanges.Range) -> bool: ...
        def __ne__(self, other: object) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def __lt__(self, rhs: QPageRanges.Range) -> bool: ...
        def contains(self, pageNumber: int) -> bool: ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QPageRanges) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def lastPage(self) -> int: ...
    def firstPage(self) -> int: ...
    def isEmpty(self) -> bool: ...
    def contains(self, pageNumber: int) -> bool: ...
    @staticmethod
    def fromString(ranges: str | None) -> QPageRanges: ...
    def toString(self) -> str: ...
    def clear(self) -> None: ...
    def toRangeList(self) -> list[QPageRanges.Range]: ...
    def addRange(self, from_: int, to: int) -> None: ...
    def addPage(self, pageNumber: int) -> None: ...
    def swap(self, other: QPageRanges) -> None: ...

class QPageSize(PyQt6.sip.simplewrapper):
    class SizeMatchPolicy(enum.Enum):
        FuzzyMatch = ...
        FuzzyOrientationMatch = ...
        ExactMatch = ...

    class Unit(enum.Enum):
        Millimeter = ...
        Point = ...
        Inch = ...
        Pica = ...
        Didot = ...
        Cicero = ...

    class PageSizeId(enum.Enum):
        A4 = ...
        B5 = ...
        Letter = ...
        Legal = ...
        Executive = ...
        A0 = ...
        A1 = ...
        A2 = ...
        A3 = ...
        A5 = ...
        A6 = ...
        A7 = ...
        A8 = ...
        A9 = ...
        B0 = ...
        B1 = ...
        B10 = ...
        B2 = ...
        B3 = ...
        B4 = ...
        B6 = ...
        B7 = ...
        B8 = ...
        B9 = ...
        C5E = ...
        Comm10E = ...
        DLE = ...
        Folio = ...
        Ledger = ...
        Tabloid = ...
        Custom = ...
        A10 = ...
        A3Extra = ...
        A4Extra = ...
        A4Plus = ...
        A4Small = ...
        A5Extra = ...
        B5Extra = ...
        JisB0 = ...
        JisB1 = ...
        JisB2 = ...
        JisB3 = ...
        JisB4 = ...
        JisB5 = ...
        JisB6 = ...
        JisB7 = ...
        JisB8 = ...
        JisB9 = ...
        JisB10 = ...
        AnsiC = ...
        AnsiD = ...
        AnsiE = ...
        LegalExtra = ...
        LetterExtra = ...
        LetterPlus = ...
        LetterSmall = ...
        TabloidExtra = ...
        ArchA = ...
        ArchB = ...
        ArchC = ...
        ArchD = ...
        ArchE = ...
        Imperial7x9 = ...
        Imperial8x10 = ...
        Imperial9x11 = ...
        Imperial9x12 = ...
        Imperial10x11 = ...
        Imperial10x13 = ...
        Imperial10x14 = ...
        Imperial12x11 = ...
        Imperial15x11 = ...
        ExecutiveStandard = ...
        Note = ...
        Quarto = ...
        Statement = ...
        SuperA = ...
        SuperB = ...
        Postcard = ...
        DoublePostcard = ...
        Prc16K = ...
        Prc32K = ...
        Prc32KBig = ...
        FanFoldUS = ...
        FanFoldGerman = ...
        FanFoldGermanLegal = ...
        EnvelopeB4 = ...
        EnvelopeB5 = ...
        EnvelopeB6 = ...
        EnvelopeC0 = ...
        EnvelopeC1 = ...
        EnvelopeC2 = ...
        EnvelopeC3 = ...
        EnvelopeC4 = ...
        EnvelopeC6 = ...
        EnvelopeC65 = ...
        EnvelopeC7 = ...
        Envelope9 = ...
        Envelope11 = ...
        Envelope12 = ...
        Envelope14 = ...
        EnvelopeMonarch = ...
        EnvelopePersonal = ...
        EnvelopeChou3 = ...
        EnvelopeChou4 = ...
        EnvelopeInvite = ...
        EnvelopeItalian = ...
        EnvelopeKaku2 = ...
        EnvelopeKaku3 = ...
        EnvelopePrc1 = ...
        EnvelopePrc2 = ...
        EnvelopePrc3 = ...
        EnvelopePrc4 = ...
        EnvelopePrc5 = ...
        EnvelopePrc6 = ...
        EnvelopePrc7 = ...
        EnvelopePrc8 = ...
        EnvelopePrc9 = ...
        EnvelopePrc10 = ...
        EnvelopeYou4 = ...
        AnsiA = ...
        AnsiB = ...
        EnvelopeC5 = ...
        EnvelopeDL = ...
        Envelope10 = ...
        LastPageSize = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, pageSizeId: QPageSize.PageSizeId) -> None: ...
    @typing.overload
    def __init__(
        self,
        pointSize: QtCore.QSize,
        name: str | None = ...,
        matchPolicy: QPageSize.SizeMatchPolicy = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        size: QtCore.QSizeF,
        units: QPageSize.Unit,
        name: str | None = ...,
        matchPolicy: QPageSize.SizeMatchPolicy = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QPageSize) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def rectPixels(self, resolution: int) -> QtCore.QRect: ...
    def rectPoints(self) -> QtCore.QRect: ...
    def rect(self, units: QPageSize.Unit) -> QtCore.QRectF: ...
    @typing.overload
    def sizePixels(self, resolution: int) -> QtCore.QSize: ...
    @typing.overload
    @staticmethod
    def sizePixels(
        pageSizeId: QPageSize.PageSizeId, resolution: int
    ) -> QtCore.QSize: ...
    @typing.overload
    def sizePoints(self) -> QtCore.QSize: ...
    @typing.overload
    @staticmethod
    def sizePoints(pageSizeId: QPageSize.PageSizeId) -> QtCore.QSize: ...
    @typing.overload
    def size(self, units: QPageSize.Unit) -> QtCore.QSizeF: ...
    @typing.overload
    @staticmethod
    def size(
        pageSizeId: QPageSize.PageSizeId, units: QPageSize.Unit
    ) -> QtCore.QSizeF: ...
    @typing.overload
    def definitionUnits(self) -> QPageSize.Unit: ...
    @typing.overload
    @staticmethod
    def definitionUnits(
        pageSizeId: QPageSize.PageSizeId,
    ) -> QPageSize.Unit: ...
    @typing.overload
    def definitionSize(self) -> QtCore.QSizeF: ...
    @typing.overload
    @staticmethod
    def definitionSize(pageSizeId: QPageSize.PageSizeId) -> QtCore.QSizeF: ...
    @typing.overload
    def windowsId(self) -> int: ...
    @typing.overload
    @staticmethod
    def windowsId(pageSizeId: QPageSize.PageSizeId) -> int: ...
    @typing.overload
    def id(self) -> QPageSize.PageSizeId: ...
    @typing.overload
    @staticmethod
    def id(
        pointSize: QtCore.QSize, matchPolicy: QPageSize.SizeMatchPolicy = ...
    ) -> QPageSize.PageSizeId: ...
    @typing.overload
    @staticmethod
    def id(
        size: QtCore.QSizeF,
        units: QPageSize.Unit,
        matchPolicy: QPageSize.SizeMatchPolicy = ...,
    ) -> QPageSize.PageSizeId: ...
    @typing.overload
    @staticmethod
    def id(windowsId: int) -> QPageSize.PageSizeId: ...
    @typing.overload
    def name(self) -> str: ...
    @typing.overload
    @staticmethod
    def name(pageSizeId: QPageSize.PageSizeId) -> str: ...
    @typing.overload
    def key(self) -> str: ...
    @typing.overload
    @staticmethod
    def key(pageSizeId: QPageSize.PageSizeId) -> str: ...
    def isValid(self) -> bool: ...
    def isEquivalentTo(self, other: QPageSize) -> bool: ...
    def swap(self, other: QPageSize) -> None: ...

class QWindow(QtCore.QObject, QSurface):
    class Visibility(enum.Enum):
        Hidden = ...
        AutomaticVisibility = ...
        Windowed = ...
        Minimized = ...
        Maximized = ...
        FullScreen = ...

    class AncestorMode(enum.Enum):
        ExcludeTransients = ...
        IncludeTransients = ...

    @typing.overload
    def __init__(self, screen: QScreen | None = ...) -> None: ...
    @typing.overload
    def __init__(self, parent: QWindow | None) -> None: ...

    safeAreaMarginsChanged: typing.ClassVar[QtCore.pyqtSignal]
    def safeAreaMargins(self) -> QtCore.QMargins: ...
    def vulkanInstance(self) -> QVulkanInstance | None: ...
    def setVulkanInstance(self, instance: QVulkanInstance | None) -> None: ...
    def nativeEvent(
        self,
        eventType: QtCore.QByteArray | bytes | bytearray | memoryview,
        message: PyQt6.sip.voidptr | None,
    ) -> tuple[bool, PyQt6.sip.voidptr | None]: ...
    def closeEvent(self, a0: QCloseEvent | None) -> None: ...
    def paintEvent(self, a0: QPaintEvent | None) -> None: ...
    def startSystemMove(self) -> bool: ...
    def startSystemResize(self, edges: QtCore.Qt.Edge) -> bool: ...
    def setWindowStates(self, states: QtCore.Qt.WindowState) -> None: ...
    def windowStates(self) -> QtCore.Qt.WindowState: ...
    def setFlag(self, a0: QtCore.Qt.WindowType, on: bool = ...) -> None: ...
    opacityChanged: typing.ClassVar[QtCore.pyqtSignal]
    activeChanged: typing.ClassVar[QtCore.pyqtSignal]
    visibilityChanged: typing.ClassVar[QtCore.pyqtSignal]
    @staticmethod
    def fromWinId(id: PyQt6.sip.voidptr) -> QWindow | None: ...
    def mask(self) -> QRegion: ...
    def setMask(self, region: QRegion) -> None: ...
    def opacity(self) -> float: ...
    def setVisibility(self, v: QWindow.Visibility) -> None: ...
    def visibility(self) -> QWindow.Visibility: ...
    def tabletEvent(self, a0: QTabletEvent | None) -> None: ...
    def touchEvent(self, a0: QTouchEvent | None) -> None: ...
    def wheelEvent(self, a0: QWheelEvent | None) -> None: ...
    def mouseMoveEvent(self, a0: QMouseEvent | None) -> None: ...
    def mouseDoubleClickEvent(self, a0: QMouseEvent | None) -> None: ...
    def mouseReleaseEvent(self, a0: QMouseEvent | None) -> None: ...
    def mousePressEvent(self, a0: QMouseEvent | None) -> None: ...
    def keyReleaseEvent(self, a0: QKeyEvent | None) -> None: ...
    def keyPressEvent(self, a0: QKeyEvent | None) -> None: ...
    def event(self, a0: QtCore.QEvent | None) -> bool: ...
    def hideEvent(self, a0: QHideEvent | None) -> None: ...
    def showEvent(self, a0: QShowEvent | None) -> None: ...
    def focusOutEvent(self, a0: QFocusEvent | None) -> None: ...
    def focusInEvent(self, a0: QFocusEvent | None) -> None: ...
    def moveEvent(self, a0: QMoveEvent | None) -> None: ...
    def resizeEvent(self, a0: QResizeEvent | None) -> None: ...
    def exposeEvent(self, a0: QExposeEvent | None) -> None: ...
    windowTitleChanged: typing.ClassVar[QtCore.pyqtSignal]
    focusObjectChanged: typing.ClassVar[QtCore.pyqtSignal]
    contentOrientationChanged: typing.ClassVar[QtCore.pyqtSignal]
    visibleChanged: typing.ClassVar[QtCore.pyqtSignal]
    maximumHeightChanged: typing.ClassVar[QtCore.pyqtSignal]
    maximumWidthChanged: typing.ClassVar[QtCore.pyqtSignal]
    minimumHeightChanged: typing.ClassVar[QtCore.pyqtSignal]
    minimumWidthChanged: typing.ClassVar[QtCore.pyqtSignal]
    heightChanged: typing.ClassVar[QtCore.pyqtSignal]
    widthChanged: typing.ClassVar[QtCore.pyqtSignal]
    yChanged: typing.ClassVar[QtCore.pyqtSignal]
    xChanged: typing.ClassVar[QtCore.pyqtSignal]
    windowStateChanged: typing.ClassVar[QtCore.pyqtSignal]
    modalityChanged: typing.ClassVar[QtCore.pyqtSignal]
    screenChanged: typing.ClassVar[QtCore.pyqtSignal]
    def requestUpdate(self) -> None: ...
    def alert(self, msec: int) -> None: ...
    def setMaximumHeight(self, h: int) -> None: ...
    def setMaximumWidth(self, w: int) -> None: ...
    def setMinimumHeight(self, h: int) -> None: ...
    def setMinimumWidth(self, w: int) -> None: ...
    def setHeight(self, arg: int) -> None: ...
    def setWidth(self, arg: int) -> None: ...
    def setY(self, arg: int) -> None: ...
    def setX(self, arg: int) -> None: ...
    def setTitle(self, a0: str | None) -> None: ...
    def lower(self) -> None: ...
    def raise_(self) -> None: ...
    def close(self) -> bool: ...
    def showNormal(self) -> None: ...
    def showFullScreen(self) -> None: ...
    def showMaximized(self) -> None: ...
    def showMinimized(self) -> None: ...
    def hide(self) -> None: ...
    def show(self) -> None: ...
    def setVisible(self, visible: bool) -> None: ...
    def unsetCursor(self) -> None: ...
    def setCursor(self, a0: QCursor | QtCore.Qt.CursorShape) -> None: ...
    def cursor(self) -> QCursor: ...
    @typing.overload
    def mapFromGlobal(self, pos: QtCore.QPoint) -> QtCore.QPoint: ...
    @typing.overload
    def mapFromGlobal(self, pos: QtCore.QPointF) -> QtCore.QPointF: ...
    @typing.overload
    def mapToGlobal(self, pos: QtCore.QPoint) -> QtCore.QPoint: ...
    @typing.overload
    def mapToGlobal(self, pos: QtCore.QPointF) -> QtCore.QPointF: ...
    def focusObject(self) -> QtCore.QObject | None: ...
    def setScreen(self, screen: QScreen | None) -> None: ...
    def screen(self) -> QScreen | None: ...
    def setMouseGrabEnabled(self, grab: bool) -> bool: ...
    def setKeyboardGrabEnabled(self, grab: bool) -> bool: ...
    def destroy(self) -> None: ...
    def icon(self) -> QIcon: ...
    def setIcon(self, icon: QIcon) -> None: ...
    def filePath(self) -> str: ...
    def setFilePath(self, filePath: str | None) -> None: ...
    @typing.overload
    def resize(self, newSize: QtCore.QSize) -> None: ...
    @typing.overload
    def resize(self, w: int, h: int) -> None: ...
    @typing.overload
    def setPosition(self, pt: QtCore.QPoint) -> None: ...
    @typing.overload
    def setPosition(self, posx: int, posy: int) -> None: ...
    def position(self) -> QtCore.QPoint: ...
    def size(self) -> QtCore.QSize: ...
    def y(self) -> int: ...
    def x(self) -> int: ...
    def height(self) -> int: ...
    def width(self) -> int: ...
    def setFramePosition(self, point: QtCore.QPoint) -> None: ...
    def framePosition(self) -> QtCore.QPoint: ...
    def frameGeometry(self) -> QtCore.QRect: ...
    def frameMargins(self) -> QtCore.QMargins: ...
    def geometry(self) -> QtCore.QRect: ...
    @typing.overload
    def setGeometry(self, posx: int, posy: int, w: int, h: int) -> None: ...
    @typing.overload
    def setGeometry(self, rect: QtCore.QRect) -> None: ...
    def setSizeIncrement(self, size: QtCore.QSize) -> None: ...
    def setBaseSize(self, size: QtCore.QSize) -> None: ...
    def setMaximumSize(self, size: QtCore.QSize) -> None: ...
    def setMinimumSize(self, size: QtCore.QSize) -> None: ...
    def sizeIncrement(self) -> QtCore.QSize: ...
    def baseSize(self) -> QtCore.QSize: ...
    def maximumSize(self) -> QtCore.QSize: ...
    def minimumSize(self) -> QtCore.QSize: ...
    def maximumHeight(self) -> int: ...
    def maximumWidth(self) -> int: ...
    def minimumHeight(self) -> int: ...
    def minimumWidth(self) -> int: ...
    def isExposed(self) -> bool: ...
    def isAncestorOf(
        self, child: QWindow | None, mode: QWindow.AncestorMode = ...
    ) -> bool: ...
    def transientParent(self) -> QWindow | None: ...
    def setTransientParent(self, parent: QWindow | None) -> None: ...
    def setWindowState(self, state: QtCore.Qt.WindowState) -> None: ...
    def windowState(self) -> QtCore.Qt.WindowState: ...
    def devicePixelRatio(self) -> float: ...
    def contentOrientation(self) -> QtCore.Qt.ScreenOrientation: ...
    def reportContentOrientationChange(
        self, orientation: QtCore.Qt.ScreenOrientation
    ) -> None: ...
    def isActive(self) -> bool: ...
    def requestActivate(self) -> None: ...
    def setOpacity(self, level: float) -> None: ...
    def title(self) -> str: ...
    def type(self) -> QtCore.Qt.WindowType: ...
    def flags(self) -> QtCore.Qt.WindowType: ...
    def setFlags(self, flags: QtCore.Qt.WindowType) -> None: ...
    def requestedFormat(self) -> QSurfaceFormat: ...
    def format(self) -> QSurfaceFormat: ...
    def setFormat(self, format: QSurfaceFormat) -> None: ...
    def setModality(self, modality: QtCore.Qt.WindowModality) -> None: ...
    def modality(self) -> QtCore.Qt.WindowModality: ...
    def isModal(self) -> bool: ...
    def isTopLevel(self) -> bool: ...
    def setParent(self, parent: QWindow | None) -> None: ...
    def parent(self, mode: QWindow.AncestorMode = ...) -> QWindow | None: ...
    def winId(self) -> PyQt6.sip.voidptr: ...
    def create(self) -> None: ...
    def isVisible(self) -> bool: ...
    def surfaceType(self) -> QSurface.SurfaceType: ...
    def setSurfaceType(self, surfaceType: QSurface.SurfaceType) -> None: ...

class QPaintDeviceWindow(QWindow, QPaintDevice):
    def event(self, event: QtCore.QEvent | None) -> bool: ...
    def exposeEvent(self, a0: QExposeEvent | None) -> None: ...
    def metric(self, metric: QPaintDevice.PaintDeviceMetric) -> int: ...
    def paintEvent(self, event: QPaintEvent | None) -> None: ...
    @typing.overload
    def update(self, rect: QtCore.QRect) -> None: ...
    @typing.overload
    def update(self, region: QRegion) -> None: ...
    @typing.overload
    def update(self) -> None: ...

class QTextItem(PyQt6.sip.simplewrapper):
    class RenderFlag(enum.Flag):
        RightToLeft = ...
        Overline = ...
        Underline = ...
        StrikeOut = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QTextItem) -> None: ...
    def font(self) -> QFont: ...
    def text(self) -> str: ...
    def renderFlags(self) -> QTextItem.RenderFlag: ...
    def width(self) -> float: ...
    def ascent(self) -> float: ...
    def descent(self) -> float: ...

class QPaintEngine(PyQt6.sip.simplewrapper):
    class Type(enum.Enum):
        X11 = ...
        Windows = ...
        QuickDraw = ...
        CoreGraphics = ...
        MacPrinter = ...
        QWindowSystem = ...
        OpenGL = ...
        Picture = ...
        SVG = ...
        Raster = ...
        Direct3D = ...
        Pdf = ...
        OpenVG = ...
        OpenGL2 = ...
        PaintBuffer = ...
        Blitter = ...
        Direct2D = ...
        User = ...
        MaxUser = ...

    class PolygonDrawMode(enum.Enum):
        OddEvenMode = ...
        WindingMode = ...
        ConvexMode = ...
        PolylineMode = ...

    class DirtyFlag(enum.Flag):
        DirtyPen = ...
        DirtyBrush = ...
        DirtyBrushOrigin = ...
        DirtyFont = ...
        DirtyBackground = ...
        DirtyBackgroundMode = ...
        DirtyTransform = ...
        DirtyClipRegion = ...
        DirtyClipPath = ...
        DirtyHints = ...
        DirtyCompositionMode = ...
        DirtyClipEnabled = ...
        DirtyOpacity = ...
        AllDirty = ...

    class PaintEngineFeature(enum.Flag):
        PrimitiveTransform = ...
        PatternTransform = ...
        PixmapTransform = ...
        PatternBrush = ...
        LinearGradientFill = ...
        RadialGradientFill = ...
        ConicalGradientFill = ...
        AlphaBlend = ...
        PorterDuff = ...
        PainterPaths = ...
        Antialiasing = ...
        BrushStroke = ...
        ConstantOpacity = ...
        MaskedBrush = ...
        PaintOutsidePaintEvent = ...
        PerspectiveTransform = ...
        BlendModes = ...
        ObjectBoundingModeGradients = ...
        RasterOpModes = ...
        AllFeatures = ...

    def __init__(
        self, features: QPaintEngine.PaintEngineFeature = ...
    ) -> None: ...
    def hasFeature(self, feature: QPaintEngine.PaintEngineFeature) -> bool: ...
    def painter(self) -> QPainter | None: ...
    def type(self) -> QPaintEngine.Type: ...
    def paintDevice(self) -> QPaintDevice | None: ...
    def setPaintDevice(self, device: QPaintDevice | None) -> None: ...
    def drawImage(
        self,
        r: QtCore.QRectF,
        pm: QImage,
        sr: QtCore.QRectF,
        flags: QtCore.Qt.ImageConversionFlag = ...,
    ) -> None: ...
    def drawTiledPixmap(
        self, r: QtCore.QRectF, pixmap: QPixmap, s: QtCore.QPointF
    ) -> None: ...
    def drawTextItem(self, p: QtCore.QPointF, textItem: QTextItem) -> None: ...
    def drawPixmap(
        self, r: QtCore.QRectF, pm: QPixmap, sr: QtCore.QRectF
    ) -> None: ...
    @typing.overload
    def drawPolygon(
        self,
        points: PyQt6.sip.array[QtCore.QPointF] | None,
        mode: QPaintEngine.PolygonDrawMode,
    ) -> None: ...
    @typing.overload
    def drawPolygon(
        self,
        points: PyQt6.sip.array[QtCore.QPoint] | None,
        mode: QPaintEngine.PolygonDrawMode,
    ) -> None: ...
    @typing.overload
    def drawPoints(
        self, points: PyQt6.sip.array[QtCore.QPointF] | None
    ) -> None: ...
    @typing.overload
    def drawPoints(
        self, points: PyQt6.sip.array[QtCore.QPoint] | None
    ) -> None: ...
    def drawPath(self, path: QPainterPath) -> None: ...
    @typing.overload
    def drawEllipse(self, r: QtCore.QRectF) -> None: ...
    @typing.overload
    def drawEllipse(self, r: QtCore.QRect) -> None: ...
    @typing.overload
    def drawLines(
        self, lines: PyQt6.sip.array[QtCore.QLine] | None
    ) -> None: ...
    @typing.overload
    def drawLines(
        self, lines: PyQt6.sip.array[QtCore.QLineF] | None
    ) -> None: ...
    @typing.overload
    def drawRects(
        self, rects: PyQt6.sip.array[QtCore.QRect] | None
    ) -> None: ...
    @typing.overload
    def drawRects(
        self, rects: PyQt6.sip.array[QtCore.QRectF] | None
    ) -> None: ...
    def updateState(self, state: QPaintEngineState) -> None: ...
    def end(self) -> bool: ...
    def begin(self, pdev: QPaintDevice | None) -> bool: ...
    def setActive(self, newState: bool) -> None: ...
    def isActive(self) -> bool: ...

class QPaintEngineState(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QPaintEngineState) -> None: ...
    def penNeedsResolving(self) -> bool: ...
    def brushNeedsResolving(self) -> bool: ...
    def transform(self) -> QTransform: ...
    def painter(self) -> QPainter | None: ...
    def compositionMode(self) -> QPainter.CompositionMode: ...
    def renderHints(self) -> QPainter.RenderHint: ...
    def isClipEnabled(self) -> bool: ...
    def clipPath(self) -> QPainterPath: ...
    def clipRegion(self) -> QRegion: ...
    def clipOperation(self) -> QtCore.Qt.ClipOperation: ...
    def opacity(self) -> float: ...
    def font(self) -> QFont: ...
    def backgroundMode(self) -> QtCore.Qt.BGMode: ...
    def backgroundBrush(self) -> QBrush: ...
    def brushOrigin(self) -> QtCore.QPointF: ...
    def brush(self) -> QBrush: ...
    def pen(self) -> QPen: ...
    def state(self) -> QPaintEngine.DirtyFlag: ...

class QPainter(PyQt6.sip.simplewrapper):
    class PixmapFragmentHint(enum.Flag):
        OpaqueHint = ...

    class CompositionMode(enum.Enum):
        CompositionMode_SourceOver = ...
        CompositionMode_DestinationOver = ...
        CompositionMode_Clear = ...
        CompositionMode_Source = ...
        CompositionMode_Destination = ...
        CompositionMode_SourceIn = ...
        CompositionMode_DestinationIn = ...
        CompositionMode_SourceOut = ...
        CompositionMode_DestinationOut = ...
        CompositionMode_SourceAtop = ...
        CompositionMode_DestinationAtop = ...
        CompositionMode_Xor = ...
        CompositionMode_Plus = ...
        CompositionMode_Multiply = ...
        CompositionMode_Screen = ...
        CompositionMode_Overlay = ...
        CompositionMode_Darken = ...
        CompositionMode_Lighten = ...
        CompositionMode_ColorDodge = ...
        CompositionMode_ColorBurn = ...
        CompositionMode_HardLight = ...
        CompositionMode_SoftLight = ...
        CompositionMode_Difference = ...
        CompositionMode_Exclusion = ...
        RasterOp_SourceOrDestination = ...
        RasterOp_SourceAndDestination = ...
        RasterOp_SourceXorDestination = ...
        RasterOp_NotSourceAndNotDestination = ...
        RasterOp_NotSourceOrNotDestination = ...
        RasterOp_NotSourceXorDestination = ...
        RasterOp_NotSource = ...
        RasterOp_NotSourceAndDestination = ...
        RasterOp_SourceAndNotDestination = ...
        RasterOp_NotSourceOrDestination = ...
        RasterOp_SourceOrNotDestination = ...
        RasterOp_ClearDestination = ...
        RasterOp_SetDestination = ...
        RasterOp_NotDestination = ...

    class RenderHint(enum.Flag):
        Antialiasing = ...
        TextAntialiasing = ...
        SmoothPixmapTransform = ...
        LosslessImageRendering = ...
        VerticalSubpixelPositioning = ...
        NonCosmeticBrushPatterns = ...

    class PixmapFragment(PyQt6.sip.simplewrapper):
        height: float = ...
        opacity: float = ...
        rotation: float = ...
        scaleX: float = ...
        scaleY: float = ...
        sourceLeft: float = ...
        sourceTop: float = ...
        width: float = ...
        x: float = ...
        y: float = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: QPainter.PixmapFragment) -> None: ...
        @staticmethod
        def create(
            pos: QtCore.QPointF,
            sourceRect: QtCore.QRectF,
            scaleX: float = ...,
            scaleY: float = ...,
            rotation: float = ...,
            opacity: float = ...,
        ) -> QPainter.PixmapFragment: ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QPaintDevice | None) -> None: ...
    def drawGlyphRun(
        self, position: QtCore.QPointF, glyphRun: QGlyphRun
    ) -> None: ...
    def clipBoundingRect(self) -> QtCore.QRectF: ...
    @typing.overload
    def drawStaticText(
        self, topLeftPosition: QtCore.QPointF, staticText: QStaticText
    ) -> None: ...
    @typing.overload
    def drawStaticText(
        self, p: QtCore.QPoint, staticText: QStaticText
    ) -> None: ...
    @typing.overload
    def drawStaticText(
        self, x: int, y: int, staticText: QStaticText
    ) -> None: ...
    def drawPixmapFragments(
        self,
        fragments: PyQt6.sip.array[QPainter.PixmapFragment] | None,
        pixmap: QPixmap,
        hints: QPainter.PixmapFragmentHint = ...,
    ) -> None: ...
    def endNativePainting(self) -> None: ...
    def beginNativePainting(self) -> None: ...
    @typing.overload
    def drawRoundedRect(
        self,
        rect: QtCore.QRectF,
        xRadius: float,
        yRadius: float,
        mode: QtCore.Qt.SizeMode = ...,
    ) -> None: ...
    @typing.overload
    def drawRoundedRect(
        self,
        x: int,
        y: int,
        w: int,
        h: int,
        xRadius: float,
        yRadius: float,
        mode: QtCore.Qt.SizeMode = ...,
    ) -> None: ...
    @typing.overload
    def drawRoundedRect(
        self,
        rect: QtCore.QRect,
        xRadius: float,
        yRadius: float,
        mode: QtCore.Qt.SizeMode = ...,
    ) -> None: ...
    def testRenderHint(self, hint: QPainter.RenderHint) -> bool: ...
    def combinedTransform(self) -> QTransform: ...
    def worldTransform(self) -> QTransform: ...
    def setWorldTransform(
        self, matrix: QTransform, combine: bool = ...
    ) -> None: ...
    def resetTransform(self) -> None: ...
    def deviceTransform(self) -> QTransform: ...
    def transform(self) -> QTransform: ...
    def setTransform(
        self, transform: QTransform, combine: bool = ...
    ) -> None: ...
    def setWorldMatrixEnabled(self, enabled: bool) -> None: ...
    def worldMatrixEnabled(self) -> bool: ...
    def setOpacity(self, opacity: float) -> None: ...
    def opacity(self) -> float: ...
    @typing.overload
    def drawImage(self, r: QtCore.QRectF, image: QImage) -> None: ...
    @typing.overload
    def drawImage(
        self,
        targetRect: QtCore.QRectF,
        image: QImage,
        sourceRect: QtCore.QRectF,
        flags: QtCore.Qt.ImageConversionFlag = ...,
    ) -> None: ...
    @typing.overload
    def drawImage(self, r: QtCore.QRect, image: QImage) -> None: ...
    @typing.overload
    def drawImage(
        self,
        targetRect: QtCore.QRect,
        image: QImage,
        sourceRect: QtCore.QRect,
        flags: QtCore.Qt.ImageConversionFlag = ...,
    ) -> None: ...
    @typing.overload
    def drawImage(self, p: QtCore.QPointF, image: QImage) -> None: ...
    @typing.overload
    def drawImage(
        self,
        p: QtCore.QPointF,
        image: QImage,
        sr: QtCore.QRectF,
        flags: QtCore.Qt.ImageConversionFlag = ...,
    ) -> None: ...
    @typing.overload
    def drawImage(self, p: QtCore.QPoint, image: QImage) -> None: ...
    @typing.overload
    def drawImage(
        self,
        p: QtCore.QPoint,
        image: QImage,
        sr: QtCore.QRect,
        flags: QtCore.Qt.ImageConversionFlag = ...,
    ) -> None: ...
    @typing.overload
    def drawImage(
        self,
        x: int,
        y: int,
        image: QImage,
        sx: int = ...,
        sy: int = ...,
        sw: int = ...,
        sh: int = ...,
        flags: QtCore.Qt.ImageConversionFlag = ...,
    ) -> None: ...
    @typing.overload
    def drawPoint(self, p: QtCore.QPointF) -> None: ...
    @typing.overload
    def drawPoint(self, x: int, y: int) -> None: ...
    @typing.overload
    def drawPoint(self, p: QtCore.QPoint) -> None: ...
    @typing.overload
    def drawRect(self, rect: QtCore.QRectF) -> None: ...
    @typing.overload
    def drawRect(self, x: int, y: int, w: int, h: int) -> None: ...
    @typing.overload
    def drawRect(self, r: QtCore.QRect) -> None: ...
    @typing.overload
    def drawLine(self, l: QtCore.QLineF) -> None: ...
    @typing.overload
    def drawLine(self, line: QtCore.QLine) -> None: ...
    @typing.overload
    def drawLine(self, x1: int, y1: int, x2: int, y2: int) -> None: ...
    @typing.overload
    def drawLine(self, p1: QtCore.QPoint, p2: QtCore.QPoint) -> None: ...
    @typing.overload
    def drawLine(self, p1: QtCore.QPointF, p2: QtCore.QPointF) -> None: ...
    def paintEngine(self) -> QPaintEngine | None: ...
    def setRenderHints(
        self, hints: QPainter.RenderHint, on: bool = ...
    ) -> None: ...
    def renderHints(self) -> QPainter.RenderHint: ...
    def setRenderHint(
        self, hint: QPainter.RenderHint, on: bool = ...
    ) -> None: ...
    @typing.overload
    def eraseRect(self, a0: QtCore.QRectF) -> None: ...
    @typing.overload
    def eraseRect(self, rect: QtCore.QRect) -> None: ...
    @typing.overload
    def eraseRect(self, x: int, y: int, w: int, h: int) -> None: ...
    @typing.overload
    def fillRect(
        self,
        a0: QtCore.QRectF,
        a1: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
    ) -> None: ...
    @typing.overload
    def fillRect(
        self,
        a0: QtCore.QRect,
        a1: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
    ) -> None: ...
    @typing.overload
    def fillRect(
        self,
        x: int,
        y: int,
        w: int,
        h: int,
        b: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
    ) -> None: ...
    @typing.overload
    def fillRect(
        self, a0: QtCore.QRectF, color: QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    @typing.overload
    def fillRect(
        self, a0: QtCore.QRect, color: QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    @typing.overload
    def fillRect(
        self,
        x: int,
        y: int,
        w: int,
        h: int,
        b: QColor | QtCore.Qt.GlobalColor | int,
    ) -> None: ...
    @typing.overload
    def fillRect(
        self, x: int, y: int, w: int, h: int, c: QtCore.Qt.GlobalColor
    ) -> None: ...
    @typing.overload
    def fillRect(self, r: QtCore.QRect, c: QtCore.Qt.GlobalColor) -> None: ...
    @typing.overload
    def fillRect(self, r: QtCore.QRectF, c: QtCore.Qt.GlobalColor) -> None: ...
    @typing.overload
    def fillRect(
        self, x: int, y: int, w: int, h: int, style: QtCore.Qt.BrushStyle
    ) -> None: ...
    @typing.overload
    def fillRect(
        self, r: QtCore.QRect, style: QtCore.Qt.BrushStyle
    ) -> None: ...
    @typing.overload
    def fillRect(
        self, r: QtCore.QRectF, style: QtCore.Qt.BrushStyle
    ) -> None: ...
    @typing.overload
    def fillRect(
        self, x: int, y: int, w: int, h: int, preset: QGradient.Preset
    ) -> None: ...
    @typing.overload
    def fillRect(self, r: QtCore.QRect, preset: QGradient.Preset) -> None: ...
    @typing.overload
    def fillRect(self, r: QtCore.QRectF, preset: QGradient.Preset) -> None: ...
    @typing.overload
    def boundingRect(
        self, rect: QtCore.QRectF, flags: int, text: str | None
    ) -> QtCore.QRectF: ...
    @typing.overload
    def boundingRect(
        self, rect: QtCore.QRect, flags: int, text: str | None
    ) -> QtCore.QRect: ...
    @typing.overload
    def boundingRect(
        self,
        rectangle: QtCore.QRectF,
        text: str | None,
        option: QTextOption = ...,
    ) -> QtCore.QRectF: ...
    @typing.overload
    def boundingRect(
        self, x: int, y: int, w: int, h: int, flags: int, text: str | None
    ) -> QtCore.QRect: ...
    @typing.overload
    def drawText(self, p: QtCore.QPointF, s: str | None) -> None: ...
    @typing.overload
    def drawText(
        self, rectangle: QtCore.QRectF, flags: int, text: str | None
    ) -> QtCore.QRectF | None: ...
    @typing.overload
    def drawText(
        self, rectangle: QtCore.QRect, flags: int, text: str | None
    ) -> QtCore.QRect | None: ...
    @typing.overload
    def drawText(
        self,
        rectangle: QtCore.QRectF,
        text: str | None,
        option: QTextOption = ...,
    ) -> None: ...
    @typing.overload
    def drawText(self, p: QtCore.QPoint, s: str | None) -> None: ...
    @typing.overload
    def drawText(
        self,
        x: int,
        y: int,
        width: int,
        height: int,
        flags: int,
        text: str | None,
    ) -> QtCore.QRect | None: ...
    @typing.overload
    def drawText(self, x: int, y: int, s: str | None) -> None: ...
    def layoutDirection(self) -> QtCore.Qt.LayoutDirection: ...
    def setLayoutDirection(
        self, direction: QtCore.Qt.LayoutDirection
    ) -> None: ...
    @typing.overload
    def drawPixmap(
        self,
        targetRect: QtCore.QRectF,
        pixmap: QPixmap,
        sourceRect: QtCore.QRectF,
    ) -> None: ...
    @typing.overload
    def drawPixmap(
        self,
        targetRect: QtCore.QRect,
        pixmap: QPixmap,
        sourceRect: QtCore.QRect,
    ) -> None: ...
    @typing.overload
    def drawPixmap(self, p: QtCore.QPointF, pm: QPixmap) -> None: ...
    @typing.overload
    def drawPixmap(self, p: QtCore.QPoint, pm: QPixmap) -> None: ...
    @typing.overload
    def drawPixmap(self, r: QtCore.QRect, pm: QPixmap) -> None: ...
    @typing.overload
    def drawPixmap(self, x: int, y: int, pm: QPixmap) -> None: ...
    @typing.overload
    def drawPixmap(
        self, x: int, y: int, w: int, h: int, pm: QPixmap
    ) -> None: ...
    @typing.overload
    def drawPixmap(
        self,
        x: int,
        y: int,
        w: int,
        h: int,
        pm: QPixmap,
        sx: int,
        sy: int,
        sw: int,
        sh: int,
    ) -> None: ...
    @typing.overload
    def drawPixmap(
        self, x: int, y: int, pm: QPixmap, sx: int, sy: int, sw: int, sh: int
    ) -> None: ...
    @typing.overload
    def drawPixmap(
        self, p: QtCore.QPointF, pm: QPixmap, sr: QtCore.QRectF
    ) -> None: ...
    @typing.overload
    def drawPixmap(
        self, p: QtCore.QPoint, pm: QPixmap, sr: QtCore.QRect
    ) -> None: ...
    @typing.overload
    def drawPicture(self, p: QtCore.QPointF, picture: QPicture) -> None: ...
    @typing.overload
    def drawPicture(self, x: int, y: int, p: QPicture) -> None: ...
    @typing.overload
    def drawPicture(self, pt: QtCore.QPoint, p: QPicture) -> None: ...
    @typing.overload
    def drawTiledPixmap(
        self,
        rectangle: QtCore.QRectF,
        pixmap: QPixmap,
        pos: QtCore.QPointF = ...,
    ) -> None: ...
    @typing.overload
    def drawTiledPixmap(
        self,
        rectangle: QtCore.QRect,
        pixmap: QPixmap,
        pos: QtCore.QPoint = ...,
    ) -> None: ...
    @typing.overload
    def drawTiledPixmap(
        self,
        x: int,
        y: int,
        width: int,
        height: int,
        pixmap: QPixmap,
        sx: int = ...,
        sy: int = ...,
    ) -> None: ...
    @typing.overload
    def drawChord(self, rect: QtCore.QRectF, a: int, alen: int) -> None: ...
    @typing.overload
    def drawChord(self, rect: QtCore.QRect, a: int, alen: int) -> None: ...
    @typing.overload
    def drawChord(
        self, x: int, y: int, w: int, h: int, a: int, alen: int
    ) -> None: ...
    @typing.overload
    def drawPie(self, rect: QtCore.QRectF, a: int, alen: int) -> None: ...
    @typing.overload
    def drawPie(self, rect: QtCore.QRect, a: int, alen: int) -> None: ...
    @typing.overload
    def drawPie(
        self, x: int, y: int, w: int, h: int, a: int, alen: int
    ) -> None: ...
    @typing.overload
    def drawArc(self, rect: QtCore.QRectF, a: int, alen: int) -> None: ...
    @typing.overload
    def drawArc(self, r: QtCore.QRect, a: int, alen: int) -> None: ...
    @typing.overload
    def drawArc(
        self, x: int, y: int, w: int, h: int, a: int, alen: int
    ) -> None: ...
    @typing.overload
    def drawConvexPolygon(self, poly: QPolygonF) -> None: ...
    @typing.overload
    def drawConvexPolygon(self, poly: QPolygon) -> None: ...
    @typing.overload
    def drawConvexPolygon(
        self, points: PyQt6.sip.array[QtCore.QPointF] | None
    ) -> None: ...
    @typing.overload
    def drawConvexPolygon(
        self, point: QtCore.QPointF | None, *args: QtCore.QPointF
    ) -> None: ...
    @typing.overload
    def drawConvexPolygon(
        self, points: PyQt6.sip.array[QtCore.QPoint] | None
    ) -> None: ...
    @typing.overload
    def drawConvexPolygon(
        self, point: QtCore.QPoint | None, *args: QtCore.QPoint
    ) -> None: ...
    @typing.overload
    def drawPolygon(
        self, points: QPolygonF, fillRule: QtCore.Qt.FillRule = ...
    ) -> None: ...
    @typing.overload
    def drawPolygon(
        self, points: QPolygon, fillRule: QtCore.Qt.FillRule = ...
    ) -> None: ...
    @typing.overload
    def drawPolygon(
        self,
        points: PyQt6.sip.array[QtCore.QPointF] | None,
        fillRule: QtCore.Qt.FillRule = ...,
    ) -> None: ...
    @typing.overload
    def drawPolygon(
        self, point: QtCore.QPointF | None, *args: QtCore.QPointF
    ) -> None: ...
    @typing.overload
    def drawPolygon(
        self,
        points: PyQt6.sip.array[QtCore.QPoint] | None,
        fillRule: QtCore.Qt.FillRule = ...,
    ) -> None: ...
    @typing.overload
    def drawPolygon(
        self, point: QtCore.QPoint | None, *args: QtCore.QPoint
    ) -> None: ...
    @typing.overload
    def drawPolyline(self, polyline: QPolygonF) -> None: ...
    @typing.overload
    def drawPolyline(self, polyline: QPolygon) -> None: ...
    @typing.overload
    def drawPolyline(
        self, points: PyQt6.sip.array[QtCore.QPointF] | None
    ) -> None: ...
    @typing.overload
    def drawPolyline(
        self, point: QtCore.QPointF | None, *args: QtCore.QPointF
    ) -> None: ...
    @typing.overload
    def drawPolyline(
        self, points: PyQt6.sip.array[QtCore.QPoint] | None
    ) -> None: ...
    @typing.overload
    def drawPolyline(
        self, point: QtCore.QPoint | None, *args: QtCore.QPoint
    ) -> None: ...
    @typing.overload
    def drawEllipse(self, r: QtCore.QRectF) -> None: ...
    @typing.overload
    def drawEllipse(self, r: QtCore.QRect) -> None: ...
    @typing.overload
    def drawEllipse(self, x: int, y: int, w: int, h: int) -> None: ...
    @typing.overload
    def drawEllipse(
        self, center: QtCore.QPointF, rx: float, ry: float
    ) -> None: ...
    @typing.overload
    def drawEllipse(self, center: QtCore.QPoint, rx: int, ry: int) -> None: ...
    @typing.overload
    def drawRects(
        self, rects: PyQt6.sip.array[QtCore.QRectF] | None
    ) -> None: ...
    @typing.overload
    def drawRects(
        self, rect: QtCore.QRectF | None, *args: QtCore.QRectF
    ) -> None: ...
    @typing.overload
    def drawRects(
        self, rects: PyQt6.sip.array[QtCore.QRect] | None
    ) -> None: ...
    @typing.overload
    def drawRects(
        self, rect: QtCore.QRect | None, *args: QtCore.QRect
    ) -> None: ...
    @typing.overload
    def drawLines(
        self, lines: PyQt6.sip.array[QtCore.QLineF] | None
    ) -> None: ...
    @typing.overload
    def drawLines(
        self, line: QtCore.QLineF | None, *args: QtCore.QLineF
    ) -> None: ...
    @typing.overload
    def drawLines(
        self, pointPairs: PyQt6.sip.array[QtCore.QPointF] | None
    ) -> None: ...
    @typing.overload
    def drawLines(
        self, pointPair: QtCore.QPointF | None, *args: QtCore.QPointF
    ) -> None: ...
    @typing.overload
    def drawLines(
        self, lines: PyQt6.sip.array[QtCore.QLine] | None
    ) -> None: ...
    @typing.overload
    def drawLines(
        self, line: QtCore.QLine | None, *args: QtCore.QLine
    ) -> None: ...
    @typing.overload
    def drawLines(
        self, pointPairs: PyQt6.sip.array[QtCore.QPoint] | None
    ) -> None: ...
    @typing.overload
    def drawLines(
        self, pointPair: QtCore.QPoint | None, *args: QtCore.QPoint
    ) -> None: ...
    @typing.overload
    def drawPoints(self, points: QPolygonF) -> None: ...
    @typing.overload
    def drawPoints(self, points: QPolygon) -> None: ...
    @typing.overload
    def drawPoints(
        self, points: PyQt6.sip.array[QtCore.QPointF] | None
    ) -> None: ...
    @typing.overload
    def drawPoints(
        self, point: QtCore.QPointF | None, *args: QtCore.QPointF
    ) -> None: ...
    @typing.overload
    def drawPoints(
        self, points: PyQt6.sip.array[QtCore.QPoint] | None
    ) -> None: ...
    @typing.overload
    def drawPoints(
        self, point: QtCore.QPoint | None, *args: QtCore.QPoint
    ) -> None: ...
    def drawPath(self, path: QPainterPath) -> None: ...
    def fillPath(
        self,
        path: QPainterPath,
        brush: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
    ) -> None: ...
    def strokePath(
        self,
        path: QPainterPath,
        pen: QPen | QColor | QtCore.Qt.GlobalColor | int,
    ) -> None: ...
    def viewTransformEnabled(self) -> bool: ...
    def setViewTransformEnabled(self, enable: bool) -> None: ...
    @typing.overload
    def setViewport(self, viewport: QtCore.QRect) -> None: ...
    @typing.overload
    def setViewport(self, x: int, y: int, w: int, h: int) -> None: ...
    def viewport(self) -> QtCore.QRect: ...
    @typing.overload
    def setWindow(self, window: QtCore.QRect) -> None: ...
    @typing.overload
    def setWindow(self, x: int, y: int, w: int, h: int) -> None: ...
    def window(self) -> QtCore.QRect: ...
    @typing.overload
    def translate(self, offset: QtCore.QPointF) -> None: ...
    @typing.overload
    def translate(self, dx: float, dy: float) -> None: ...
    @typing.overload
    def translate(self, offset: QtCore.QPoint) -> None: ...
    def rotate(self, a: float) -> None: ...
    def shear(self, sh: float, sv: float) -> None: ...
    def scale(self, sx: float, sy: float) -> None: ...
    def restore(self) -> None: ...
    def save(self) -> None: ...
    def hasClipping(self) -> bool: ...
    def setClipping(self, enable: bool) -> None: ...
    def setClipPath(
        self, path: QPainterPath, operation: QtCore.Qt.ClipOperation = ...
    ) -> None: ...
    def setClipRegion(
        self, region: QRegion, operation: QtCore.Qt.ClipOperation = ...
    ) -> None: ...
    @typing.overload
    def setClipRect(
        self,
        rectangle: QtCore.QRectF,
        operation: QtCore.Qt.ClipOperation = ...,
    ) -> None: ...
    @typing.overload
    def setClipRect(
        self,
        x: int,
        y: int,
        width: int,
        height: int,
        operation: QtCore.Qt.ClipOperation = ...,
    ) -> None: ...
    @typing.overload
    def setClipRect(
        self, rectangle: QtCore.QRect, operation: QtCore.Qt.ClipOperation = ...
    ) -> None: ...
    def clipPath(self) -> QPainterPath: ...
    def clipRegion(self) -> QRegion: ...
    def background(self) -> QBrush: ...
    def setBackground(
        self, bg: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient
    ) -> None: ...
    @typing.overload
    def setBrushOrigin(self, a0: QtCore.QPointF) -> None: ...
    @typing.overload
    def setBrushOrigin(self, x: int, y: int) -> None: ...
    @typing.overload
    def setBrushOrigin(self, p: QtCore.QPoint) -> None: ...
    def brushOrigin(self) -> QtCore.QPoint: ...
    def backgroundMode(self) -> QtCore.Qt.BGMode: ...
    def setBackgroundMode(self, mode: QtCore.Qt.BGMode) -> None: ...
    def brush(self) -> QBrush: ...
    @typing.overload
    def setBrush(
        self, brush: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient
    ) -> None: ...
    @typing.overload
    def setBrush(self, style: QtCore.Qt.BrushStyle) -> None: ...
    def pen(self) -> QPen: ...
    @typing.overload
    def setPen(self, color: QColor | QtCore.Qt.GlobalColor | int) -> None: ...
    @typing.overload
    def setPen(
        self, pen: QPen | QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    @typing.overload
    def setPen(self, style: QtCore.Qt.PenStyle) -> None: ...
    def fontInfo(self) -> QFontInfo: ...
    def fontMetrics(self) -> QFontMetrics: ...
    def setFont(self, f: QFont) -> None: ...
    def font(self) -> QFont: ...
    def compositionMode(self) -> QPainter.CompositionMode: ...
    def setCompositionMode(self, mode: QPainter.CompositionMode) -> None: ...
    def isActive(self) -> bool: ...
    def end(self) -> bool: ...
    def begin(self, a0: QPaintDevice | None) -> bool: ...
    def device(self) -> QPaintDevice | None: ...
    def __exit__(
        self, type: typing.Any, value: typing.Any, traceback: typing.Any
    ) -> None: ...
    def __enter__(self) -> typing.Any: ...

class QPainterPath(PyQt6.sip.simplewrapper):
    class ElementType(enum.Enum):
        MoveToElement = ...
        LineToElement = ...
        CurveToElement = ...
        CurveToDataElement = ...

    class Element(PyQt6.sip.simplewrapper):
        type: QPainterPath.ElementType = ...
        x: float = ...
        y: float = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: QPainterPath.Element) -> None: ...
        def __ne__(self, other: object) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def isCurveTo(self) -> bool: ...
        def isLineTo(self) -> bool: ...
        def isMoveTo(self) -> bool: ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, startPoint: QtCore.QPointF) -> None: ...
    @typing.overload
    def __init__(self, other: QPainterPath) -> None: ...
    def capacity(self) -> int: ...
    def reserve(self, size: int) -> None: ...
    def clear(self) -> None: ...
    def swap(self, other: QPainterPath) -> None: ...
    @typing.overload
    def translated(self, dx: float, dy: float) -> QPainterPath: ...
    @typing.overload
    def translated(self, offset: QtCore.QPointF) -> QPainterPath: ...
    @typing.overload
    def translate(self, dx: float, dy: float) -> None: ...
    @typing.overload
    def translate(self, offset: QtCore.QPointF) -> None: ...
    def __isub__(self, other: QPainterPath) -> typing.Self: ...
    def __iadd__(self, other: QPainterPath) -> typing.Self: ...
    def __ior__(self, other: QPainterPath) -> typing.Self: ...
    def __iand__(self, other: QPainterPath) -> typing.Self: ...
    def __sub__(self, other: QPainterPath) -> QPainterPath: ...
    def __add__(self, other: QPainterPath) -> QPainterPath: ...
    def __or__(self, other: QPainterPath) -> QPainterPath: ...
    def __and__(self, other: QPainterPath) -> QPainterPath: ...
    def simplified(self) -> QPainterPath: ...
    @typing.overload
    def addRoundedRect(
        self,
        rect: QtCore.QRectF,
        xRadius: float,
        yRadius: float,
        mode: QtCore.Qt.SizeMode = ...,
    ) -> None: ...
    @typing.overload
    def addRoundedRect(
        self,
        x: float,
        y: float,
        w: float,
        h: float,
        xRadius: float,
        yRadius: float,
        mode: QtCore.Qt.SizeMode = ...,
    ) -> None: ...
    def subtracted(self, r: QPainterPath) -> QPainterPath: ...
    def intersected(self, r: QPainterPath) -> QPainterPath: ...
    def united(self, r: QPainterPath) -> QPainterPath: ...
    def slopeAtPercent(self, t: float) -> float: ...
    def angleAtPercent(self, t: float) -> float: ...
    def pointAtPercent(self, t: float) -> QtCore.QPointF: ...
    def percentAtLength(self, t: float) -> float: ...
    def length(self) -> float: ...
    def setElementPositionAt(self, i: int, x: float, y: float) -> None: ...
    def elementAt(self, i: int) -> QPainterPath.Element: ...
    def elementCount(self) -> int: ...
    def isEmpty(self) -> bool: ...
    @typing.overload
    def arcMoveTo(self, rect: QtCore.QRectF, angle: float) -> None: ...
    @typing.overload
    def arcMoveTo(
        self, x: float, y: float, w: float, h: float, angle: float
    ) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def toFillPolygon(self, matrix: QTransform = ...) -> QPolygonF: ...
    def toFillPolygons(self, matrix: QTransform = ...) -> list[QPolygonF]: ...
    def toSubpathPolygons(
        self, matrix: QTransform = ...
    ) -> list[QPolygonF]: ...
    def toReversed(self) -> QPainterPath: ...
    def setFillRule(self, fillRule: QtCore.Qt.FillRule) -> None: ...
    def fillRule(self) -> QtCore.Qt.FillRule: ...
    def controlPointRect(self) -> QtCore.QRectF: ...
    def boundingRect(self) -> QtCore.QRectF: ...
    @typing.overload
    def intersects(self, rect: QtCore.QRectF) -> bool: ...
    @typing.overload
    def intersects(self, p: QPainterPath) -> bool: ...
    @typing.overload
    def contains(self, pt: QtCore.QPointF) -> bool: ...
    @typing.overload
    def contains(self, rect: QtCore.QRectF) -> bool: ...
    @typing.overload
    def contains(self, p: QPainterPath) -> bool: ...
    def connectPath(self, path: QPainterPath) -> None: ...
    def addRegion(self, region: QRegion) -> None: ...
    def addPath(self, path: QPainterPath) -> None: ...
    @typing.overload
    def addText(
        self, point: QtCore.QPointF, f: QFont, text: str | None
    ) -> None: ...
    @typing.overload
    def addText(
        self, x: float, y: float, f: QFont, text: str | None
    ) -> None: ...
    def addPolygon(self, polygon: QPolygonF) -> None: ...
    @typing.overload
    def addEllipse(self, rect: QtCore.QRectF) -> None: ...
    @typing.overload
    def addEllipse(self, x: float, y: float, w: float, h: float) -> None: ...
    @typing.overload
    def addEllipse(
        self, center: QtCore.QPointF, rx: float, ry: float
    ) -> None: ...
    @typing.overload
    def addRect(self, rect: QtCore.QRectF) -> None: ...
    @typing.overload
    def addRect(self, x: float, y: float, w: float, h: float) -> None: ...
    def currentPosition(self) -> QtCore.QPointF: ...
    @typing.overload
    def quadTo(
        self, ctrlPt: QtCore.QPointF, endPt: QtCore.QPointF
    ) -> None: ...
    @typing.overload
    def quadTo(
        self, ctrlPtx: float, ctrlPty: float, endPtx: float, endPty: float
    ) -> None: ...
    @typing.overload
    def cubicTo(
        self,
        ctrlPt1: QtCore.QPointF,
        ctrlPt2: QtCore.QPointF,
        endPt: QtCore.QPointF,
    ) -> None: ...
    @typing.overload
    def cubicTo(
        self,
        ctrlPt1x: float,
        ctrlPt1y: float,
        ctrlPt2x: float,
        ctrlPt2y: float,
        endPtx: float,
        endPty: float,
    ) -> None: ...
    @typing.overload
    def arcTo(
        self, rect: QtCore.QRectF, startAngle: float, arcLength: float
    ) -> None: ...
    @typing.overload
    def arcTo(
        self,
        x: float,
        y: float,
        w: float,
        h: float,
        startAngle: float,
        arcLenght: float,
    ) -> None: ...
    @typing.overload
    def lineTo(self, p: QtCore.QPointF) -> None: ...
    @typing.overload
    def lineTo(self, x: float, y: float) -> None: ...
    @typing.overload
    def moveTo(self, p: QtCore.QPointF) -> None: ...
    @typing.overload
    def moveTo(self, x: float, y: float) -> None: ...
    def closeSubpath(self) -> None: ...

class QPainterPathStroker(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, pen: QPen | QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def dashOffset(self) -> float: ...
    def setDashOffset(self, offset: float) -> None: ...
    def createStroke(self, path: QPainterPath) -> QPainterPath: ...
    def dashPattern(self) -> list[float]: ...
    @typing.overload
    def setDashPattern(self, a0: QtCore.Qt.PenStyle) -> None: ...
    @typing.overload
    def setDashPattern(
        self, dashPattern: collections.abc.Iterable[float]
    ) -> None: ...
    def curveThreshold(self) -> float: ...
    def setCurveThreshold(self, threshold: float) -> None: ...
    def miterLimit(self) -> float: ...
    def setMiterLimit(self, length: float) -> None: ...
    def joinStyle(self) -> QtCore.Qt.PenJoinStyle: ...
    def setJoinStyle(self, style: QtCore.Qt.PenJoinStyle) -> None: ...
    def capStyle(self) -> QtCore.Qt.PenCapStyle: ...
    def setCapStyle(self, style: QtCore.Qt.PenCapStyle) -> None: ...
    def width(self) -> float: ...
    def setWidth(self, width: float) -> None: ...

class QPainterStateGuard(PyQt6.sip.simplewrapper):
    class InitialState(enum.Enum):
        Save = ...
        NoSave = ...

    def __init__(
        self,
        painter: QPainter | None,
        state: QPainterStateGuard.InitialState = ...,
    ) -> None: ...
    def restore(self) -> None: ...
    def save(self) -> None: ...
    def swap(self, other: QPainterStateGuard) -> None: ...

class QPalette(PyQt6.sip.simplewrapper):
    class ColorRole(enum.Enum):
        WindowText = ...
        Button = ...
        Light = ...
        Midlight = ...
        Dark = ...
        Mid = ...
        Text = ...
        BrightText = ...
        ButtonText = ...
        Base = ...
        Window = ...
        Shadow = ...
        Highlight = ...
        HighlightedText = ...
        Link = ...
        LinkVisited = ...
        AlternateBase = ...
        ToolTipBase = ...
        ToolTipText = ...
        PlaceholderText = ...
        Accent = ...
        NoRole = ...
        NColorRoles = ...

    class ColorGroup(enum.Enum):
        Active = ...
        Disabled = ...
        Inactive = ...
        NColorGroups = ...
        Current = ...
        All = ...
        Normal = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, button: QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    @typing.overload
    def __init__(self, button: QtCore.Qt.GlobalColor) -> None: ...
    @typing.overload
    def __init__(
        self,
        button: QColor | QtCore.Qt.GlobalColor | int,
        background: QColor | QtCore.Qt.GlobalColor | int,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        foreground: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
        button: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
        light: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
        dark: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
        mid: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
        text: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
        bright_text: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
        base: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
        background: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
    ) -> None: ...
    @typing.overload
    def __init__(self, palette: QPalette) -> None: ...
    @typing.overload
    def __init__(self, variant: typing.Any) -> None: ...
    def accent(self) -> QBrush: ...
    def swap(self, other: QPalette) -> None: ...
    def cacheKey(self) -> int: ...
    def isBrushSet(
        self, cg: QPalette.ColorGroup, cr: QPalette.ColorRole
    ) -> bool: ...
    @typing.overload
    def setColor(
        self,
        acg: QPalette.ColorGroup,
        acr: QPalette.ColorRole,
        acolor: QColor | QtCore.Qt.GlobalColor | int,
    ) -> None: ...
    @typing.overload
    def setColor(
        self,
        acr: QPalette.ColorRole,
        acolor: QColor | QtCore.Qt.GlobalColor | int,
    ) -> None: ...
    def resolve(self, a0: QPalette) -> QPalette: ...
    def isCopyOf(self, p: QPalette) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def placeholderText(self) -> QBrush: ...
    def toolTipText(self) -> QBrush: ...
    def toolTipBase(self) -> QBrush: ...
    def linkVisited(self) -> QBrush: ...
    def link(self) -> QBrush: ...
    def highlightedText(self) -> QBrush: ...
    def highlight(self) -> QBrush: ...
    def shadow(self) -> QBrush: ...
    def buttonText(self) -> QBrush: ...
    def brightText(self) -> QBrush: ...
    def midlight(self) -> QBrush: ...
    def window(self) -> QBrush: ...
    def alternateBase(self) -> QBrush: ...
    def base(self) -> QBrush: ...
    def text(self) -> QBrush: ...
    def mid(self) -> QBrush: ...
    def dark(self) -> QBrush: ...
    def light(self) -> QBrush: ...
    def button(self) -> QBrush: ...
    def windowText(self) -> QBrush: ...
    def isEqual(
        self, cr1: QPalette.ColorGroup, cr2: QPalette.ColorGroup
    ) -> bool: ...
    def setColorGroup(
        self,
        cr: QPalette.ColorGroup,
        foreground: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
        button: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
        light: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
        dark: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
        mid: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
        text: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
        bright_text: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
        base: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
        background: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
    ) -> None: ...
    @typing.overload
    def setBrush(
        self,
        cg: QPalette.ColorGroup,
        cr: QPalette.ColorRole,
        brush: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
    ) -> None: ...
    @typing.overload
    def setBrush(
        self,
        acr: QPalette.ColorRole,
        abrush: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
    ) -> None: ...
    @typing.overload
    def brush(
        self, cg: QPalette.ColorGroup, cr: QPalette.ColorRole
    ) -> QBrush: ...
    @typing.overload
    def brush(self, cr: QPalette.ColorRole) -> QBrush: ...
    @typing.overload
    def color(
        self, cg: QPalette.ColorGroup, cr: QPalette.ColorRole
    ) -> QColor: ...
    @typing.overload
    def color(self, cr: QPalette.ColorRole) -> QColor: ...
    def setCurrentColorGroup(self, cg: QPalette.ColorGroup) -> None: ...
    def currentColorGroup(self) -> QPalette.ColorGroup: ...

class QPdfOutputIntent(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, other: QPdfOutputIntent) -> None: ...
    def setOutputProfile(self, profile: QColorSpace) -> None: ...
    def outputProfile(self) -> QColorSpace: ...
    def setRegistryName(self, name: QtCore.QUrl) -> None: ...
    def registryName(self) -> QtCore.QUrl: ...
    def setOutputCondition(self, condition: str | None) -> None: ...
    def outputCondition(self) -> str: ...
    def setOutputConditionIdentifier(self, identifier: str | None) -> None: ...
    def outputConditionIdentifier(self) -> str: ...
    def swap(self, other: QPdfOutputIntent) -> None: ...

class QPdfWriter(QtCore.QObject, QPagedPaintDevice):
    class ColorModel(enum.Enum):
        RGB = ...
        Grayscale = ...
        CMYK = ...
        Auto = ...

    @typing.overload
    def __init__(self, filename: str | None) -> None: ...
    @typing.overload
    def __init__(self, device: QtCore.QIODevice | None) -> None: ...
    def setAuthor(self, author: str | None) -> None: ...
    def author(self) -> str: ...
    def setOutputIntent(self, intent: QPdfOutputIntent) -> None: ...
    def outputIntent(self) -> QPdfOutputIntent: ...
    def setColorModel(self, model: QPdfWriter.ColorModel) -> None: ...
    def colorModel(self) -> QPdfWriter.ColorModel: ...
    def setDocumentId(self, documentId: QtCore.QUuid) -> None: ...
    def documentId(self) -> QtCore.QUuid: ...
    def addFileAttachment(
        self,
        fileName: str | None,
        data: QtCore.QByteArray | bytes | bytearray | memoryview,
        mimeType: str | None = ...,
    ) -> None: ...
    def documentXmpMetadata(self) -> QtCore.QByteArray: ...
    def setDocumentXmpMetadata(
        self, xmpMetadata: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...
    def pdfVersion(self) -> QPagedPaintDevice.PdfVersion: ...
    def setPdfVersion(self, version: QPagedPaintDevice.PdfVersion) -> None: ...
    def resolution(self) -> int: ...
    def setResolution(self, resolution: int) -> None: ...
    def metric(self, id: QPaintDevice.PaintDeviceMetric) -> int: ...
    def paintEngine(self) -> QPaintEngine | None: ...
    def newPage(self) -> bool: ...
    def setCreator(self, creator: str | None) -> None: ...
    def creator(self) -> str: ...
    def setTitle(self, title: str | None) -> None: ...
    def title(self) -> str: ...

class QPen(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QtCore.Qt.PenStyle) -> None: ...
    @typing.overload
    def __init__(
        self,
        brush: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient,
        width: float,
        style: QtCore.Qt.PenStyle = ...,
        cap: QtCore.Qt.PenCapStyle = ...,
        join: QtCore.Qt.PenJoinStyle = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self, pen: QPen | QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    @typing.overload
    def __init__(self, variant: typing.Any) -> None: ...
    def swap(self, other: QPen) -> None: ...
    def setCosmetic(self, cosmetic: bool) -> None: ...
    def isCosmetic(self) -> bool: ...
    def setDashOffset(self, doffset: float) -> None: ...
    def dashOffset(self) -> float: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def setMiterLimit(self, limit: float) -> None: ...
    def miterLimit(self) -> float: ...
    def setDashPattern(
        self, pattern: collections.abc.Iterable[float]
    ) -> None: ...
    def dashPattern(self) -> list[float]: ...
    def setJoinStyle(self, pcs: QtCore.Qt.PenJoinStyle) -> None: ...
    def joinStyle(self) -> QtCore.Qt.PenJoinStyle: ...
    def setCapStyle(self, pcs: QtCore.Qt.PenCapStyle) -> None: ...
    def capStyle(self) -> QtCore.Qt.PenCapStyle: ...
    def isSolid(self) -> bool: ...
    def setBrush(
        self, brush: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient
    ) -> None: ...
    def brush(self) -> QBrush: ...
    def setColor(
        self, color: QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def color(self) -> QColor: ...
    def setWidth(self, width: int) -> None: ...
    def width(self) -> int: ...
    def setWidthF(self, width: float) -> None: ...
    def widthF(self) -> float: ...
    def setStyle(self, a0: QtCore.Qt.PenStyle) -> None: ...
    def style(self) -> QtCore.Qt.PenStyle: ...

class QPicture(QPaintDevice):
    @typing.overload
    def __init__(self, formatVersion: int = ...) -> None: ...
    @typing.overload
    def __init__(self, a0: QPicture) -> None: ...
    def swap(self, other: QPicture) -> None: ...
    def metric(self, m: QPaintDevice.PaintDeviceMetric) -> int: ...
    def paintEngine(self) -> QPaintEngine | None: ...
    def isDetached(self) -> bool: ...
    def detach(self) -> None: ...
    def setBoundingRect(self, r: QtCore.QRect) -> None: ...
    def boundingRect(self) -> QtCore.QRect: ...
    @typing.overload
    def save(self, fileName: str | None) -> bool: ...
    @typing.overload
    def save(self, dev: QtCore.QIODevice | None) -> bool: ...
    @typing.overload
    def load(self, fileName: str | None) -> bool: ...
    @typing.overload
    def load(self, dev: QtCore.QIODevice | None) -> bool: ...
    def play(self, p: QPainter | None) -> bool: ...
    def setData(self, data: PyQt6.sip.array[bytes] | None) -> None: ...
    def data(self) -> bytes | None: ...
    def size(self) -> int: ...
    def devType(self) -> int: ...
    def isNull(self) -> bool: ...

class QPixelFormat(PyQt6.sip.simplewrapper):
    class ByteOrder(enum.Enum):
        LittleEndian = ...
        BigEndian = ...
        CurrentSystemEndian = ...

    class YUVLayout(enum.Enum):
        YUV444 = ...
        YUV422 = ...
        YUV411 = ...
        YUV420P = ...
        YUV420SP = ...
        YV12 = ...
        UYVY = ...
        YUYV = ...
        NV12 = ...
        NV21 = ...
        IMC1 = ...
        IMC2 = ...
        IMC3 = ...
        IMC4 = ...
        Y8 = ...
        Y16 = ...

    class TypeInterpretation(enum.Enum):
        UnsignedInteger = ...
        UnsignedShort = ...
        UnsignedByte = ...
        FloatingPoint = ...

    class AlphaPremultiplied(enum.Enum):
        NotPremultiplied = ...
        Premultiplied = ...

    class AlphaPosition(enum.Enum):
        AtBeginning = ...
        AtEnd = ...

    class AlphaUsage(enum.Enum):
        UsesAlpha = ...
        IgnoresAlpha = ...

    class ColorModel(enum.Enum):
        RGB = ...
        BGR = ...
        Indexed = ...
        Grayscale = ...
        CMYK = ...
        HSL = ...
        HSV = ...
        YUV = ...
        Alpha = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self,
        mdl: QPixelFormat.ColorModel,
        firstSize: int,
        secondSize: int,
        thirdSize: int,
        fourthSize: int,
        fifthSize: int,
        alfa: int,
        usage: QPixelFormat.AlphaUsage,
        position: QPixelFormat.AlphaPosition,
        premult: QPixelFormat.AlphaPremultiplied,
        typeInterp: QPixelFormat.TypeInterpretation,
        byteOrder: QPixelFormat.ByteOrder = ...,
        subEnum: int = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, a0: QPixelFormat) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def subEnum(self) -> int: ...
    def yuvLayout(self) -> QPixelFormat.YUVLayout: ...
    def byteOrder(self) -> QPixelFormat.ByteOrder: ...
    def typeInterpretation(self) -> QPixelFormat.TypeInterpretation: ...
    def premultiplied(self) -> QPixelFormat.AlphaPremultiplied: ...
    def alphaPosition(self) -> QPixelFormat.AlphaPosition: ...
    def alphaUsage(self) -> QPixelFormat.AlphaUsage: ...
    def bitsPerPixel(self) -> int: ...
    def alphaSize(self) -> int: ...
    def brightnessSize(self) -> int: ...
    def lightnessSize(self) -> int: ...
    def saturationSize(self) -> int: ...
    def hueSize(self) -> int: ...
    def blackSize(self) -> int: ...
    def yellowSize(self) -> int: ...
    def magentaSize(self) -> int: ...
    def cyanSize(self) -> int: ...
    def blueSize(self) -> int: ...
    def greenSize(self) -> int: ...
    def redSize(self) -> int: ...
    def channelCount(self) -> int: ...
    def colorModel(self) -> QPixelFormat.ColorModel: ...

class QPixmapCache(PyQt6.sip.simplewrapper):
    class Key(PyQt6.sip.simplewrapper):
        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, other: QPixmapCache.Key) -> None: ...
        def __hash__(self) -> int: ...
        def isValid(self) -> bool: ...
        def swap(self, other: QPixmapCache.Key) -> None: ...
        def __ne__(self, other: object) -> bool: ...
        def __eq__(self, other: object) -> bool: ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QPixmapCache) -> None: ...
    @staticmethod
    def setCacheLimit(a0: int) -> None: ...
    @staticmethod
    def replace(key: QPixmapCache.Key, pixmap: QPixmap) -> bool: ...
    @typing.overload
    @staticmethod
    def remove(key: str | None) -> None: ...
    @typing.overload
    @staticmethod
    def remove(key: QPixmapCache.Key) -> None: ...
    @typing.overload
    @staticmethod
    def insert(key: str | None, a1: QPixmap) -> bool: ...
    @typing.overload
    @staticmethod
    def insert(pixmap: QPixmap) -> QPixmapCache.Key: ...
    @typing.overload
    @staticmethod
    def find(key: str | None) -> QPixmap: ...
    @typing.overload
    @staticmethod
    def find(key: QPixmapCache.Key) -> QPixmap: ...
    @staticmethod
    def clear() -> None: ...
    @staticmethod
    def cacheLimit() -> int: ...

class QPointingDeviceUniqueId(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QPointingDeviceUniqueId) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...
    def numericId(self) -> int: ...
    def isValid(self) -> bool: ...
    @staticmethod
    def fromNumericId(id: int) -> QPointingDeviceUniqueId: ...

class QPointingDevice(QInputDevice):
    class PointerType(enum.Flag):
        Unknown = ...
        Generic = ...
        Finger = ...
        Pen = ...
        Eraser = ...
        Cursor = ...
        AllPointerTypes = ...

    @typing.overload
    def __init__(
        self,
        name: str | None,
        systemId: int,
        devType: QInputDevice.DeviceType,
        pType: QPointingDevice.PointerType,
        caps: QInputDevice.Capability,
        maxPoints: int,
        buttonCount: int,
        seatName: str | None = ...,
        uniqueId: QPointingDeviceUniqueId = ...,
        parent: QtCore.QObject | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    @staticmethod
    def primaryPointingDevice(
        seatName: str | None = ...,
    ) -> QPointingDevice | None: ...
    def uniqueId(self) -> QPointingDeviceUniqueId: ...
    def buttonCount(self) -> int: ...
    def maximumPoints(self) -> int: ...
    def pointerType(self) -> QPointingDevice.PointerType: ...

class QPolygon(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, r: QtCore.QRect, closed: bool = ...) -> None: ...
    @typing.overload
    def __init__(self, v: collections.abc.Iterable[QtCore.QPoint]) -> None: ...
    @typing.overload
    def __init__(self, variant: typing.Any) -> None: ...
    @typing.overload
    def __init__(self, a0: QPolygon) -> None: ...
    def __mul__(self, m: QTransform) -> QPolygon: ...
    def toPolygonF(self) -> QPolygonF: ...
    def __contains__(self, value: QtCore.QPoint) -> int: ...
    @typing.overload
    def __delitem__(self, i: int) -> None: ...
    @typing.overload
    def __delitem__(self, slice: slice) -> None: ...
    @typing.overload
    def __setitem__(self, i: int, value: QtCore.QPoint) -> None: ...
    @typing.overload
    def __setitem__(self, slice: slice, list: QPolygon) -> None: ...
    @typing.overload
    def __getitem__(self, i: int) -> QtCore.QPoint: ...
    @typing.overload
    def __getitem__(self, slice: slice) -> QPolygon: ...
    def __lshift__(self, value: QtCore.QPoint) -> typing.Any: ...
    def __eq__(self, other: object) -> bool: ...
    @typing.overload
    def __iadd__(self, other: QPolygon) -> QPolygon: ...
    @typing.overload
    def __iadd__(self, value: QtCore.QPoint) -> QPolygon: ...
    def __add__(self, other: QPolygon) -> QPolygon: ...
    def __ne__(self, other: object) -> bool: ...
    @typing.overload
    def value(self, i: int) -> QtCore.QPoint: ...
    @typing.overload
    def value(self, i: int, defaultValue: QtCore.QPoint) -> QtCore.QPoint: ...
    def size(self) -> int: ...
    def resize(self, size: int) -> None: ...
    def replace(self, i: int, value: QtCore.QPoint) -> None: ...
    @typing.overload
    def remove(self, i: int) -> None: ...
    @typing.overload
    def remove(self, i: int, count: int) -> None: ...
    def prepend(self, value: QtCore.QPoint) -> None: ...
    def mid(self, pos: int, length: int = ...) -> QPolygon: ...
    def lastIndexOf(self, value: QtCore.QPoint, from_: int = ...) -> int: ...
    def last(self) -> QtCore.QPoint: ...
    def isEmpty(self) -> bool: ...
    def insert(self, i: int, value: QtCore.QPoint) -> None: ...
    def indexOf(self, value: QtCore.QPoint, from_: int = ...) -> int: ...
    def first(self) -> QtCore.QPoint: ...
    def fill(self, value: QtCore.QPoint, size: int = ...) -> None: ...
    def data(self) -> PyQt6.sip.voidptr | None: ...
    def __len__(self) -> int: ...
    @typing.overload
    def count(self, value: QtCore.QPoint) -> int: ...
    @typing.overload
    def count(self) -> int: ...
    def contains(self, value: QtCore.QPoint) -> bool: ...
    def clear(self) -> None: ...
    def at(self, i: int) -> QtCore.QPoint: ...
    def append(self, value: QtCore.QPoint) -> None: ...
    def intersects(self, r: QPolygon) -> bool: ...
    def subtracted(self, r: QPolygon) -> QPolygon: ...
    def intersected(self, r: QPolygon) -> QPolygon: ...
    def united(self, r: QPolygon) -> QPolygon: ...
    def containsPoint(
        self, pt: QtCore.QPoint, fillRule: QtCore.Qt.FillRule
    ) -> bool: ...
    @typing.overload
    def putPoints(
        self, index: int, firstx: int, firsty: int, *args: int
    ) -> None: ...
    @typing.overload
    def putPoints(
        self, index: int, nPoints: int, fromPolygon: QPolygon, from_: int = ...
    ) -> None: ...
    def setPoints(self, firstx: int, firsty: int, *args: int) -> None: ...
    @typing.overload
    def setPoint(self, index: int, x: int, y: int) -> None: ...
    @typing.overload
    def setPoint(self, index: int, p: QtCore.QPoint) -> None: ...
    def point(self, i: int) -> QtCore.QPoint: ...
    def boundingRect(self) -> QtCore.QRect: ...
    @typing.overload
    def translated(self, dx: int, dy: int) -> QPolygon: ...
    @typing.overload
    def translated(self, offset: QtCore.QPoint) -> QPolygon: ...
    @typing.overload
    def translate(self, dx: int, dy: int) -> None: ...
    @typing.overload
    def translate(self, offset: QtCore.QPoint) -> None: ...
    def swap(self, other: QPolygon) -> None: ...

class QPolygonF(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, v: collections.abc.Iterable[QtCore.QPointF]
    ) -> None: ...
    @typing.overload
    def __init__(self, r: QtCore.QRectF) -> None: ...
    @typing.overload
    def __init__(self, a: QPolygon) -> None: ...
    @typing.overload
    def __init__(self, variant: typing.Any) -> None: ...
    @typing.overload
    def __init__(self, a0: QPolygonF) -> None: ...
    def __mul__(self, m: QTransform) -> QPolygonF: ...
    def __contains__(self, value: QtCore.QPointF) -> int: ...
    @typing.overload
    def __delitem__(self, i: int) -> None: ...
    @typing.overload
    def __delitem__(self, slice: slice) -> None: ...
    @typing.overload
    def __setitem__(self, i: int, value: QtCore.QPointF) -> None: ...
    @typing.overload
    def __setitem__(self, slice: slice, list: QPolygonF) -> None: ...
    @typing.overload
    def __getitem__(self, i: int) -> QtCore.QPointF: ...
    @typing.overload
    def __getitem__(self, slice: slice) -> QPolygonF: ...
    def __lshift__(self, value: QtCore.QPointF) -> typing.Any: ...
    def __eq__(self, other: object) -> bool: ...
    @typing.overload
    def __iadd__(self, other: QPolygonF) -> QPolygonF: ...
    @typing.overload
    def __iadd__(self, value: QtCore.QPointF) -> QPolygonF: ...
    def __add__(self, other: QPolygonF) -> QPolygonF: ...
    def __ne__(self, other: object) -> bool: ...
    @typing.overload
    def value(self, i: int) -> QtCore.QPointF: ...
    @typing.overload
    def value(
        self, i: int, defaultValue: QtCore.QPointF
    ) -> QtCore.QPointF: ...
    def size(self) -> int: ...
    def resize(self, size: int) -> None: ...
    def replace(self, i: int, value: QtCore.QPointF) -> None: ...
    @typing.overload
    def remove(self, i: int) -> None: ...
    @typing.overload
    def remove(self, i: int, count: int) -> None: ...
    def prepend(self, value: QtCore.QPointF) -> None: ...
    def mid(self, pos: int, length: int = ...) -> QPolygonF: ...
    def lastIndexOf(self, value: QtCore.QPointF, from_: int = ...) -> int: ...
    def last(self) -> QtCore.QPointF: ...
    def isEmpty(self) -> bool: ...
    def insert(self, i: int, value: QtCore.QPointF) -> None: ...
    def indexOf(self, value: QtCore.QPointF, from_: int = ...) -> int: ...
    def first(self) -> QtCore.QPointF: ...
    def fill(self, value: QtCore.QPointF, size: int = ...) -> None: ...
    def data(self) -> PyQt6.sip.voidptr | None: ...
    def __len__(self) -> int: ...
    @typing.overload
    def count(self, value: QtCore.QPointF) -> int: ...
    @typing.overload
    def count(self) -> int: ...
    def contains(self, value: QtCore.QPointF) -> bool: ...
    def clear(self) -> None: ...
    def at(self, i: int) -> QtCore.QPointF: ...
    def append(self, value: QtCore.QPointF) -> None: ...
    def intersects(self, r: QPolygonF) -> bool: ...
    def subtracted(self, r: QPolygonF) -> QPolygonF: ...
    def intersected(self, r: QPolygonF) -> QPolygonF: ...
    def united(self, r: QPolygonF) -> QPolygonF: ...
    def containsPoint(
        self, pt: QtCore.QPointF, fillRule: QtCore.Qt.FillRule
    ) -> bool: ...
    def boundingRect(self) -> QtCore.QRectF: ...
    def isClosed(self) -> bool: ...
    def toPolygon(self) -> QPolygon: ...
    @typing.overload
    def translated(self, dx: float, dy: float) -> QPolygonF: ...
    @typing.overload
    def translated(self, offset: QtCore.QPointF) -> QPolygonF: ...
    @typing.overload
    def translate(self, dx: float, dy: float) -> None: ...
    @typing.overload
    def translate(self, offset: QtCore.QPointF) -> None: ...
    def swap(self, other: QPolygonF) -> None: ...

class QQuaternion(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, aScalar: float, xpos: float, ypos: float, zpos: float
    ) -> None: ...
    @typing.overload
    def __init__(self, aScalar: float, aVector: QVector3D) -> None: ...
    @typing.overload
    def __init__(self, aVector: QVector4D) -> None: ...
    @typing.overload
    def __init__(self, a0: QQuaternion) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __truediv__(self, divisor: float) -> QQuaternion: ...
    def __add__(self, q2: QQuaternion) -> QQuaternion: ...
    def __sub__(self, q2: QQuaternion) -> QQuaternion: ...
    @typing.overload
    def __mul__(self, q2: QQuaternion) -> QQuaternion: ...
    @typing.overload
    def __mul__(self, factor: float) -> QQuaternion: ...
    @typing.overload
    def __mul__(self, vec: QVector3D) -> QVector3D: ...
    def __rmul__(self, factor: float) -> QQuaternion: ...
    def __neg__(self) -> QQuaternion: ...
    def toEulerAngles(self) -> QVector3D: ...
    def conjugated(self) -> QQuaternion: ...
    def inverted(self) -> QQuaternion: ...
    @staticmethod
    def dotProduct(q1: QQuaternion, q2: QQuaternion) -> float: ...
    @staticmethod
    def rotationTo(from_: QVector3D, to: QVector3D) -> QQuaternion: ...
    @staticmethod
    def fromDirection(direction: QVector3D, up: QVector3D) -> QQuaternion: ...
    @staticmethod
    def fromAxes(
        xAxis: QVector3D, yAxis: QVector3D, zAxis: QVector3D
    ) -> QQuaternion: ...
    def getAxes(
        self,
    ) -> tuple[QVector3D | None, QVector3D | None, QVector3D | None]: ...
    @staticmethod
    def fromRotationMatrix(rot3x3: QMatrix3x3) -> QQuaternion: ...
    def toRotationMatrix(self) -> QMatrix3x3: ...
    @typing.overload
    @staticmethod
    def fromEulerAngles(
        pitch: float, yaw: float, roll: float
    ) -> QQuaternion: ...
    @typing.overload
    @staticmethod
    def fromEulerAngles(eulerAngles: QVector3D) -> QQuaternion: ...
    def getEulerAngles(
        self,
    ) -> tuple[float | None, float | None, float | None]: ...
    def getAxisAndAngle(self) -> tuple[QVector3D | None, float | None]: ...
    def toVector4D(self) -> QVector4D: ...
    def vector(self) -> QVector3D: ...
    @typing.overload
    def setVector(self, aVector: QVector3D) -> None: ...
    @typing.overload
    def setVector(self, aX: float, aY: float, aZ: float) -> None: ...
    def __itruediv__(self, divisor: float) -> typing.Self: ...
    @typing.overload
    def __imul__(self, factor: float) -> QQuaternion: ...
    @typing.overload
    def __imul__(self, quaternion: QQuaternion) -> QQuaternion: ...
    def __isub__(self, quaternion: QQuaternion) -> typing.Self: ...
    def __iadd__(self, quaternion: QQuaternion) -> typing.Self: ...
    def setScalar(self, aScalar: float) -> None: ...
    def setZ(self, aZ: float) -> None: ...
    def setY(self, aY: float) -> None: ...
    def setX(self, aX: float) -> None: ...
    def scalar(self) -> float: ...
    def z(self) -> float: ...
    def y(self) -> float: ...
    def x(self) -> float: ...
    def isIdentity(self) -> bool: ...
    def isNull(self) -> bool: ...
    @staticmethod
    def nlerp(q1: QQuaternion, q2: QQuaternion, t: float) -> QQuaternion: ...
    @staticmethod
    def slerp(q1: QQuaternion, q2: QQuaternion, t: float) -> QQuaternion: ...
    @typing.overload
    @staticmethod
    def fromAxisAndAngle(axis: QVector3D, angle: float) -> QQuaternion: ...
    @typing.overload
    @staticmethod
    def fromAxisAndAngle(
        x: float, y: float, z: float, angle: float
    ) -> QQuaternion: ...
    def rotatedVector(self, vector: QVector3D) -> QVector3D: ...
    def normalize(self) -> None: ...
    def normalized(self) -> QQuaternion: ...
    def lengthSquared(self) -> float: ...
    def length(self) -> float: ...

class QRasterWindow(QPaintDeviceWindow):
    def __init__(self, parent: QWindow | None = ...) -> None: ...
    def resizeEvent(self, event: QResizeEvent | None) -> None: ...
    def metric(self, metric: QPaintDevice.PaintDeviceMetric) -> int: ...

class QRawFont(PyQt6.sip.simplewrapper):
    class LayoutFlag(enum.Flag):
        SeparateAdvances = ...
        KernedAdvances = ...
        UseDesignMetrics = ...

    class AntialiasingType(enum.Enum):
        PixelAntialiasing = ...
        SubPixelAntialiasing = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self,
        fileName: str | None,
        pixelSize: float,
        hintingPreference: QFont.HintingPreference = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        fontData: QtCore.QByteArray | bytes | bytearray | memoryview,
        pixelSize: float,
        hintingPreference: QFont.HintingPreference = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QRawFont) -> None: ...
    def __hash__(self) -> int: ...
    def capHeight(self) -> float: ...
    def swap(self, other: QRawFont) -> None: ...
    def underlinePosition(self) -> float: ...
    def lineThickness(self) -> float: ...
    def boundingRect(self, glyphIndex: int) -> QtCore.QRectF: ...
    @staticmethod
    def fromFont(
        font: QFont, writingSystem: QFontDatabase.WritingSystem = ...
    ) -> QRawFont: ...
    @typing.overload
    def fontTable(self, tagName: str | None) -> QtCore.QByteArray: ...
    @typing.overload
    def fontTable(self, tag: QFont.Tag) -> QtCore.QByteArray: ...
    def supportedWritingSystems(self) -> list[QFontDatabase.WritingSystem]: ...
    @typing.overload
    def supportsCharacter(self, ucs4: int) -> bool: ...
    @typing.overload
    def supportsCharacter(self, character: str) -> bool: ...
    def loadFromData(
        self,
        fontData: QtCore.QByteArray | bytes | bytearray | memoryview,
        pixelSize: float,
        hintingPreference: QFont.HintingPreference,
    ) -> None: ...
    def loadFromFile(
        self,
        fileName: str | None,
        pixelSize: float,
        hintingPreference: QFont.HintingPreference,
    ) -> None: ...
    def unitsPerEm(self) -> float: ...
    def maxCharWidth(self) -> float: ...
    def averageCharWidth(self) -> float: ...
    def xHeight(self) -> float: ...
    def leading(self) -> float: ...
    def descent(self) -> float: ...
    def ascent(self) -> float: ...
    def hintingPreference(self) -> QFont.HintingPreference: ...
    def pixelSize(self) -> float: ...
    def setPixelSize(self, pixelSize: float) -> None: ...
    def pathForGlyph(self, glyphIndex: int) -> QPainterPath: ...
    def alphaMapForGlyph(
        self,
        glyphIndex: int,
        antialiasingType: QRawFont.AntialiasingType = ...,
        transform: QTransform = ...,
    ) -> QImage: ...
    @typing.overload
    def advancesForGlyphIndexes(
        self,
        glyphIndexes: collections.abc.Iterable[int],
        layoutFlags: QRawFont.LayoutFlag,
    ) -> list[QtCore.QPointF]: ...
    @typing.overload
    def advancesForGlyphIndexes(
        self, glyphIndexes: collections.abc.Iterable[int]
    ) -> list[QtCore.QPointF]: ...
    def glyphIndexesForString(self, text: str | None) -> list[int]: ...
    def weight(self) -> int: ...
    def style(self) -> QFont.Style: ...
    def styleName(self) -> str: ...
    def familyName(self) -> str: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def isValid(self) -> bool: ...

class QRegion(PyQt6.sip.simplewrapper):
    class RegionType(enum.Enum):
        Rectangle = ...
        Ellipse = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, x: int, y: int, w: int, h: int, type: QRegion.RegionType = ...
    ) -> None: ...
    @typing.overload
    def __init__(
        self, r: QtCore.QRect, type: QRegion.RegionType = ...
    ) -> None: ...
    @typing.overload
    def __init__(
        self, a: QPolygon, fillRule: QtCore.Qt.FillRule = ...
    ) -> None: ...
    @typing.overload
    def __init__(self, bitmap: QBitmap) -> None: ...
    @typing.overload
    def __init__(self, region: QRegion) -> None: ...
    @typing.overload
    def __init__(self, variant: typing.Any) -> None: ...
    def __mul__(self, m: QTransform) -> QRegion: ...
    def isNull(self) -> bool: ...
    def swap(self, other: QRegion) -> None: ...
    def rectCount(self) -> int: ...
    @typing.overload
    def intersects(self, r: QRegion) -> bool: ...
    @typing.overload
    def intersects(self, r: QtCore.QRect) -> bool: ...
    def xored(self, r: QRegion) -> QRegion: ...
    def subtracted(self, r: QRegion) -> QRegion: ...
    @typing.overload
    def intersected(self, r: QRegion) -> QRegion: ...
    @typing.overload
    def intersected(self, r: QtCore.QRect) -> QRegion: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __ixor__(self, r: QRegion) -> typing.Self: ...
    def __isub__(self, r: QRegion) -> typing.Self: ...
    @typing.overload
    def __iand__(self, r: QRegion) -> QRegion: ...
    @typing.overload
    def __iand__(self, r: QtCore.QRect) -> QRegion: ...
    @typing.overload
    def __iadd__(self, r: QRegion) -> QRegion: ...
    @typing.overload
    def __iadd__(self, r: QtCore.QRect) -> QRegion: ...
    def __ior__(self, r: QRegion) -> typing.Self: ...
    def __xor__(self, r: QRegion) -> QRegion: ...
    def __sub__(self, r: QRegion) -> QRegion: ...
    @typing.overload
    def __and__(self, r: QRegion) -> QRegion: ...
    @typing.overload
    def __and__(self, r: QtCore.QRect) -> QRegion: ...
    @typing.overload
    def __add__(self, r: QRegion) -> QRegion: ...
    @typing.overload
    def __add__(self, r: QtCore.QRect) -> QRegion: ...
    def setRects(self, a0: collections.abc.Iterable[QtCore.QRect]) -> None: ...
    def __or__(self, r: QRegion) -> QRegion: ...
    def boundingRect(self) -> QtCore.QRect: ...
    @typing.overload
    def united(self, r: QRegion) -> QRegion: ...
    @typing.overload
    def united(self, r: QtCore.QRect) -> QRegion: ...
    @typing.overload
    def translated(self, dx: int, dy: int) -> QRegion: ...
    @typing.overload
    def translated(self, p: QtCore.QPoint) -> QRegion: ...
    @typing.overload
    def translate(self, dx: int, dy: int) -> None: ...
    @typing.overload
    def translate(self, p: QtCore.QPoint) -> None: ...
    @typing.overload
    def __contains__(self, p: QtCore.QPoint) -> int: ...
    @typing.overload
    def __contains__(self, r: QtCore.QRect) -> int: ...
    @typing.overload
    def contains(self, p: QtCore.QPoint) -> bool: ...
    @typing.overload
    def contains(self, r: QtCore.QRect) -> bool: ...
    def __bool__(self) -> int: ...
    def isEmpty(self) -> bool: ...

class QRgba64(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QRgba64) -> None: ...
    def __int__(self) -> int: ...
    def unpremultiplied(self) -> QRgba64: ...
    def premultiplied(self) -> QRgba64: ...
    def toRgb16(self) -> int: ...
    def toArgb32(self) -> int: ...
    def alpha8(self) -> int: ...
    def blue8(self) -> int: ...
    def green8(self) -> int: ...
    def red8(self) -> int: ...
    def setAlpha(self, _alpha: int) -> None: ...
    def setBlue(self, _blue: int) -> None: ...
    def setGreen(self, _green: int) -> None: ...
    def setRed(self, _red: int) -> None: ...
    def alpha(self) -> int: ...
    def blue(self) -> int: ...
    def green(self) -> int: ...
    def red(self) -> int: ...
    def isTransparent(self) -> bool: ...
    def isOpaque(self) -> bool: ...
    @staticmethod
    def fromArgb32(rgb: int) -> QRgba64: ...
    @staticmethod
    def fromRgba(red: int, green: int, blue: int, alpha: int) -> QRgba64: ...
    @typing.overload
    @staticmethod
    def fromRgba64(c: int) -> QRgba64: ...
    @typing.overload
    @staticmethod
    def fromRgba64(red: int, green: int, blue: int, alpha: int) -> QRgba64: ...

class QScreen(QtCore.QObject):
    def virtualSiblingAt(self, point: QtCore.QPoint) -> QScreen | None: ...
    def serialNumber(self) -> str: ...
    def model(self) -> str: ...
    def manufacturer(self) -> str: ...
    availableGeometryChanged: typing.ClassVar[QtCore.pyqtSignal]
    virtualGeometryChanged: typing.ClassVar[QtCore.pyqtSignal]
    physicalSizeChanged: typing.ClassVar[QtCore.pyqtSignal]
    refreshRateChanged: typing.ClassVar[QtCore.pyqtSignal]
    orientationChanged: typing.ClassVar[QtCore.pyqtSignal]
    primaryOrientationChanged: typing.ClassVar[QtCore.pyqtSignal]
    logicalDotsPerInchChanged: typing.ClassVar[QtCore.pyqtSignal]
    physicalDotsPerInchChanged: typing.ClassVar[QtCore.pyqtSignal]
    geometryChanged: typing.ClassVar[QtCore.pyqtSignal]
    def devicePixelRatio(self) -> float: ...
    def refreshRate(self) -> float: ...
    def grabWindow(
        self,
        window: PyQt6.sip.voidptr = ...,
        x: int = ...,
        y: int = ...,
        width: int = ...,
        height: int = ...,
    ) -> QPixmap: ...
    def isLandscape(
        self, orientation: QtCore.Qt.ScreenOrientation
    ) -> bool: ...
    def isPortrait(self, orientation: QtCore.Qt.ScreenOrientation) -> bool: ...
    def mapBetween(
        self,
        a: QtCore.Qt.ScreenOrientation,
        b: QtCore.Qt.ScreenOrientation,
        rect: QtCore.QRect,
    ) -> QtCore.QRect: ...
    def transformBetween(
        self,
        a: QtCore.Qt.ScreenOrientation,
        b: QtCore.Qt.ScreenOrientation,
        target: QtCore.QRect,
    ) -> QTransform: ...
    def angleBetween(
        self, a: QtCore.Qt.ScreenOrientation, b: QtCore.Qt.ScreenOrientation
    ) -> int: ...
    def orientation(self) -> QtCore.Qt.ScreenOrientation: ...
    def primaryOrientation(self) -> QtCore.Qt.ScreenOrientation: ...
    def nativeOrientation(self) -> QtCore.Qt.ScreenOrientation: ...
    def availableVirtualGeometry(self) -> QtCore.QRect: ...
    def availableVirtualSize(self) -> QtCore.QSize: ...
    def virtualGeometry(self) -> QtCore.QRect: ...
    def virtualSize(self) -> QtCore.QSize: ...
    def virtualSiblings(self) -> list[QScreen]: ...
    def availableGeometry(self) -> QtCore.QRect: ...
    def availableSize(self) -> QtCore.QSize: ...
    def logicalDotsPerInch(self) -> float: ...
    def logicalDotsPerInchY(self) -> float: ...
    def logicalDotsPerInchX(self) -> float: ...
    def physicalDotsPerInch(self) -> float: ...
    def physicalDotsPerInchY(self) -> float: ...
    def physicalDotsPerInchX(self) -> float: ...
    def physicalSize(self) -> QtCore.QSizeF: ...
    def geometry(self) -> QtCore.QRect: ...
    def size(self) -> QtCore.QSize: ...
    def depth(self) -> int: ...
    def name(self) -> str: ...

class QSessionManager(QtCore.QObject):
    class RestartHint(enum.Enum):
        RestartIfRunning = ...
        RestartAnyway = ...
        RestartImmediately = ...
        RestartNever = ...

    def requestPhase2(self) -> None: ...
    def isPhase2(self) -> bool: ...
    @typing.overload
    def setManagerProperty(
        self, name: str | None, value: str | None
    ) -> None: ...
    @typing.overload
    def setManagerProperty(
        self, name: str | None, value: collections.abc.Iterable[str | None]
    ) -> None: ...
    def discardCommand(self) -> list[str]: ...
    def setDiscardCommand(
        self, a0: collections.abc.Iterable[str | None]
    ) -> None: ...
    def restartCommand(self) -> list[str]: ...
    def setRestartCommand(
        self, a0: collections.abc.Iterable[str | None]
    ) -> None: ...
    def restartHint(self) -> QSessionManager.RestartHint: ...
    def setRestartHint(self, a0: QSessionManager.RestartHint) -> None: ...
    def cancel(self) -> None: ...
    def release(self) -> None: ...
    def allowsErrorInteraction(self) -> bool: ...
    def allowsInteraction(self) -> bool: ...
    def sessionKey(self) -> str: ...
    def sessionId(self) -> str: ...

class QShortcut(QtCore.QObject):
    @typing.overload
    def __init__(
        self,
        key: QKeySequence.StandardKey,
        parent: QtCore.QObject | None,
        member: PYQT_SLOT = ...,
        ambiguousMember: PYQT_SLOT = ...,
        context: QtCore.Qt.ShortcutContext = ...,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        key: QKeySequence | QKeySequence.StandardKey | str | None | int,
        parent: QtCore.QObject | None,
        member: PYQT_SLOT = ...,
        ambiguousMember: PYQT_SLOT = ...,
        context: QtCore.Qt.ShortcutContext = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, parent: QtCore.QObject | None) -> None: ...
    def event(self, e: QtCore.QEvent | None) -> bool: ...
    def keys(self) -> list[QKeySequence]: ...
    @typing.overload
    def setKeys(
        self,
        keys: collections.abc.Iterable[
            QKeySequence | QKeySequence.StandardKey | str | None | int
        ],
    ) -> None: ...
    @typing.overload
    def setKeys(self, key: QKeySequence.StandardKey) -> None: ...
    activatedAmbiguously: typing.ClassVar[QtCore.pyqtSignal]
    activated: typing.ClassVar[QtCore.pyqtSignal]
    def autoRepeat(self) -> bool: ...
    def setAutoRepeat(self, on: bool) -> None: ...
    def whatsThis(self) -> str: ...
    def setWhatsThis(self, text: str | None) -> None: ...
    def context(self) -> QtCore.Qt.ShortcutContext: ...
    def setContext(self, context: QtCore.Qt.ShortcutContext) -> None: ...
    def isEnabled(self) -> bool: ...
    def setEnabled(self, enable: bool) -> None: ...
    def key(self) -> QKeySequence: ...
    def setKey(
        self, key: QKeySequence | QKeySequence.StandardKey | str | None | int
    ) -> None: ...

class QStandardItemModel(QtCore.QAbstractItemModel):
    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self, rows: int, columns: int, parent: QtCore.QObject | None = ...
    ) -> None: ...

    itemChanged: typing.ClassVar[QtCore.pyqtSignal]
    def roleNames(self) -> dict[int, QtCore.QByteArray]: ...
    def clearItemData(self, index: QtCore.QModelIndex) -> bool: ...
    def setItemRoleNames(
        self,
        roleNames: dict[
            int, QtCore.QByteArray | bytes | bytearray | memoryview
        ],
    ) -> None: ...
    def dropMimeData(
        self,
        data: QtCore.QMimeData | None,
        action: QtCore.Qt.DropAction,
        row: int,
        column: int,
        parent: QtCore.QModelIndex,
    ) -> bool: ...
    def mimeData(
        self, indexes: collections.abc.Iterable[QtCore.QModelIndex]
    ) -> QtCore.QMimeData | None: ...
    def mimeTypes(self) -> list[str]: ...
    def setSortRole(self, role: int) -> None: ...
    def sortRole(self) -> int: ...
    def findItems(
        self,
        text: str | None,
        flags: QtCore.Qt.MatchFlag = ...,
        column: int = ...,
    ) -> list[QStandardItem]: ...
    def setItemPrototype(self, item: QStandardItem | None) -> None: ...
    def itemPrototype(self) -> QStandardItem | None: ...
    def takeVerticalHeaderItem(self, row: int) -> QStandardItem | None: ...
    def takeHorizontalHeaderItem(
        self, column: int
    ) -> QStandardItem | None: ...
    def takeColumn(self, column: int) -> list[QStandardItem]: ...
    def takeRow(self, row: int) -> list[QStandardItem]: ...
    def takeItem(
        self, row: int, column: int = ...
    ) -> QStandardItem | None: ...
    @typing.overload
    def insertColumn(
        self, column: int, items: collections.abc.Iterable[QStandardItem]
    ) -> None: ...
    @typing.overload
    def insertColumn(
        self, column: int, parent: QtCore.QModelIndex = ...
    ) -> bool: ...
    @typing.overload
    def insertRow(
        self, row: int, items: collections.abc.Iterable[QStandardItem]
    ) -> None: ...
    @typing.overload
    def insertRow(self, arow: int, aitem: QStandardItem | None) -> None: ...
    @typing.overload
    def insertRow(
        self, row: int, parent: QtCore.QModelIndex = ...
    ) -> bool: ...
    def appendColumn(
        self, items: collections.abc.Iterable[QStandardItem]
    ) -> None: ...
    @typing.overload
    def appendRow(
        self, items: collections.abc.Iterable[QStandardItem]
    ) -> None: ...
    @typing.overload
    def appendRow(self, aitem: QStandardItem | None) -> None: ...
    def setColumnCount(self, columns: int) -> None: ...
    def setRowCount(self, rows: int) -> None: ...
    def setVerticalHeaderLabels(
        self, labels: collections.abc.Iterable[str | None]
    ) -> None: ...
    def setHorizontalHeaderLabels(
        self, labels: collections.abc.Iterable[str | None]
    ) -> None: ...
    def setVerticalHeaderItem(
        self, row: int, item: QStandardItem | None
    ) -> None: ...
    def verticalHeaderItem(self, row: int) -> QStandardItem | None: ...
    def setHorizontalHeaderItem(
        self, column: int, item: QStandardItem | None
    ) -> None: ...
    def horizontalHeaderItem(self, column: int) -> QStandardItem | None: ...
    def invisibleRootItem(self) -> QStandardItem | None: ...
    @typing.overload
    def setItem(
        self, row: int, column: int, item: QStandardItem | None
    ) -> None: ...
    @typing.overload
    def setItem(self, arow: int, aitem: QStandardItem | None) -> None: ...
    def item(self, row: int, column: int = ...) -> QStandardItem | None: ...
    def indexFromItem(
        self, item: QStandardItem | None
    ) -> QtCore.QModelIndex: ...
    def itemFromIndex(
        self, index: QtCore.QModelIndex
    ) -> QStandardItem | None: ...
    def sort(self, column: int, order: QtCore.Qt.SortOrder = ...) -> None: ...
    def setItemData(
        self, index: QtCore.QModelIndex, roles: dict[int, typing.Any]
    ) -> bool: ...
    def itemData(self, index: QtCore.QModelIndex) -> dict[int, typing.Any]: ...
    def supportedDropActions(self) -> QtCore.Qt.DropAction: ...
    def clear(self) -> None: ...
    def flags(self, index: QtCore.QModelIndex) -> QtCore.Qt.ItemFlag: ...
    def removeColumns(
        self, column: int, count: int, parent: QtCore.QModelIndex = ...
    ) -> bool: ...
    def removeRows(
        self, row: int, count: int, parent: QtCore.QModelIndex = ...
    ) -> bool: ...
    def insertColumns(
        self, column: int, count: int, parent: QtCore.QModelIndex = ...
    ) -> bool: ...
    def insertRows(
        self, row: int, count: int, parent: QtCore.QModelIndex = ...
    ) -> bool: ...
    def setHeaderData(
        self,
        section: int,
        orientation: QtCore.Qt.Orientation,
        value: typing.Any,
        role: int = ...,
    ) -> bool: ...
    def headerData(
        self, section: int, orientation: QtCore.Qt.Orientation, role: int = ...
    ) -> typing.Any: ...
    def setData(
        self, index: QtCore.QModelIndex, value: typing.Any, role: int = ...
    ) -> bool: ...
    def data(
        self, index: QtCore.QModelIndex, role: int = ...
    ) -> typing.Any: ...
    def hasChildren(self, parent: QtCore.QModelIndex = ...) -> bool: ...
    def columnCount(self, parent: QtCore.QModelIndex = ...) -> int: ...
    def rowCount(self, parent: QtCore.QModelIndex = ...) -> int: ...
    @typing.overload
    def parent(self, child: QtCore.QModelIndex) -> QtCore.QModelIndex: ...
    @typing.overload
    def parent(self) -> QtCore.QObject | None: ...
    def index(
        self, row: int, column: int, parent: QtCore.QModelIndex = ...
    ) -> QtCore.QModelIndex: ...

class QStandardItem(PyQt6.sip.wrapper):
    class ItemType(enum.Enum):
        Type = ...
        UserType = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, text: str | None) -> None: ...
    @typing.overload
    def __init__(self, icon: QIcon, text: str | None) -> None: ...
    @typing.overload
    def __init__(self, rows: int, columns: int = ...) -> None: ...
    @typing.overload
    def __init__(self, other: QStandardItem) -> None: ...
    def __ge__(self, other: QStandardItem) -> bool: ...
    def clearData(self) -> None: ...
    def setUserTristate(self, tristate: bool) -> None: ...
    def isUserTristate(self) -> bool: ...
    def setAutoTristate(self, tristate: bool) -> None: ...
    def isAutoTristate(self) -> bool: ...
    def emitDataChanged(self) -> None: ...
    def appendRows(
        self, items: collections.abc.Iterable[QStandardItem]
    ) -> None: ...
    def appendColumn(
        self, items: collections.abc.Iterable[QStandardItem]
    ) -> None: ...
    @typing.overload
    def appendRow(
        self, items: collections.abc.Iterable[QStandardItem]
    ) -> None: ...
    @typing.overload
    def appendRow(self, aitem: QStandardItem | None) -> None: ...
    def setAccessibleDescription(
        self, aaccessibleDescription: str | None
    ) -> None: ...
    def setAccessibleText(self, aaccessibleText: str | None) -> None: ...
    def setCheckState(self, acheckState: QtCore.Qt.CheckState) -> None: ...
    def setForeground(
        self, abrush: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient
    ) -> None: ...
    def setBackground(
        self, abrush: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient
    ) -> None: ...
    def setTextAlignment(
        self, atextAlignment: QtCore.Qt.AlignmentFlag
    ) -> None: ...
    def setFont(self, afont: QFont) -> None: ...
    def setSizeHint(self, asizeHint: QtCore.QSize) -> None: ...
    def setWhatsThis(self, awhatsThis: str | None) -> None: ...
    def setStatusTip(self, astatusTip: str | None) -> None: ...
    def setToolTip(self, atoolTip: str | None) -> None: ...
    def setIcon(self, aicon: QIcon) -> None: ...
    def setText(self, atext: str | None) -> None: ...
    def __lt__(self, other: QStandardItem) -> bool: ...
    def write(self, out: QtCore.QDataStream) -> None: ...
    def read(self, in_: QtCore.QDataStream) -> None: ...
    def type(self) -> int: ...
    def clone(self) -> QStandardItem | None: ...
    def sortChildren(
        self, column: int, order: QtCore.Qt.SortOrder = ...
    ) -> None: ...
    def takeColumn(self, column: int) -> list[QStandardItem]: ...
    def takeRow(self, row: int) -> list[QStandardItem]: ...
    def takeChild(
        self, row: int, column: int = ...
    ) -> QStandardItem | None: ...
    def removeColumns(self, column: int, count: int) -> None: ...
    def removeRows(self, row: int, count: int) -> None: ...
    def removeColumn(self, column: int) -> None: ...
    def removeRow(self, row: int) -> None: ...
    def insertColumns(self, column: int, count: int) -> None: ...
    def insertColumn(
        self, column: int, items: collections.abc.Iterable[QStandardItem]
    ) -> None: ...
    @typing.overload
    def insertRows(self, row: int, count: int) -> None: ...
    @typing.overload
    def insertRows(
        self, row: int, items: collections.abc.Iterable[QStandardItem]
    ) -> None: ...
    @typing.overload
    def insertRow(
        self, row: int, items: collections.abc.Iterable[QStandardItem]
    ) -> None: ...
    @typing.overload
    def insertRow(self, arow: int, aitem: QStandardItem | None) -> None: ...
    @typing.overload
    def setChild(
        self, row: int, column: int, item: QStandardItem | None
    ) -> None: ...
    @typing.overload
    def setChild(self, arow: int, aitem: QStandardItem | None) -> None: ...
    def child(self, row: int, column: int = ...) -> QStandardItem | None: ...
    def hasChildren(self) -> bool: ...
    def setColumnCount(self, columns: int) -> None: ...
    def columnCount(self) -> int: ...
    def setRowCount(self, rows: int) -> None: ...
    def rowCount(self) -> int: ...
    def model(self) -> QStandardItemModel | None: ...
    def index(self) -> QtCore.QModelIndex: ...
    def column(self) -> int: ...
    def row(self) -> int: ...
    def parent(self) -> QStandardItem | None: ...
    def setDropEnabled(self, dropEnabled: bool) -> None: ...
    def isDropEnabled(self) -> bool: ...
    def setDragEnabled(self, dragEnabled: bool) -> None: ...
    def isDragEnabled(self) -> bool: ...
    def setCheckable(self, checkable: bool) -> None: ...
    def isCheckable(self) -> bool: ...
    def setSelectable(self, selectable: bool) -> None: ...
    def isSelectable(self) -> bool: ...
    def setEditable(self, editable: bool) -> None: ...
    def isEditable(self) -> bool: ...
    def setEnabled(self, enabled: bool) -> None: ...
    def isEnabled(self) -> bool: ...
    def setFlags(self, flags: QtCore.Qt.ItemFlag) -> None: ...
    def flags(self) -> QtCore.Qt.ItemFlag: ...
    def accessibleDescription(self) -> str: ...
    def accessibleText(self) -> str: ...
    def checkState(self) -> QtCore.Qt.CheckState: ...
    def foreground(self) -> QBrush: ...
    def background(self) -> QBrush: ...
    def textAlignment(self) -> QtCore.Qt.AlignmentFlag: ...
    def font(self) -> QFont: ...
    def sizeHint(self) -> QtCore.QSize: ...
    def whatsThis(self) -> str: ...
    def statusTip(self) -> str: ...
    def toolTip(self) -> str: ...
    def icon(self) -> QIcon: ...
    def text(self) -> str: ...
    def setData(self, value: typing.Any, role: int = ...) -> None: ...
    def data(self, role: int = ...) -> typing.Any: ...

class QStaticText(PyQt6.sip.simplewrapper):
    class PerformanceHint(enum.Enum):
        ModerateCaching = ...
        AggressiveCaching = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, text: str | None) -> None: ...
    @typing.overload
    def __init__(self, other: QStaticText) -> None: ...
    def swap(self, other: QStaticText) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def performanceHint(self) -> QStaticText.PerformanceHint: ...
    def setPerformanceHint(
        self, performanceHint: QStaticText.PerformanceHint
    ) -> None: ...
    def prepare(self, matrix: QTransform = ..., font: QFont = ...) -> None: ...
    def size(self) -> QtCore.QSizeF: ...
    def textOption(self) -> QTextOption: ...
    def setTextOption(self, textOption: QTextOption) -> None: ...
    def textWidth(self) -> float: ...
    def setTextWidth(self, textWidth: float) -> None: ...
    def textFormat(self) -> QtCore.Qt.TextFormat: ...
    def setTextFormat(self, textFormat: QtCore.Qt.TextFormat) -> None: ...
    def text(self) -> str: ...
    def setText(self, text: str | None) -> None: ...

class QStyleHints(QtCore.QObject):
    contextMenuTriggerChanged: typing.ClassVar[QtCore.pyqtSignal]
    def unsetColorScheme(self) -> None: ...
    def setColorScheme(self, scheme: QtCore.Qt.ColorScheme) -> None: ...
    def setContextMenuTrigger(
        self, contextMenuTrigger: QtCore.Qt.ContextMenuTrigger
    ) -> None: ...
    def contextMenuTrigger(self) -> QtCore.Qt.ContextMenuTrigger: ...
    colorSchemeChanged: typing.ClassVar[QtCore.pyqtSignal]
    def colorScheme(self) -> QtCore.Qt.ColorScheme: ...
    def keyboardAutoRepeatRateF(self) -> float: ...
    def touchDoubleTapDistance(self) -> int: ...
    def mouseDoubleClickDistance(self) -> int: ...
    showShortcutsInContextMenusChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setShowShortcutsInContextMenus(
        self, showShortcutsInContextMenus: bool
    ) -> None: ...
    mouseQuickSelectionThresholdChanged: typing.ClassVar[QtCore.pyqtSignal]
    def mouseQuickSelectionThreshold(self) -> int: ...
    def showShortcutsInContextMenus(self) -> bool: ...
    wheelScrollLinesChanged: typing.ClassVar[QtCore.pyqtSignal]
    def wheelScrollLines(self) -> int: ...
    useHoverEffectsChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setUseHoverEffects(self, useHoverEffects: bool) -> None: ...
    def useHoverEffects(self) -> bool: ...
    def showIsMaximized(self) -> bool: ...
    tabFocusBehaviorChanged: typing.ClassVar[QtCore.pyqtSignal]
    mousePressAndHoldIntervalChanged: typing.ClassVar[QtCore.pyqtSignal]
    startDragTimeChanged: typing.ClassVar[QtCore.pyqtSignal]
    startDragDistanceChanged: typing.ClassVar[QtCore.pyqtSignal]
    mouseDoubleClickIntervalChanged: typing.ClassVar[QtCore.pyqtSignal]
    keyboardInputIntervalChanged: typing.ClassVar[QtCore.pyqtSignal]
    cursorFlashTimeChanged: typing.ClassVar[QtCore.pyqtSignal]
    def singleClickActivation(self) -> bool: ...
    def tabFocusBehavior(self) -> QtCore.Qt.TabFocusBehavior: ...
    def mousePressAndHoldInterval(self) -> int: ...
    def setFocusOnTouchRelease(self) -> bool: ...
    def passwordMaskCharacter(self) -> str: ...
    def useRtlExtensions(self) -> bool: ...
    def fontSmoothingGamma(self) -> float: ...
    def passwordMaskDelay(self) -> int: ...
    def showIsFullScreen(self) -> bool: ...
    def cursorFlashTime(self) -> int: ...
    def keyboardAutoRepeatRate(self) -> int: ...
    def keyboardInputInterval(self) -> int: ...
    def startDragVelocity(self) -> int: ...
    def startDragTime(self) -> int: ...
    def startDragDistance(self) -> int: ...
    def mouseDoubleClickInterval(self) -> int: ...

class QSurfaceFormat(PyQt6.sip.simplewrapper):
    class OpenGLContextProfile(enum.Enum):
        NoProfile = ...
        CoreProfile = ...
        CompatibilityProfile = ...

    class RenderableType(enum.Enum):
        DefaultRenderableType = ...
        OpenGL = ...
        OpenGLES = ...
        OpenVG = ...

    class SwapBehavior(enum.Enum):
        DefaultSwapBehavior = ...
        SingleBuffer = ...
        DoubleBuffer = ...
        TripleBuffer = ...

    class FormatOption(enum.Flag):
        StereoBuffers = ...
        DebugContext = ...
        DeprecatedFunctions = ...
        ResetNotification = ...
        ProtectedContent = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, options: QSurfaceFormat.FormatOption) -> None: ...
    @typing.overload
    def __init__(self, other: QSurfaceFormat) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def setColorSpace(self, colorSpace: QColorSpace) -> None: ...
    def colorSpace(self) -> QColorSpace: ...
    @staticmethod
    def defaultFormat() -> QSurfaceFormat: ...
    @staticmethod
    def setDefaultFormat(format: QSurfaceFormat) -> None: ...
    def setSwapInterval(self, interval: int) -> None: ...
    def swapInterval(self) -> int: ...
    def options(self) -> QSurfaceFormat.FormatOption: ...
    def testOption(self, option: QSurfaceFormat.FormatOption) -> bool: ...
    def setOption(
        self, option: QSurfaceFormat.FormatOption, on: bool = ...
    ) -> None: ...
    def setOptions(self, options: QSurfaceFormat.FormatOption) -> None: ...
    def setVersion(self, major: int, minor: int) -> None: ...
    def version(self) -> tuple[int, int]: ...
    def stereo(self) -> bool: ...
    def setStereo(self, enable: bool) -> None: ...
    def minorVersion(self) -> int: ...
    def setMinorVersion(self, minorVersion: int) -> None: ...
    def majorVersion(self) -> int: ...
    def setMajorVersion(self, majorVersion: int) -> None: ...
    def renderableType(self) -> QSurfaceFormat.RenderableType: ...
    def setRenderableType(
        self, type: QSurfaceFormat.RenderableType
    ) -> None: ...
    def profile(self) -> QSurfaceFormat.OpenGLContextProfile: ...
    def setProfile(
        self, profile: QSurfaceFormat.OpenGLContextProfile
    ) -> None: ...
    def hasAlpha(self) -> bool: ...
    def swapBehavior(self) -> QSurfaceFormat.SwapBehavior: ...
    def setSwapBehavior(
        self, behavior: QSurfaceFormat.SwapBehavior
    ) -> None: ...
    def samples(self) -> int: ...
    def setSamples(self, numSamples: int) -> None: ...
    def alphaBufferSize(self) -> int: ...
    def setAlphaBufferSize(self, size: int) -> None: ...
    def blueBufferSize(self) -> int: ...
    def setBlueBufferSize(self, size: int) -> None: ...
    def greenBufferSize(self) -> int: ...
    def setGreenBufferSize(self, size: int) -> None: ...
    def redBufferSize(self) -> int: ...
    def setRedBufferSize(self, size: int) -> None: ...
    def stencilBufferSize(self) -> int: ...
    def setStencilBufferSize(self, size: int) -> None: ...
    def depthBufferSize(self) -> int: ...
    def setDepthBufferSize(self, size: int) -> None: ...

class QSyntaxHighlighter(QtCore.QObject):
    @typing.overload
    def __init__(self, parent: QTextDocument | None) -> None: ...
    @typing.overload
    def __init__(self, parent: QtCore.QObject | None) -> None: ...
    def currentBlock(self) -> QTextBlock: ...
    def currentBlockUserData(self) -> QTextBlockUserData | None: ...
    def setCurrentBlockUserData(
        self, data: QTextBlockUserData | None
    ) -> None: ...
    def setCurrentBlockState(self, newState: int) -> None: ...
    def currentBlockState(self) -> int: ...
    def previousBlockState(self) -> int: ...
    def format(self, pos: int) -> QTextCharFormat: ...
    @typing.overload
    def setFormat(
        self, start: int, count: int, format: QTextCharFormat
    ) -> None: ...
    @typing.overload
    def setFormat(
        self,
        start: int,
        count: int,
        color: QColor | QtCore.Qt.GlobalColor | int,
    ) -> None: ...
    @typing.overload
    def setFormat(self, start: int, count: int, font: QFont) -> None: ...
    def highlightBlock(self, text: str | None) -> None: ...
    def rehighlightBlock(self, block: QTextBlock) -> None: ...
    def rehighlight(self) -> None: ...
    def document(self) -> QTextDocument | None: ...
    def setDocument(self, doc: QTextDocument | None) -> None: ...

class QTextCursor(PyQt6.sip.simplewrapper):
    class SelectionType(enum.Enum):
        WordUnderCursor = ...
        LineUnderCursor = ...
        BlockUnderCursor = ...
        Document = ...

    class MoveOperation(enum.Enum):
        NoMove = ...
        Start = ...
        Up = ...
        StartOfLine = ...
        StartOfBlock = ...
        StartOfWord = ...
        PreviousBlock = ...
        PreviousCharacter = ...
        PreviousWord = ...
        Left = ...
        WordLeft = ...
        End = ...
        Down = ...
        EndOfLine = ...
        EndOfWord = ...
        EndOfBlock = ...
        NextBlock = ...
        NextCharacter = ...
        NextWord = ...
        Right = ...
        WordRight = ...
        NextCell = ...
        PreviousCell = ...
        NextRow = ...
        PreviousRow = ...

    class MoveMode(enum.Enum):
        MoveAnchor = ...
        KeepAnchor = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, document: QTextDocument | None) -> None: ...
    @typing.overload
    def __init__(self, frame: QTextFrame | None) -> None: ...
    @typing.overload
    def __init__(self, block: QTextBlock) -> None: ...
    @typing.overload
    def __init__(self, cursor: QTextCursor) -> None: ...
    def insertMarkdown(
        self,
        markdown: str | None,
        features: QTextDocument.MarkdownFeature = ...,
    ) -> None: ...
    def swap(self, other: QTextCursor) -> None: ...
    def keepPositionOnInsert(self) -> bool: ...
    def setKeepPositionOnInsert(self, b: bool) -> None: ...
    def verticalMovementX(self) -> int: ...
    def setVerticalMovementX(self, x: int) -> None: ...
    def positionInBlock(self) -> int: ...
    def document(self) -> QTextDocument | None: ...
    def setVisualNavigation(self, b: bool) -> None: ...
    def visualNavigation(self) -> bool: ...
    def isCopyOf(self, other: QTextCursor) -> bool: ...
    def __gt__(self, rhs: QTextCursor) -> bool: ...
    def __ge__(self, rhs: QTextCursor) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __le__(self, rhs: QTextCursor) -> bool: ...
    def __lt__(self, rhs: QTextCursor) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def columnNumber(self) -> int: ...
    def blockNumber(self) -> int: ...
    def endEditBlock(self) -> None: ...
    def joinPreviousEditBlock(self) -> None: ...
    def beginEditBlock(self) -> None: ...
    @typing.overload
    def insertImage(self, format: QTextImageFormat) -> None: ...
    @typing.overload
    def insertImage(
        self, format: QTextImageFormat, alignment: QTextFrameFormat.Position
    ) -> None: ...
    @typing.overload
    def insertImage(self, name: str | None) -> None: ...
    @typing.overload
    def insertImage(self, image: QImage, name: str | None = ...) -> None: ...
    def insertHtml(self, html: str | None) -> None: ...
    def insertFragment(self, fragment: QTextDocumentFragment) -> None: ...
    def currentFrame(self) -> QTextFrame | None: ...
    def insertFrame(self, format: QTextFrameFormat) -> QTextFrame | None: ...
    def currentTable(self) -> QTextTable | None: ...
    @typing.overload
    def insertTable(
        self, rows: int, cols: int, format: QTextTableFormat
    ) -> QTextTable | None: ...
    @typing.overload
    def insertTable(self, rows: int, cols: int) -> QTextTable | None: ...
    def currentList(self) -> QTextList | None: ...
    @typing.overload
    def createList(self, format: QTextListFormat) -> QTextList | None: ...
    @typing.overload
    def createList(self, style: QTextListFormat.Style) -> QTextList | None: ...
    @typing.overload
    def insertList(self, format: QTextListFormat) -> QTextList | None: ...
    @typing.overload
    def insertList(self, style: QTextListFormat.Style) -> QTextList | None: ...
    @typing.overload
    def insertBlock(self) -> None: ...
    @typing.overload
    def insertBlock(self, format: QTextBlockFormat) -> None: ...
    @typing.overload
    def insertBlock(
        self, format: QTextBlockFormat, charFormat: QTextCharFormat
    ) -> None: ...
    def atEnd(self) -> bool: ...
    def atStart(self) -> bool: ...
    def atBlockEnd(self) -> bool: ...
    def atBlockStart(self) -> bool: ...
    def mergeBlockCharFormat(self, modifier: QTextCharFormat) -> None: ...
    def setBlockCharFormat(self, format: QTextCharFormat) -> None: ...
    def blockCharFormat(self) -> QTextCharFormat: ...
    def mergeBlockFormat(self, modifier: QTextBlockFormat) -> None: ...
    def setBlockFormat(self, format: QTextBlockFormat) -> None: ...
    def blockFormat(self) -> QTextBlockFormat: ...
    def mergeCharFormat(self, modifier: QTextCharFormat) -> None: ...
    def setCharFormat(self, format: QTextCharFormat) -> None: ...
    def charFormat(self) -> QTextCharFormat: ...
    def block(self) -> QTextBlock: ...
    def selectedTableCells(
        self,
    ) -> tuple[int | None, int | None, int | None, int | None]: ...
    def selection(self) -> QTextDocumentFragment: ...
    def selectedText(self) -> str: ...
    def selectionEnd(self) -> int: ...
    def selectionStart(self) -> int: ...
    def clearSelection(self) -> None: ...
    def removeSelectedText(self) -> None: ...
    def hasComplexSelection(self) -> bool: ...
    def hasSelection(self) -> bool: ...
    def select(self, selection: QTextCursor.SelectionType) -> None: ...
    def deletePreviousChar(self) -> None: ...
    def deleteChar(self) -> None: ...
    def movePosition(
        self,
        op: QTextCursor.MoveOperation,
        mode: QTextCursor.MoveMode = ...,
        n: int = ...,
    ) -> bool: ...
    @typing.overload
    def insertText(self, text: str | None) -> None: ...
    @typing.overload
    def insertText(
        self, text: str | None, format: QTextCharFormat
    ) -> None: ...
    def anchor(self) -> int: ...
    def position(self) -> int: ...
    def setPosition(
        self, pos: int, mode: QTextCursor.MoveMode = ...
    ) -> None: ...
    def isNull(self) -> bool: ...

class QTextDocument(QtCore.QObject):
    class MarkdownFeature(enum.Flag):
        MarkdownNoHTML = ...
        MarkdownDialectCommonMark = ...
        MarkdownDialectGitHub = ...

    class Stacks(enum.Enum):
        UndoStack = ...
        RedoStack = ...
        UndoAndRedoStacks = ...

    class ResourceType(enum.IntEnum):
        UnknownResource = ...
        HtmlResource = ...
        ImageResource = ...
        StyleSheetResource = ...
        MarkdownResource = ...
        UserResource = ...

    class FindFlag(enum.Flag):
        FindBackward = ...
        FindCaseSensitively = ...
        FindWholeWords = ...

    class MetaInformation(enum.Enum):
        DocumentTitle = ...
        DocumentUrl = ...
        CssMedia = ...
        FrontMatter = ...

    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self, text: str | None, parent: QtCore.QObject | None = ...
    ) -> None: ...
    def isLayoutEnabled(self) -> bool: ...
    def setLayoutEnabled(self, b: bool) -> None: ...
    @staticmethod
    def setDefaultResourceProvider(
        provider: collections.abc.Callable[[QtCore.QUrl], typing.Any],
    ) -> None: ...
    @staticmethod
    def defaultResourceProvider() -> collections.abc.Callable[
        [QtCore.QUrl], typing.Any
    ]: ...
    def setResourceProvider(
        self, provider: collections.abc.Callable[[QtCore.QUrl], typing.Any]
    ) -> None: ...
    def resourceProvider(
        self,
    ) -> collections.abc.Callable[[QtCore.QUrl], typing.Any]: ...
    def baselineOffset(self) -> float: ...
    def setBaselineOffset(self, baseline: float) -> None: ...
    def subScriptBaseline(self) -> float: ...
    def setSubScriptBaseline(self, baseline: float) -> None: ...
    def superScriptBaseline(self) -> float: ...
    def setSuperScriptBaseline(self, baseline: float) -> None: ...
    def setMarkdown(
        self,
        markdown: str | None,
        features: QTextDocument.MarkdownFeature = ...,
    ) -> None: ...
    def toMarkdown(
        self, features: QTextDocument.MarkdownFeature = ...
    ) -> str: ...
    def toRawText(self) -> str: ...
    baseUrlChanged: typing.ClassVar[QtCore.pyqtSignal]
    def setBaseUrl(self, url: QtCore.QUrl) -> None: ...
    def baseUrl(self) -> QtCore.QUrl: ...
    def setDefaultCursorMoveStyle(
        self, style: QtCore.Qt.CursorMoveStyle
    ) -> None: ...
    def defaultCursorMoveStyle(self) -> QtCore.Qt.CursorMoveStyle: ...
    def clearUndoRedoStacks(
        self, stacks: QTextDocument.Stacks = ...
    ) -> None: ...
    def availableRedoSteps(self) -> int: ...
    def availableUndoSteps(self) -> int: ...
    def characterCount(self) -> int: ...
    def lineCount(self) -> int: ...
    def setDocumentMargin(self, margin: float) -> None: ...
    def documentMargin(self) -> float: ...
    def characterAt(self, pos: int) -> str: ...
    documentLayoutChanged: typing.ClassVar[QtCore.pyqtSignal]
    undoCommandAdded: typing.ClassVar[QtCore.pyqtSignal]
    def setIndentWidth(self, width: float) -> None: ...
    def indentWidth(self) -> float: ...
    def lastBlock(self) -> QTextBlock: ...
    def firstBlock(self) -> QTextBlock: ...
    def findBlockByLineNumber(self, blockNumber: int) -> QTextBlock: ...
    def findBlockByNumber(self, blockNumber: int) -> QTextBlock: ...
    def revision(self) -> int: ...
    def setDefaultTextOption(self, option: QTextOption) -> None: ...
    def defaultTextOption(self) -> QTextOption: ...
    def setMaximumBlockCount(self, maximum: int) -> None: ...
    def maximumBlockCount(self) -> int: ...
    def defaultStyleSheet(self) -> str: ...
    def setDefaultStyleSheet(self, sheet: str | None) -> None: ...
    def blockCount(self) -> int: ...
    def size(self) -> QtCore.QSizeF: ...
    def adjustSize(self) -> None: ...
    def idealWidth(self) -> float: ...
    def textWidth(self) -> float: ...
    def setTextWidth(self, width: float) -> None: ...
    def drawContents(
        self, p: QPainter | None, rect: QtCore.QRectF = ...
    ) -> None: ...
    def loadResource(self, type: int, name: QtCore.QUrl) -> typing.Any: ...
    def createObject(self, f: QTextFormat) -> QTextObject | None: ...
    def setModified(self, on: bool = ...) -> None: ...
    @typing.overload
    def redo(self) -> None: ...
    @typing.overload
    def redo(self, cursor: QTextCursor | None) -> None: ...
    @typing.overload
    def undo(self) -> None: ...
    @typing.overload
    def undo(self, cursor: QTextCursor | None) -> None: ...
    undoAvailable: typing.ClassVar[QtCore.pyqtSignal]
    redoAvailable: typing.ClassVar[QtCore.pyqtSignal]
    modificationChanged: typing.ClassVar[QtCore.pyqtSignal]
    cursorPositionChanged: typing.ClassVar[QtCore.pyqtSignal]
    contentsChanged: typing.ClassVar[QtCore.pyqtSignal]
    contentsChange: typing.ClassVar[QtCore.pyqtSignal]
    blockCountChanged: typing.ClassVar[QtCore.pyqtSignal]
    def useDesignMetrics(self) -> bool: ...
    def setUseDesignMetrics(self, b: bool) -> None: ...
    def markContentsDirty(self, from_: int, length: int) -> None: ...
    def allFormats(self) -> list[QTextFormat]: ...
    def addResource(
        self, type: int, name: QtCore.QUrl, resource: typing.Any
    ) -> None: ...
    def resource(self, type: int, name: QtCore.QUrl) -> typing.Any: ...
    def print(self, printer: QPagedPaintDevice | None) -> None: ...
    def isModified(self) -> bool: ...
    def pageCount(self) -> int: ...
    def defaultFont(self) -> QFont: ...
    def setDefaultFont(self, font: QFont) -> None: ...
    def pageSize(self) -> QtCore.QSizeF: ...
    def setPageSize(self, size: QtCore.QSizeF) -> None: ...
    def end(self) -> QTextBlock: ...
    def begin(self) -> QTextBlock: ...
    def findBlock(self, pos: int) -> QTextBlock: ...
    def objectForFormat(self, a0: QTextFormat) -> QTextObject | None: ...
    def object(self, objectIndex: int) -> QTextObject | None: ...
    def rootFrame(self) -> QTextFrame | None: ...
    @typing.overload
    def find(
        self,
        expr: QtCore.QRegularExpression,
        cursor: QTextCursor,
        options: QTextDocument.FindFlag = ...,
    ) -> QTextCursor: ...
    @typing.overload
    def find(
        self,
        expr: QtCore.QRegularExpression,
        position: int = ...,
        options: QTextDocument.FindFlag = ...,
    ) -> QTextCursor: ...
    @typing.overload
    def find(
        self,
        subString: str | None,
        cursor: QTextCursor,
        options: QTextDocument.FindFlag = ...,
    ) -> QTextCursor: ...
    @typing.overload
    def find(
        self,
        subString: str | None,
        position: int = ...,
        options: QTextDocument.FindFlag = ...,
    ) -> QTextCursor: ...
    def setPlainText(self, text: str | None) -> None: ...
    def toPlainText(self) -> str: ...
    def setHtml(self, html: str | None) -> None: ...
    def toHtml(self) -> str: ...
    def metaInformation(self, info: QTextDocument.MetaInformation) -> str: ...
    def setMetaInformation(
        self, info: QTextDocument.MetaInformation, a1: str | None
    ) -> None: ...
    def documentLayout(self) -> QAbstractTextDocumentLayout | None: ...
    def setDocumentLayout(
        self, layout: QAbstractTextDocumentLayout | None
    ) -> None: ...
    def isRedoAvailable(self) -> bool: ...
    def isUndoAvailable(self) -> bool: ...
    def isUndoRedoEnabled(self) -> bool: ...
    def setUndoRedoEnabled(self, enable: bool) -> None: ...
    def clear(self) -> None: ...
    def isEmpty(self) -> bool: ...
    def clone(
        self, parent: QtCore.QObject | None = ...
    ) -> QTextDocument | None: ...

class QTextDocumentFragment(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, document: QTextDocument | None) -> None: ...
    @typing.overload
    def __init__(self, range: QTextCursor) -> None: ...
    @typing.overload
    def __init__(self, rhs: QTextDocumentFragment) -> None: ...
    @staticmethod
    def fromMarkdown(
        markdown: str | None, features: QTextDocument.MarkdownFeature = ...
    ) -> QTextDocumentFragment: ...
    def toMarkdown(
        self, features: QTextDocument.MarkdownFeature = ...
    ) -> str: ...
    def toRawText(self) -> str: ...
    @staticmethod
    def fromHtml(
        html: str | None, resourceProvider: QTextDocument | None = ...
    ) -> QTextDocumentFragment: ...
    @staticmethod
    def fromPlainText(plainText: str | None) -> QTextDocumentFragment: ...
    def toHtml(self) -> str: ...
    def toPlainText(self) -> str: ...
    def isEmpty(self) -> bool: ...

class QTextDocumentWriter(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self,
        device: QtCore.QIODevice | None,
        format: QtCore.QByteArray | bytes | bytearray | memoryview,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        fileName: str | None,
        format: QtCore.QByteArray | bytes | bytearray | memoryview = ...,
    ) -> None: ...
    @staticmethod
    def supportedDocumentFormats() -> list[QtCore.QByteArray]: ...
    @typing.overload
    def write(self, document: QTextDocument | None) -> bool: ...
    @typing.overload
    def write(self, fragment: QTextDocumentFragment) -> bool: ...
    def fileName(self) -> str: ...
    def setFileName(self, fileName: str | None) -> None: ...
    def device(self) -> QtCore.QIODevice | None: ...
    def setDevice(self, device: QtCore.QIODevice | None) -> None: ...
    def format(self) -> QtCore.QByteArray: ...
    def setFormat(
        self, format: QtCore.QByteArray | bytes | bytearray | memoryview
    ) -> None: ...

class QTextLength(PyQt6.sip.simplewrapper):
    class Type(enum.Enum):
        VariableLength = ...
        FixedLength = ...
        PercentageLength = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, atype: QTextLength.Type, avalue: float) -> None: ...
    @typing.overload
    def __init__(self, variant: typing.Any) -> None: ...
    @typing.overload
    def __init__(self, a0: QTextLength) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def rawValue(self) -> float: ...
    def value(self, maximumLength: float) -> float: ...
    def type(self) -> QTextLength.Type: ...

class QTextFormat(PyQt6.sip.simplewrapper):
    class Property(enum.IntEnum):
        ObjectIndex = ...
        CssFloat = ...
        LayoutDirection = ...
        OutlinePen = ...
        BackgroundBrush = ...
        ForegroundBrush = ...
        BlockAlignment = ...
        BlockTopMargin = ...
        BlockBottomMargin = ...
        BlockLeftMargin = ...
        BlockRightMargin = ...
        TextIndent = ...
        BlockIndent = ...
        BlockNonBreakableLines = ...
        BlockTrailingHorizontalRulerWidth = ...
        FontPointSize = ...
        FontSizeAdjustment = ...
        FontSizeIncrement = ...
        FontWeight = ...
        FontItalic = ...
        FontUnderline = ...
        FontOverline = ...
        FontStrikeOut = ...
        FontFixedPitch = ...
        FontPixelSize = ...
        TextUnderlineColor = ...
        TextVerticalAlignment = ...
        TextOutline = ...
        IsAnchor = ...
        AnchorHref = ...
        AnchorName = ...
        ObjectType = ...
        ListStyle = ...
        ListIndent = ...
        FrameBorder = ...
        FrameMargin = ...
        FramePadding = ...
        FrameWidth = ...
        FrameHeight = ...
        TableColumns = ...
        TableColumnWidthConstraints = ...
        TableCellSpacing = ...
        TableCellPadding = ...
        TableCellRowSpan = ...
        TableCellColumnSpan = ...
        ImageName = ...
        ImageWidth = ...
        ImageHeight = ...
        TextUnderlineStyle = ...
        TableHeaderRowCount = ...
        FullWidthSelection = ...
        PageBreakPolicy = ...
        TextToolTip = ...
        FrameTopMargin = ...
        FrameBottomMargin = ...
        FrameLeftMargin = ...
        FrameRightMargin = ...
        FrameBorderBrush = ...
        FrameBorderStyle = ...
        BackgroundImageUrl = ...
        TabPositions = ...
        FirstFontProperty = ...
        FontCapitalization = ...
        FontLetterSpacing = ...
        FontWordSpacing = ...
        LastFontProperty = ...
        TableCellTopPadding = ...
        TableCellBottomPadding = ...
        TableCellLeftPadding = ...
        TableCellRightPadding = ...
        FontStyleHint = ...
        FontStyleStrategy = ...
        FontKerning = ...
        LineHeight = ...
        LineHeightType = ...
        FontHintingPreference = ...
        ListNumberPrefix = ...
        ListNumberSuffix = ...
        FontStretch = ...
        FontLetterSpacingType = ...
        HeadingLevel = ...
        ImageQuality = ...
        FontFamilies = ...
        FontStyleName = ...
        BlockQuoteLevel = ...
        BlockCodeLanguage = ...
        BlockCodeFence = ...
        BlockMarker = ...
        TableBorderCollapse = ...
        TableCellTopBorder = ...
        TableCellBottomBorder = ...
        TableCellLeftBorder = ...
        TableCellRightBorder = ...
        TableCellTopBorderStyle = ...
        TableCellBottomBorderStyle = ...
        TableCellLeftBorderStyle = ...
        TableCellRightBorderStyle = ...
        TableCellTopBorderBrush = ...
        TableCellBottomBorderBrush = ...
        TableCellLeftBorderBrush = ...
        TableCellRightBorderBrush = ...
        ImageTitle = ...
        ImageAltText = ...
        TextSuperScriptBaseline = ...
        TextSubScriptBaseline = ...
        TextBaselineOffset = ...
        OldFontLetterSpacingType = ...
        OldFontStretch = ...
        OldTextUnderlineColor = ...
        OldFontFamily = ...
        ListStart = ...
        ImageMaxWidth = ...
        UserProperty = ...

    class PageBreakFlag(enum.Flag):
        PageBreak_Auto = ...
        PageBreak_AlwaysBefore = ...
        PageBreak_AlwaysAfter = ...

    class ObjectTypes(enum.IntEnum):
        NoObject = ...
        ImageObject = ...
        TableObject = ...
        TableCellObject = ...
        UserObject = ...

    class FormatType(enum.IntEnum):
        InvalidFormat = ...
        BlockFormat = ...
        CharFormat = ...
        ListFormat = ...
        FrameFormat = ...
        UserFormat = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, type: int) -> None: ...
    @typing.overload
    def __init__(self, rhs: QTextFormat) -> None: ...
    @typing.overload
    def __init__(self, variant: typing.Any) -> None: ...
    def isEmpty(self) -> bool: ...
    def swap(self, other: QTextFormat) -> None: ...
    def toTableCellFormat(self) -> QTextTableCellFormat: ...
    def isTableCellFormat(self) -> bool: ...
    def propertyCount(self) -> int: ...
    def setObjectType(self, atype: int) -> None: ...
    def clearForeground(self) -> None: ...
    def foreground(self) -> QBrush: ...
    def setForeground(
        self, brush: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient
    ) -> None: ...
    def clearBackground(self) -> None: ...
    def background(self) -> QBrush: ...
    def setBackground(
        self, brush: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient
    ) -> None: ...
    def layoutDirection(self) -> QtCore.Qt.LayoutDirection: ...
    def setLayoutDirection(
        self, direction: QtCore.Qt.LayoutDirection
    ) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def toImageFormat(self) -> QTextImageFormat: ...
    def toFrameFormat(self) -> QTextFrameFormat: ...
    def toTableFormat(self) -> QTextTableFormat: ...
    def toListFormat(self) -> QTextListFormat: ...
    def toCharFormat(self) -> QTextCharFormat: ...
    def toBlockFormat(self) -> QTextBlockFormat: ...
    def isTableFormat(self) -> bool: ...
    def isImageFormat(self) -> bool: ...
    def isFrameFormat(self) -> bool: ...
    def isListFormat(self) -> bool: ...
    def isBlockFormat(self) -> bool: ...
    def isCharFormat(self) -> bool: ...
    def objectType(self) -> int: ...
    def properties(self) -> dict[int, typing.Any]: ...
    def lengthVectorProperty(self, propertyId: int) -> list[QTextLength]: ...
    def lengthProperty(self, propertyId: int) -> QTextLength: ...
    def brushProperty(self, propertyId: int) -> QBrush: ...
    def penProperty(self, propertyId: int) -> QPen: ...
    def colorProperty(self, propertyId: int) -> QColor: ...
    def stringProperty(self, propertyId: int) -> str: ...
    def doubleProperty(self, propertyId: int) -> float: ...
    def intProperty(self, propertyId: int) -> int: ...
    def boolProperty(self, propertyId: int) -> bool: ...
    def hasProperty(self, propertyId: int) -> bool: ...
    def clearProperty(self, propertyId: int) -> None: ...
    @typing.overload
    def setProperty(
        self, propertyId: int, lengths: collections.abc.Iterable[QTextLength]
    ) -> None: ...
    @typing.overload
    def setProperty(self, propertyId: int, value: typing.Any) -> None: ...
    def property(self, propertyId: int) -> typing.Any: ...
    def setObjectIndex(self, object: int) -> None: ...
    def objectIndex(self) -> int: ...
    def type(self) -> int: ...
    def isValid(self) -> bool: ...
    def merge(self, other: QTextFormat) -> None: ...

class QTextCharFormat(QTextFormat):
    class FontPropertiesInheritanceBehavior(enum.Enum):
        FontPropertiesSpecifiedOnly = ...
        FontPropertiesAll = ...

    class UnderlineStyle(enum.Enum):
        NoUnderline = ...
        SingleUnderline = ...
        DashUnderline = ...
        DotLine = ...
        DashDotLine = ...
        DashDotDotLine = ...
        WaveUnderline = ...
        SpellCheckUnderline = ...

    class VerticalAlignment(enum.Enum):
        AlignNormal = ...
        AlignSuperScript = ...
        AlignSubScript = ...
        AlignMiddle = ...
        AlignTop = ...
        AlignBottom = ...
        AlignBaseline = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QTextCharFormat) -> None: ...
    def baselineOffset(self) -> float: ...
    def setBaselineOffset(self, baseline: float) -> None: ...
    def subScriptBaseline(self) -> float: ...
    def setSubScriptBaseline(self, baseline: float) -> None: ...
    def superScriptBaseline(self) -> float: ...
    def setSuperScriptBaseline(self, baseline: float) -> None: ...
    def fontStyleName(self) -> typing.Any: ...
    def setFontStyleName(self, styleName: str | None) -> None: ...
    def fontFamilies(self) -> typing.Any: ...
    def setFontFamilies(
        self, families: collections.abc.Iterable[str | None]
    ) -> None: ...
    def fontLetterSpacingType(self) -> QFont.SpacingType: ...
    def setFontLetterSpacingType(
        self, letterSpacingType: QFont.SpacingType
    ) -> None: ...
    def setFontStretch(self, factor: int) -> None: ...
    def fontStretch(self) -> int: ...
    def fontHintingPreference(self) -> QFont.HintingPreference: ...
    def setFontHintingPreference(
        self, hintingPreference: QFont.HintingPreference
    ) -> None: ...
    def fontKerning(self) -> bool: ...
    def setFontKerning(self, enable: bool) -> None: ...
    def fontStyleStrategy(self) -> QFont.StyleStrategy: ...
    def fontStyleHint(self) -> QFont.StyleHint: ...
    def setFontStyleStrategy(self, strategy: QFont.StyleStrategy) -> None: ...
    def setFontStyleHint(
        self, hint: QFont.StyleHint, strategy: QFont.StyleStrategy = ...
    ) -> None: ...
    def fontWordSpacing(self) -> float: ...
    def setFontWordSpacing(self, spacing: float) -> None: ...
    def fontLetterSpacing(self) -> float: ...
    def setFontLetterSpacing(self, spacing: float) -> None: ...
    def fontCapitalization(self) -> QFont.Capitalization: ...
    def setFontCapitalization(
        self, capitalization: QFont.Capitalization
    ) -> None: ...
    def anchorNames(self) -> list[str]: ...
    def setAnchorNames(
        self, names: collections.abc.Iterable[str | None]
    ) -> None: ...
    def toolTip(self) -> str: ...
    def setToolTip(self, tip: str | None) -> None: ...
    def underlineStyle(self) -> QTextCharFormat.UnderlineStyle: ...
    def setUnderlineStyle(
        self, style: QTextCharFormat.UnderlineStyle
    ) -> None: ...
    def textOutline(self) -> QPen: ...
    def setTextOutline(
        self, pen: QPen | QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def setTableCellColumnSpan(self, atableCellColumnSpan: int) -> None: ...
    def setTableCellRowSpan(self, atableCellRowSpan: int) -> None: ...
    def tableCellColumnSpan(self) -> int: ...
    def tableCellRowSpan(self) -> int: ...
    def anchorHref(self) -> str: ...
    def setAnchorHref(self, value: str | None) -> None: ...
    def isAnchor(self) -> bool: ...
    def setAnchor(self, anchor: bool) -> None: ...
    def verticalAlignment(self) -> QTextCharFormat.VerticalAlignment: ...
    def setVerticalAlignment(
        self, alignment: QTextCharFormat.VerticalAlignment
    ) -> None: ...
    def fontFixedPitch(self) -> bool: ...
    def setFontFixedPitch(self, fixedPitch: bool) -> None: ...
    def underlineColor(self) -> QColor: ...
    def setUnderlineColor(
        self, color: QColor | QtCore.Qt.GlobalColor | int
    ) -> None: ...
    def fontStrikeOut(self) -> bool: ...
    def setFontStrikeOut(self, strikeOut: bool) -> None: ...
    def fontOverline(self) -> bool: ...
    def setFontOverline(self, overline: bool) -> None: ...
    def fontUnderline(self) -> bool: ...
    def setFontUnderline(self, underline: bool) -> None: ...
    def fontItalic(self) -> bool: ...
    def setFontItalic(self, italic: bool) -> None: ...
    def fontWeight(self) -> int: ...
    def setFontWeight(self, weight: int) -> None: ...
    def fontPointSize(self) -> float: ...
    def setFontPointSize(self, size: float) -> None: ...
    def fontFamily(self) -> str: ...
    def setFontFamily(self, family: str | None) -> None: ...
    def font(self) -> QFont: ...
    def setFont(
        self,
        font: QFont,
        behavior: QTextCharFormat.FontPropertiesInheritanceBehavior = ...,
    ) -> None: ...
    def isValid(self) -> bool: ...

class QTextBlockFormat(QTextFormat):
    class MarkerType(enum.Enum):
        NoMarker = ...
        Unchecked = ...
        Checked = ...

    class LineHeightTypes(enum.Enum):
        SingleHeight = ...
        ProportionalHeight = ...
        FixedHeight = ...
        MinimumHeight = ...
        LineDistanceHeight = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QTextBlockFormat) -> None: ...
    def marker(self) -> QTextBlockFormat.MarkerType: ...
    def setMarker(self, marker: QTextBlockFormat.MarkerType) -> None: ...
    def headingLevel(self) -> int: ...
    def setHeadingLevel(self, alevel: int) -> None: ...
    def lineHeightType(self) -> int: ...
    @typing.overload
    def lineHeight(self) -> float: ...
    @typing.overload
    def lineHeight(
        self, scriptLineHeight: float, scaling: float = ...
    ) -> float: ...
    def setLineHeight(self, height: float, heightType: int) -> None: ...
    def tabPositions(self) -> list[QTextOption.Tab]: ...
    def setTabPositions(
        self, tabs: collections.abc.Iterable[QTextOption.Tab]
    ) -> None: ...
    def pageBreakPolicy(self) -> QTextFormat.PageBreakFlag: ...
    def setPageBreakPolicy(self, flags: QTextFormat.PageBreakFlag) -> None: ...
    def setIndent(self, aindent: int) -> None: ...
    def setAlignment(self, aalignment: QtCore.Qt.AlignmentFlag) -> None: ...
    def nonBreakableLines(self) -> bool: ...
    def setNonBreakableLines(self, b: bool) -> None: ...
    def indent(self) -> int: ...
    def textIndent(self) -> float: ...
    def setTextIndent(self, margin: float) -> None: ...
    def rightMargin(self) -> float: ...
    def setRightMargin(self, margin: float) -> None: ...
    def leftMargin(self) -> float: ...
    def setLeftMargin(self, margin: float) -> None: ...
    def bottomMargin(self) -> float: ...
    def setBottomMargin(self, margin: float) -> None: ...
    def topMargin(self) -> float: ...
    def setTopMargin(self, margin: float) -> None: ...
    def alignment(self) -> QtCore.Qt.AlignmentFlag: ...
    def isValid(self) -> bool: ...

class QTextListFormat(QTextFormat):
    class Style(enum.Enum):
        ListDisc = ...
        ListCircle = ...
        ListSquare = ...
        ListDecimal = ...
        ListLowerAlpha = ...
        ListUpperAlpha = ...
        ListLowerRoman = ...
        ListUpperRoman = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QTextListFormat) -> None: ...
    def start(self) -> int: ...
    def setStart(self, indent: int) -> None: ...
    def setNumberSuffix(self, ns: str | None) -> None: ...
    def setNumberPrefix(self, np: str | None) -> None: ...
    def numberSuffix(self) -> str: ...
    def numberPrefix(self) -> str: ...
    def setIndent(self, aindent: int) -> None: ...
    def setStyle(self, astyle: QTextListFormat.Style) -> None: ...
    def indent(self) -> int: ...
    def style(self) -> QTextListFormat.Style: ...
    def isValid(self) -> bool: ...

class QTextImageFormat(QTextCharFormat):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QTextImageFormat) -> None: ...
    def maximumWidth(self) -> QTextLength: ...
    def setMaximumWidth(self, maxWidth: QTextLength) -> None: ...
    def setQuality(self, quality: int = ...) -> None: ...
    def setHeight(self, aheight: float) -> None: ...
    def setWidth(self, awidth: float) -> None: ...
    def setName(self, aname: str | None) -> None: ...
    def quality(self) -> int: ...
    def height(self) -> float: ...
    def width(self) -> float: ...
    def name(self) -> str: ...
    def isValid(self) -> bool: ...

class QTextFrameFormat(QTextFormat):
    class BorderStyle(enum.Enum):
        BorderStyle_None = ...
        BorderStyle_Dotted = ...
        BorderStyle_Dashed = ...
        BorderStyle_Solid = ...
        BorderStyle_Double = ...
        BorderStyle_DotDash = ...
        BorderStyle_DotDotDash = ...
        BorderStyle_Groove = ...
        BorderStyle_Ridge = ...
        BorderStyle_Inset = ...
        BorderStyle_Outset = ...

    class Position(enum.Enum):
        InFlow = ...
        FloatLeft = ...
        FloatRight = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QTextFrameFormat) -> None: ...
    def setRightMargin(self, amargin: float) -> None: ...
    def setLeftMargin(self, amargin: float) -> None: ...
    def setBottomMargin(self, amargin: float) -> None: ...
    def setTopMargin(self, amargin: float) -> None: ...
    def rightMargin(self) -> float: ...
    def leftMargin(self) -> float: ...
    def bottomMargin(self) -> float: ...
    def topMargin(self) -> float: ...
    def borderStyle(self) -> QTextFrameFormat.BorderStyle: ...
    def setBorderStyle(self, style: QTextFrameFormat.BorderStyle) -> None: ...
    def borderBrush(self) -> QBrush: ...
    def setBorderBrush(
        self, brush: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient
    ) -> None: ...
    def pageBreakPolicy(self) -> QTextFormat.PageBreakFlag: ...
    def setPageBreakPolicy(self, flags: QTextFormat.PageBreakFlag) -> None: ...
    @typing.overload
    def setHeight(self, aheight: float) -> None: ...
    @typing.overload
    def setHeight(self, aheight: QTextLength) -> None: ...
    def setPadding(self, apadding: float) -> None: ...
    def setMargin(self, amargin: float) -> None: ...
    def setBorder(self, aborder: float) -> None: ...
    def height(self) -> QTextLength: ...
    def width(self) -> QTextLength: ...
    @typing.overload
    def setWidth(self, length: QTextLength) -> None: ...
    @typing.overload
    def setWidth(self, awidth: float) -> None: ...
    def padding(self) -> float: ...
    def margin(self) -> float: ...
    def border(self) -> float: ...
    def position(self) -> QTextFrameFormat.Position: ...
    def setPosition(self, f: QTextFrameFormat.Position) -> None: ...
    def isValid(self) -> bool: ...

class QTextTableFormat(QTextFrameFormat):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QTextTableFormat) -> None: ...
    def borderCollapse(self) -> bool: ...
    def setBorderCollapse(self, borderCollapse: bool) -> None: ...
    def headerRowCount(self) -> int: ...
    def setHeaderRowCount(self, count: int) -> None: ...
    def setAlignment(self, aalignment: QtCore.Qt.AlignmentFlag) -> None: ...
    def setCellPadding(self, apadding: float) -> None: ...
    def setColumns(self, acolumns: int) -> None: ...
    def alignment(self) -> QtCore.Qt.AlignmentFlag: ...
    def cellPadding(self) -> float: ...
    def setCellSpacing(self, spacing: float) -> None: ...
    def cellSpacing(self) -> float: ...
    def clearColumnWidthConstraints(self) -> None: ...
    def columnWidthConstraints(self) -> list[QTextLength]: ...
    def setColumnWidthConstraints(
        self, constraints: collections.abc.Iterable[QTextLength]
    ) -> None: ...
    def columns(self) -> int: ...
    def isValid(self) -> bool: ...

class QTextTableCellFormat(QTextCharFormat):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QTextTableCellFormat) -> None: ...
    def setBorderBrush(
        self, brush: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient
    ) -> None: ...
    def rightBorderBrush(self) -> QBrush: ...
    def setRightBorderBrush(
        self, brush: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient
    ) -> None: ...
    def leftBorderBrush(self) -> QBrush: ...
    def setLeftBorderBrush(
        self, brush: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient
    ) -> None: ...
    def bottomBorderBrush(self) -> QBrush: ...
    def setBottomBorderBrush(
        self, brush: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient
    ) -> None: ...
    def topBorderBrush(self) -> QBrush: ...
    def setTopBorderBrush(
        self, brush: QBrush | QColor | QtCore.Qt.GlobalColor | int | QGradient
    ) -> None: ...
    def setBorderStyle(self, style: QTextFrameFormat.BorderStyle) -> None: ...
    def rightBorderStyle(self) -> QTextFrameFormat.BorderStyle: ...
    def setRightBorderStyle(
        self, style: QTextFrameFormat.BorderStyle
    ) -> None: ...
    def leftBorderStyle(self) -> QTextFrameFormat.BorderStyle: ...
    def setLeftBorderStyle(
        self, style: QTextFrameFormat.BorderStyle
    ) -> None: ...
    def bottomBorderStyle(self) -> QTextFrameFormat.BorderStyle: ...
    def setBottomBorderStyle(
        self, style: QTextFrameFormat.BorderStyle
    ) -> None: ...
    def topBorderStyle(self) -> QTextFrameFormat.BorderStyle: ...
    def setTopBorderStyle(
        self, style: QTextFrameFormat.BorderStyle
    ) -> None: ...
    def setBorder(self, width: float) -> None: ...
    def rightBorder(self) -> float: ...
    def setRightBorder(self, width: float) -> None: ...
    def leftBorder(self) -> float: ...
    def setLeftBorder(self, width: float) -> None: ...
    def bottomBorder(self) -> float: ...
    def setBottomBorder(self, width: float) -> None: ...
    def topBorder(self) -> float: ...
    def setTopBorder(self, width: float) -> None: ...
    def setPadding(self, padding: float) -> None: ...
    def rightPadding(self) -> float: ...
    def setRightPadding(self, padding: float) -> None: ...
    def leftPadding(self) -> float: ...
    def setLeftPadding(self, padding: float) -> None: ...
    def bottomPadding(self) -> float: ...
    def setBottomPadding(self, padding: float) -> None: ...
    def topPadding(self) -> float: ...
    def setTopPadding(self, padding: float) -> None: ...
    def isValid(self) -> bool: ...

class QTextInlineObject(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QTextInlineObject) -> None: ...
    def format(self) -> QTextFormat: ...
    def formatIndex(self) -> int: ...
    def textPosition(self) -> int: ...
    def setDescent(self, d: float) -> None: ...
    def setAscent(self, a: float) -> None: ...
    def setWidth(self, w: float) -> None: ...
    def textDirection(self) -> QtCore.Qt.LayoutDirection: ...
    def height(self) -> float: ...
    def descent(self) -> float: ...
    def ascent(self) -> float: ...
    def width(self) -> float: ...
    def rect(self) -> QtCore.QRectF: ...
    def isValid(self) -> bool: ...

class QTextLayout(PyQt6.sip.simplewrapper):
    class GlyphRunRetrievalFlag(enum.Enum):
        RetrieveGlyphIndexes = ...
        RetrieveGlyphPositions = ...
        RetrieveStringIndexes = ...
        RetrieveString = ...
        RetrieveAll = ...

    class CursorMode(enum.Enum):
        SkipCharacters = ...
        SkipWords = ...

    class FormatRange(PyQt6.sip.simplewrapper):
        format: QTextCharFormat = ...
        length: int = ...
        start: int = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: QTextLayout.FormatRange) -> None: ...
        def __ne__(self, other: object) -> bool: ...
        def __eq__(self, other: object) -> bool: ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, text: str | None) -> None: ...
    @typing.overload
    def __init__(
        self,
        text: str | None,
        font: QFont,
        paintdevice: QPaintDevice | None = ...,
    ) -> None: ...
    @typing.overload
    def __init__(self, b: QTextBlock) -> None: ...
    def clearFormats(self) -> None: ...
    def formats(self) -> list[QTextLayout.FormatRange]: ...
    def setFormats(
        self, overrides: collections.abc.Iterable[QTextLayout.FormatRange]
    ) -> None: ...
    @typing.overload
    def glyphRuns(
        self, from_: int = ..., length: int = ...
    ) -> list[QGlyphRun]: ...
    @typing.overload
    def glyphRuns(
        self, from_: int, length: int, flags: QTextLayout.GlyphRunRetrievalFlag
    ) -> list[QGlyphRun]: ...
    def rightCursorPosition(self, oldPos: int) -> int: ...
    def leftCursorPosition(self, oldPos: int) -> int: ...
    def cursorMoveStyle(self) -> QtCore.Qt.CursorMoveStyle: ...
    def setCursorMoveStyle(self, style: QtCore.Qt.CursorMoveStyle) -> None: ...
    def clearLayout(self) -> None: ...
    def maximumWidth(self) -> float: ...
    def minimumWidth(self) -> float: ...
    def boundingRect(self) -> QtCore.QRectF: ...
    def setPosition(self, p: QtCore.QPointF) -> None: ...
    def position(self) -> QtCore.QPointF: ...
    @typing.overload
    def drawCursor(
        self, p: QPainter | None, pos: QtCore.QPointF, cursorPosition: int
    ) -> None: ...
    @typing.overload
    def drawCursor(
        self,
        p: QPainter | None,
        pos: QtCore.QPointF,
        cursorPosition: int,
        width: int,
    ) -> None: ...
    def draw(
        self,
        p: QPainter | None,
        pos: QtCore.QPointF,
        selections: collections.abc.Iterable[QTextLayout.FormatRange] = ...,
        clip: QtCore.QRectF = ...,
    ) -> None: ...
    def previousCursorPosition(
        self, oldPos: int, mode: QTextLayout.CursorMode = ...
    ) -> int: ...
    def nextCursorPosition(
        self, oldPos: int, mode: QTextLayout.CursorMode = ...
    ) -> int: ...
    def isValidCursorPosition(self, pos: int) -> bool: ...
    def lineForTextPosition(self, pos: int) -> QTextLine: ...
    def lineAt(self, i: int) -> QTextLine: ...
    def lineCount(self) -> int: ...
    def createLine(self) -> QTextLine: ...
    def endLayout(self) -> None: ...
    def beginLayout(self) -> None: ...
    def cacheEnabled(self) -> bool: ...
    def setCacheEnabled(self, enable: bool) -> None: ...
    def preeditAreaText(self) -> str: ...
    def preeditAreaPosition(self) -> int: ...
    def setPreeditArea(self, position: int, text: str | None) -> None: ...
    def textOption(self) -> QTextOption: ...
    def setTextOption(self, option: QTextOption) -> None: ...
    def text(self) -> str: ...
    def setText(self, string: str | None) -> None: ...
    def font(self) -> QFont: ...
    def setFont(self, f: QFont) -> None: ...

class QTextLine(PyQt6.sip.simplewrapper):
    class CursorPosition(enum.Enum):
        CursorBetweenCharacters = ...
        CursorOnCharacter = ...

    class Edge(enum.Enum):
        Leading = ...
        Trailing = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QTextLine) -> None: ...
    @typing.overload
    def glyphRuns(
        self, from_: int = ..., length: int = ...
    ) -> list[QGlyphRun]: ...
    @typing.overload
    def glyphRuns(
        self, from_: int, length: int, flags: QTextLayout.GlyphRunRetrievalFlag
    ) -> list[QGlyphRun]: ...
    def horizontalAdvance(self) -> float: ...
    def leadingIncluded(self) -> bool: ...
    def setLeadingIncluded(self, included: bool) -> None: ...
    def leading(self) -> float: ...
    def position(self) -> QtCore.QPointF: ...
    def draw(
        self, painter: QPainter | None, position: QtCore.QPointF
    ) -> None: ...
    def lineNumber(self) -> int: ...
    def textLength(self) -> int: ...
    def textStart(self) -> int: ...
    def setPosition(self, pos: QtCore.QPointF) -> None: ...
    @typing.overload
    def setNumColumns(self, columns: int) -> None: ...
    @typing.overload
    def setNumColumns(self, columns: int, alignmentWidth: float) -> None: ...
    def setLineWidth(self, width: float) -> None: ...
    def xToCursor(
        self, x: float, edge: QTextLine.CursorPosition = ...
    ) -> int: ...
    def cursorToX(
        self, cursorPos: int | None, edge: QTextLine.Edge = ...
    ) -> tuple[float, int | None]: ...
    def naturalTextRect(self) -> QtCore.QRectF: ...
    def naturalTextWidth(self) -> float: ...
    def height(self) -> float: ...
    def descent(self) -> float: ...
    def ascent(self) -> float: ...
    def width(self) -> float: ...
    def y(self) -> float: ...
    def x(self) -> float: ...
    def rect(self) -> QtCore.QRectF: ...
    def isValid(self) -> bool: ...

class QTextObject(QtCore.QObject):
    def __init__(self, doc: QTextDocument | None) -> None: ...
    def objectIndex(self) -> int: ...
    def document(self) -> QTextDocument | None: ...
    def formatIndex(self) -> int: ...
    def format(self) -> QTextFormat: ...
    def setFormat(self, format: QTextFormat) -> None: ...

class QTextBlockGroup(QTextObject):
    def __init__(self, doc: QTextDocument | None) -> None: ...
    def blockList(self) -> list[QTextBlock]: ...
    def blockFormatChanged(self, block: QTextBlock) -> None: ...
    def blockRemoved(self, block: QTextBlock) -> None: ...
    def blockInserted(self, block: QTextBlock) -> None: ...

class QTextList(QTextBlockGroup):
    def __init__(self, doc: QTextDocument | None) -> None: ...
    def setFormat(self, aformat: QTextListFormat) -> None: ...
    def format(self) -> QTextListFormat: ...
    def add(self, block: QTextBlock) -> None: ...
    def remove(self, a0: QTextBlock) -> None: ...
    def removeItem(self, i: int) -> None: ...
    def itemText(self, a0: QTextBlock) -> str: ...
    def itemNumber(self, a0: QTextBlock) -> int: ...
    def item(self, i: int) -> QTextBlock: ...
    def __len__(self) -> int: ...
    def count(self) -> int: ...

class QTextFrame(QTextObject):
    class iterator(PyQt6.sip.simplewrapper):
        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: QTextFrame.iterator) -> None: ...
        def __isub__(self, a0: int) -> typing.Self: ...
        def __iadd__(self, a0: int) -> typing.Self: ...
        def __ne__(self, other: object) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def atEnd(self) -> bool: ...
        def currentBlock(self) -> QTextBlock: ...
        def currentFrame(self) -> QTextFrame | None: ...
        def parentFrame(self) -> QTextFrame | None: ...

    def __init__(self, doc: QTextDocument | None) -> None: ...
    def setFrameFormat(self, aformat: QTextFrameFormat) -> None: ...
    def end(self) -> QTextFrame.iterator: ...
    def begin(self) -> QTextFrame.iterator: ...
    def parentFrame(self) -> QTextFrame | None: ...
    def childFrames(self) -> list[QTextFrame]: ...
    def lastPosition(self) -> int: ...
    def firstPosition(self) -> int: ...
    def lastCursorPosition(self) -> QTextCursor: ...
    def firstCursorPosition(self) -> QTextCursor: ...
    def frameFormat(self) -> QTextFrameFormat: ...

class QTextBlock(PyQt6.sip.wrapper):
    class iterator(PyQt6.sip.simplewrapper):
        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(self, a0: QTextBlock.iterator) -> None: ...
        def __isub__(self, a0: int) -> typing.Self: ...
        def __iadd__(self, a0: int) -> typing.Self: ...
        def __ne__(self, other: object) -> bool: ...
        def __eq__(self, other: object) -> bool: ...
        def atEnd(self) -> bool: ...
        def fragment(self) -> QTextFragment: ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, o: QTextBlock) -> None: ...
    def __ge__(self, o: QTextBlock) -> bool: ...
    def textFormats(self) -> list[QTextLayout.FormatRange]: ...
    def textDirection(self) -> QtCore.Qt.LayoutDirection: ...
    def lineCount(self) -> int: ...
    def setLineCount(self, count: int) -> None: ...
    def firstLineNumber(self) -> int: ...
    def blockNumber(self) -> int: ...
    def setVisible(self, visible: bool) -> None: ...
    def isVisible(self) -> bool: ...
    def setRevision(self, rev: int) -> None: ...
    def revision(self) -> int: ...
    def clearLayout(self) -> None: ...
    def setUserState(self, state: int) -> None: ...
    def userState(self) -> int: ...
    def setUserData(self, data: QTextBlockUserData | None) -> None: ...
    def userData(self) -> QTextBlockUserData | None: ...
    def previous(self) -> QTextBlock: ...
    def next(self) -> QTextBlock: ...
    def end(self) -> QTextBlock.iterator: ...
    def begin(self) -> QTextBlock.iterator: ...
    def textList(self) -> QTextList | None: ...
    def document(self) -> QTextDocument | None: ...
    def text(self) -> str: ...
    def charFormatIndex(self) -> int: ...
    def charFormat(self) -> QTextCharFormat: ...
    def blockFormatIndex(self) -> int: ...
    def blockFormat(self) -> QTextBlockFormat: ...
    def layout(self) -> QTextLayout | None: ...
    def contains(self, position: int) -> bool: ...
    def length(self) -> int: ...
    def position(self) -> int: ...
    def __lt__(self, o: QTextBlock) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def isValid(self) -> bool: ...

class QTextFragment(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, o: QTextFragment) -> None: ...
    def __ge__(self, o: QTextFragment) -> bool: ...
    def glyphRuns(
        self, from_: int = ..., length: int = ...
    ) -> list[QGlyphRun]: ...
    def text(self) -> str: ...
    def charFormatIndex(self) -> int: ...
    def charFormat(self) -> QTextCharFormat: ...
    def contains(self, position: int) -> bool: ...
    def length(self) -> int: ...
    def position(self) -> int: ...
    def __lt__(self, o: QTextFragment) -> bool: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def isValid(self) -> bool: ...

class QTextBlockUserData(PyQt6.sip.wrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QTextBlockUserData) -> None: ...

class QTextOption(PyQt6.sip.simplewrapper):
    class TabType(enum.Enum):
        LeftTab = ...
        RightTab = ...
        CenterTab = ...
        DelimiterTab = ...

    class Flag(enum.Flag):
        IncludeTrailingSpaces = ...
        ShowTabsAndSpaces = ...
        ShowLineAndParagraphSeparators = ...
        AddSpaceForLineAndParagraphSeparators = ...
        SuppressColors = ...
        ShowDocumentTerminator = ...
        ShowDefaultIgnorables = ...
        DisableEmojiParsing = ...

    class WrapMode(enum.Enum):
        NoWrap = ...
        WordWrap = ...
        ManualWrap = ...
        WrapAnywhere = ...
        WrapAtWordBoundaryOrAnywhere = ...

    class Tab(PyQt6.sip.simplewrapper):
        delimiter: str = ...
        position: float = ...
        type: QTextOption.TabType = ...

        @typing.overload
        def __init__(self) -> None: ...
        @typing.overload
        def __init__(
            self, pos: float, tabType: QTextOption.TabType, delim: str = ...
        ) -> None: ...
        @typing.overload
        def __init__(self, a0: QTextOption.Tab) -> None: ...
        def __ne__(self, other: object) -> bool: ...
        def __eq__(self, other: object) -> bool: ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, alignment: QtCore.Qt.AlignmentFlag) -> None: ...
    @typing.overload
    def __init__(self, o: QTextOption) -> None: ...
    def tabStopDistance(self) -> float: ...
    def setTabStopDistance(self, tabStopDistance: float) -> None: ...
    def tabs(self) -> list[QTextOption.Tab]: ...
    def setTabs(
        self, tabStops: collections.abc.Iterable[QTextOption.Tab]
    ) -> None: ...
    def setFlags(self, flags: QTextOption.Flag) -> None: ...
    def setAlignment(self, aalignment: QtCore.Qt.AlignmentFlag) -> None: ...
    def useDesignMetrics(self) -> bool: ...
    def setUseDesignMetrics(self, b: bool) -> None: ...
    def tabArray(self) -> list[float]: ...
    def setTabArray(
        self, tabStops: collections.abc.Iterable[float]
    ) -> None: ...
    def flags(self) -> QTextOption.Flag: ...
    def wrapMode(self) -> QTextOption.WrapMode: ...
    def setWrapMode(self, wrap: QTextOption.WrapMode) -> None: ...
    def textDirection(self) -> QtCore.Qt.LayoutDirection: ...
    def setTextDirection(
        self, aDirection: QtCore.Qt.LayoutDirection
    ) -> None: ...
    def alignment(self) -> QtCore.Qt.AlignmentFlag: ...

class QTextTableCell(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, o: QTextTableCell) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def tableCellFormatIndex(self) -> int: ...
    def lastCursorPosition(self) -> QTextCursor: ...
    def firstCursorPosition(self) -> QTextCursor: ...
    def isValid(self) -> bool: ...
    def columnSpan(self) -> int: ...
    def rowSpan(self) -> int: ...
    def column(self) -> int: ...
    def row(self) -> int: ...
    def setFormat(self, format: QTextCharFormat) -> None: ...
    def format(self) -> QTextCharFormat: ...

class QTextTable(QTextFrame):
    def __init__(self, doc: QTextDocument | None) -> None: ...
    def appendColumns(self, count: int) -> None: ...
    def appendRows(self, count: int) -> None: ...
    def setFormat(self, aformat: QTextTableFormat) -> None: ...
    def format(self) -> QTextTableFormat: ...
    def rowEnd(self, c: QTextCursor) -> QTextCursor: ...
    def rowStart(self, c: QTextCursor) -> QTextCursor: ...
    @typing.overload
    def cellAt(self, row: int, col: int) -> QTextTableCell: ...
    @typing.overload
    def cellAt(self, position: int) -> QTextTableCell: ...
    @typing.overload
    def cellAt(self, c: QTextCursor) -> QTextTableCell: ...
    def columns(self) -> int: ...
    def rows(self) -> int: ...
    def splitCell(
        self, row: int, col: int, numRows: int, numCols: int
    ) -> None: ...
    @typing.overload
    def mergeCells(
        self, row: int, col: int, numRows: int, numCols: int
    ) -> None: ...
    @typing.overload
    def mergeCells(self, cursor: QTextCursor) -> None: ...
    def removeColumns(self, pos: int, num: int) -> None: ...
    def removeRows(self, pos: int, num: int) -> None: ...
    def insertColumns(self, pos: int, num: int) -> None: ...
    def insertRows(self, pos: int, num: int) -> None: ...
    def resize(self, rows: int, cols: int) -> None: ...

class QTransform(PyQt6.sip.simplewrapper):
    class TransformationType(enum.Enum):
        TxNone = ...
        TxTranslate = ...
        TxScale = ...
        TxRotate = ...
        TxShear = ...
        TxProject = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self,
        h11: float,
        h12: float,
        h13: float,
        h21: float,
        h22: float,
        h23: float,
        h31: float,
        h32: float,
        h33: float,
    ) -> None: ...
    @typing.overload
    def __init__(
        self,
        h11: float,
        h12: float,
        h13: float,
        h21: float,
        h22: float,
        h23: float,
    ) -> None: ...
    @typing.overload
    def __init__(self, other: QTransform) -> None: ...
    def __truediv__(self, n: float) -> QTransform: ...
    def __add__(self, n: float) -> QTransform: ...
    def __sub__(self, n: float) -> QTransform: ...
    def __hash__(self) -> int: ...
    def __isub__(self, num: float) -> typing.Self: ...
    def __iadd__(self, num: float) -> typing.Self: ...
    def __itruediv__(self, div: float) -> typing.Self: ...
    @staticmethod
    def fromScale(dx: float, dy: float) -> QTransform: ...
    @staticmethod
    def fromTranslate(dx: float, dy: float) -> QTransform: ...
    def dy(self) -> float: ...
    def dx(self) -> float: ...
    def m33(self) -> float: ...
    def m32(self) -> float: ...
    def m31(self) -> float: ...
    def m23(self) -> float: ...
    def m22(self) -> float: ...
    def m21(self) -> float: ...
    def m13(self) -> float: ...
    def m12(self) -> float: ...
    def m11(self) -> float: ...
    def determinant(self) -> float: ...
    def isTranslating(self) -> bool: ...
    def isRotating(self) -> bool: ...
    def isScaling(self) -> bool: ...
    def isInvertible(self) -> bool: ...
    def isIdentity(self) -> bool: ...
    def isAffine(self) -> bool: ...
    @typing.overload
    def mapRect(self, a0: QtCore.QRect) -> QtCore.QRect: ...
    @typing.overload
    def mapRect(self, a0: QtCore.QRectF) -> QtCore.QRectF: ...
    def mapToPolygon(self, r: QtCore.QRect) -> QPolygon: ...
    @typing.overload
    def map(self, x: int, y: int) -> tuple[int | None, int | None]: ...
    @typing.overload
    def map(self, x: float, y: float) -> tuple[float | None, float | None]: ...
    @typing.overload
    def map(self, p: QtCore.QPoint) -> QtCore.QPoint: ...
    @typing.overload
    def map(self, p: QtCore.QPointF) -> QtCore.QPointF: ...
    @typing.overload
    def map(self, l: QtCore.QLine) -> QtCore.QLine: ...
    @typing.overload
    def map(self, l: QtCore.QLineF) -> QtCore.QLineF: ...
    @typing.overload
    def map(self, a: QPolygonF) -> QPolygonF: ...
    @typing.overload
    def map(self, a: QPolygon) -> QPolygon: ...
    @typing.overload
    def map(self, r: QRegion) -> QRegion: ...
    @typing.overload
    def map(self, p: QPainterPath) -> QPainterPath: ...
    def reset(self) -> None: ...
    def __matmul__(self, o: QTransform) -> QTransform: ...
    @typing.overload
    def __mul__(self, o: QTransform) -> QTransform: ...
    @typing.overload
    def __mul__(self, n: float) -> QTransform: ...
    def __imatmul__(self, a0: QTransform) -> typing.Self: ...
    @typing.overload
    def __imul__(self, a0: QTransform) -> QTransform: ...
    @typing.overload
    def __imul__(self, num: float) -> QTransform: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    @staticmethod
    def quadToQuad(
        one: QPolygonF, two: QPolygonF, result: QTransform
    ) -> bool: ...
    @staticmethod
    def quadToSquare(quad: QPolygonF, result: QTransform) -> bool: ...
    @staticmethod
    def squareToQuad(square: QPolygonF, result: QTransform) -> bool: ...
    @typing.overload
    def rotateRadians(
        self, angle: float, axis: QtCore.Qt.Axis = ...
    ) -> QTransform: ...
    @typing.overload
    def rotateRadians(
        self, a: float, axis: QtCore.Qt.Axis, distanceToPlane: float
    ) -> QTransform: ...
    @typing.overload
    def rotate(
        self, angle: float, axis: QtCore.Qt.Axis = ...
    ) -> QTransform: ...
    @typing.overload
    def rotate(
        self, a: float, axis: QtCore.Qt.Axis, distanceToPlane: float
    ) -> QTransform: ...
    def shear(self, sh: float, sv: float) -> QTransform: ...
    def scale(self, sx: float, sy: float) -> QTransform: ...
    def translate(self, dx: float, dy: float) -> QTransform: ...
    def transposed(self) -> QTransform: ...
    def adjoint(self) -> QTransform: ...
    def inverted(self) -> tuple[QTransform, bool | None]: ...
    def setMatrix(
        self,
        m11: float,
        m12: float,
        m13: float,
        m21: float,
        m22: float,
        m23: float,
        m31: float,
        m32: float,
        m33: float,
    ) -> None: ...
    def type(self) -> QTransform.TransformationType: ...

class QUndoGroup(QtCore.QObject):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...

    undoTextChanged: typing.ClassVar[QtCore.pyqtSignal]
    redoTextChanged: typing.ClassVar[QtCore.pyqtSignal]
    indexChanged: typing.ClassVar[QtCore.pyqtSignal]
    cleanChanged: typing.ClassVar[QtCore.pyqtSignal]
    canUndoChanged: typing.ClassVar[QtCore.pyqtSignal]
    canRedoChanged: typing.ClassVar[QtCore.pyqtSignal]
    activeStackChanged: typing.ClassVar[QtCore.pyqtSignal]
    def undo(self) -> None: ...
    def setActiveStack(self, stack: QUndoStack | None) -> None: ...
    def redo(self) -> None: ...
    def isClean(self) -> bool: ...
    def redoText(self) -> str: ...
    def undoText(self) -> str: ...
    def canRedo(self) -> bool: ...
    def canUndo(self) -> bool: ...
    def createUndoAction(
        self, parent: QtCore.QObject | None, prefix: str | None = ...
    ) -> QAction | None: ...
    def createRedoAction(
        self, parent: QtCore.QObject | None, prefix: str | None = ...
    ) -> QAction | None: ...
    def activeStack(self) -> QUndoStack | None: ...
    def stacks(self) -> list[QUndoStack]: ...
    def removeStack(self, stack: QUndoStack | None) -> None: ...
    def addStack(self, stack: QUndoStack | None) -> None: ...

class QUndoCommand(PyQt6.sip.wrapper):
    @typing.overload
    def __init__(self, parent: QUndoCommand | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self, text: str | None, parent: QUndoCommand | None = ...
    ) -> None: ...
    def setObsolete(self, obsolete: bool) -> None: ...
    def isObsolete(self) -> bool: ...
    def actionText(self) -> str: ...
    def child(self, index: int) -> QUndoCommand | None: ...
    def childCount(self) -> int: ...
    def undo(self) -> None: ...
    def text(self) -> str: ...
    def setText(self, text: str | None) -> None: ...
    def redo(self) -> None: ...
    def mergeWith(self, other: QUndoCommand | None) -> bool: ...
    def id(self) -> int: ...

class QUndoStack(QtCore.QObject):
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    def command(self, index: int) -> QUndoCommand | None: ...
    def undoLimit(self) -> int: ...
    def setUndoLimit(self, limit: int) -> None: ...
    undoTextChanged: typing.ClassVar[QtCore.pyqtSignal]
    redoTextChanged: typing.ClassVar[QtCore.pyqtSignal]
    indexChanged: typing.ClassVar[QtCore.pyqtSignal]
    cleanChanged: typing.ClassVar[QtCore.pyqtSignal]
    canUndoChanged: typing.ClassVar[QtCore.pyqtSignal]
    canRedoChanged: typing.ClassVar[QtCore.pyqtSignal]
    def resetClean(self) -> None: ...
    def undo(self) -> None: ...
    def setIndex(self, idx: int) -> None: ...
    def setClean(self) -> None: ...
    def setActive(self, active: bool = ...) -> None: ...
    def redo(self) -> None: ...
    def endMacro(self) -> None: ...
    def beginMacro(self, text: str | None) -> None: ...
    def cleanIndex(self) -> int: ...
    def isClean(self) -> bool: ...
    def isActive(self) -> bool: ...
    def createRedoAction(
        self, parent: QtCore.QObject | None, prefix: str | None = ...
    ) -> QAction | None: ...
    def createUndoAction(
        self, parent: QtCore.QObject | None, prefix: str | None = ...
    ) -> QAction | None: ...
    def text(self, idx: int) -> str: ...
    def index(self) -> int: ...
    def __len__(self) -> int: ...
    def count(self) -> int: ...
    def redoText(self) -> str: ...
    def undoText(self) -> str: ...
    def canRedo(self) -> bool: ...
    def canUndo(self) -> bool: ...
    def push(self, cmd: QUndoCommand | None) -> None: ...
    def clear(self) -> None: ...

class QValidator(QtCore.QObject):
    class State(enum.Enum):
        Invalid = ...
        Intermediate = ...
        Acceptable = ...

    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...

    changed: typing.ClassVar[QtCore.pyqtSignal]
    def locale(self) -> QtCore.QLocale: ...
    def setLocale(self, locale: QtCore.QLocale) -> None: ...
    def fixup(self, a0: str | None) -> str: ...
    def validate(
        self, a0: str | None, a1: int
    ) -> tuple[QValidator.State, str, int]: ...

class QIntValidator(QValidator):
    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self, bottom: int, top: int, parent: QtCore.QObject | None = ...
    ) -> None: ...
    def top(self) -> int: ...
    def bottom(self) -> int: ...
    def setRange(self, bottom: int, top: int) -> None: ...
    def setTop(self, a0: int) -> None: ...
    def setBottom(self, a0: int) -> None: ...
    def fixup(self, input: str | None) -> str: ...
    def validate(
        self, a0: str | None, a1: int
    ) -> tuple[QValidator.State, str, int]: ...

class QDoubleValidator(QValidator):
    class Notation(enum.Enum):
        StandardNotation = ...
        ScientificNotation = ...

    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self,
        bottom: float,
        top: float,
        decimals: int,
        parent: QtCore.QObject | None = ...,
    ) -> None: ...
    def fixup(self, input: str | None) -> None: ...
    def notation(self) -> QDoubleValidator.Notation: ...
    def setNotation(self, a0: QDoubleValidator.Notation) -> None: ...
    def decimals(self) -> int: ...
    def top(self) -> float: ...
    def bottom(self) -> float: ...
    def setDecimals(self, a0: int) -> None: ...
    def setTop(self, a0: float) -> None: ...
    def setBottom(self, a0: float) -> None: ...
    def setRange(
        self, bottom: float, top: float, decimals: int = ...
    ) -> None: ...
    def validate(
        self, a0: str | None, a1: int
    ) -> tuple[QValidator.State, str, int]: ...

class QRegularExpressionValidator(QValidator):
    @typing.overload
    def __init__(self, parent: QtCore.QObject | None = ...) -> None: ...
    @typing.overload
    def __init__(
        self,
        re: QtCore.QRegularExpression,
        parent: QtCore.QObject | None = ...,
    ) -> None: ...
    def setRegularExpression(self, re: QtCore.QRegularExpression) -> None: ...
    def regularExpression(self) -> QtCore.QRegularExpression: ...
    def validate(
        self, input: str | None, pos: int
    ) -> tuple[QValidator.State, str, int]: ...

class QVector2D(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, xpos: float, ypos: float) -> None: ...
    @typing.overload
    def __init__(self, point: QtCore.QPoint) -> None: ...
    @typing.overload
    def __init__(self, point: QtCore.QPointF) -> None: ...
    @typing.overload
    def __init__(self, vector: QVector3D) -> None: ...
    @typing.overload
    def __init__(self, vector: QVector4D) -> None: ...
    @typing.overload
    def __init__(self, a0: QVector2D) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    @typing.overload
    def __truediv__(self, divisor: QVector2D) -> QVector2D: ...
    @typing.overload
    def __truediv__(self, divisor: float) -> QVector2D: ...
    def __add__(self, v2: QVector2D) -> QVector2D: ...
    def __sub__(self, v2: QVector2D) -> QVector2D: ...
    @typing.overload
    def __mul__(self, v2: QVector2D) -> QVector2D: ...
    @typing.overload
    def __mul__(self, factor: float) -> QVector2D: ...
    def __rmul__(self, factor: float) -> QVector2D: ...
    def __neg__(self) -> QVector2D: ...
    def toPointF(self) -> QtCore.QPointF: ...
    def toPoint(self) -> QtCore.QPoint: ...
    def toVector4D(self) -> QVector4D: ...
    def toVector3D(self) -> QVector3D: ...
    @staticmethod
    def dotProduct(v1: QVector2D, v2: QVector2D) -> float: ...
    @typing.overload
    def __itruediv__(self, divisor: float) -> QVector2D: ...
    @typing.overload
    def __itruediv__(self, vector: QVector2D) -> QVector2D: ...
    @typing.overload
    def __imul__(self, factor: float) -> QVector2D: ...
    @typing.overload
    def __imul__(self, vector: QVector2D) -> QVector2D: ...
    def __isub__(self, vector: QVector2D) -> typing.Self: ...
    def __iadd__(self, vector: QVector2D) -> typing.Self: ...
    def distanceToLine(
        self, point: QVector2D, direction: QVector2D
    ) -> float: ...
    def distanceToPoint(self, point: QVector2D) -> float: ...
    def normalize(self) -> None: ...
    def normalized(self) -> QVector2D: ...
    def lengthSquared(self) -> float: ...
    def length(self) -> float: ...
    def __getitem__(self, i: int) -> float: ...
    def setY(self, y: float) -> None: ...
    def setX(self, x: float) -> None: ...
    def y(self) -> float: ...
    def x(self) -> float: ...
    def isNull(self) -> bool: ...

class QVector3D(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, xpos: float, ypos: float, zpos: float) -> None: ...
    @typing.overload
    def __init__(self, point: QtCore.QPoint) -> None: ...
    @typing.overload
    def __init__(self, point: QtCore.QPointF) -> None: ...
    @typing.overload
    def __init__(self, vector: QVector2D, zpos: float) -> None: ...
    @typing.overload
    def __init__(self, vector: QVector2D) -> None: ...
    @typing.overload
    def __init__(self, vector: QVector4D) -> None: ...
    @typing.overload
    def __init__(self, a0: QVector3D) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    @typing.overload
    def __truediv__(self, divisor: QVector3D) -> QVector3D: ...
    @typing.overload
    def __truediv__(self, divisor: float) -> QVector3D: ...
    def __add__(self, v2: QVector3D) -> QVector3D: ...
    def __sub__(self, v2: QVector3D) -> QVector3D: ...
    @typing.overload
    def __mul__(self, matrix: QMatrix4x4) -> QVector3D: ...
    @typing.overload
    def __mul__(self, v2: QVector3D) -> QVector3D: ...
    @typing.overload
    def __mul__(self, factor: float) -> QVector3D: ...
    def __rmul__(self, factor: float) -> QVector3D: ...
    def __neg__(self) -> QVector3D: ...
    def toPointF(self) -> QtCore.QPointF: ...
    def toPoint(self) -> QtCore.QPoint: ...
    def toVector4D(self) -> QVector4D: ...
    def toVector2D(self) -> QVector2D: ...
    def distanceToLine(
        self, point: QVector3D, direction: QVector3D
    ) -> float: ...
    @typing.overload
    def distanceToPlane(
        self, plane: QVector3D, normal: QVector3D
    ) -> float: ...
    @typing.overload
    def distanceToPlane(
        self, plane1: QVector3D, plane2: QVector3D, plane3: QVector3D
    ) -> float: ...
    def distanceToPoint(self, point: QVector3D) -> float: ...
    def unproject(
        self,
        modelView: QMatrix4x4,
        projection: QMatrix4x4,
        viewport: QtCore.QRect,
    ) -> QVector3D: ...
    def project(
        self,
        modelView: QMatrix4x4,
        projection: QMatrix4x4,
        viewport: QtCore.QRect,
    ) -> QVector3D: ...
    @typing.overload
    @staticmethod
    def normal(v1: QVector3D, v2: QVector3D) -> QVector3D: ...
    @typing.overload
    @staticmethod
    def normal(v1: QVector3D, v2: QVector3D, v3: QVector3D) -> QVector3D: ...
    @staticmethod
    def crossProduct(v1: QVector3D, v2: QVector3D) -> QVector3D: ...
    @staticmethod
    def dotProduct(v1: QVector3D, v2: QVector3D) -> float: ...
    @typing.overload
    def __itruediv__(self, divisor: float) -> QVector3D: ...
    @typing.overload
    def __itruediv__(self, vector: QVector3D) -> QVector3D: ...
    @typing.overload
    def __imul__(self, factor: float) -> QVector3D: ...
    @typing.overload
    def __imul__(self, vector: QVector3D) -> QVector3D: ...
    def __isub__(self, vector: QVector3D) -> typing.Self: ...
    def __iadd__(self, vector: QVector3D) -> typing.Self: ...
    def normalize(self) -> None: ...
    def normalized(self) -> QVector3D: ...
    def lengthSquared(self) -> float: ...
    def length(self) -> float: ...
    def __getitem__(self, i: int) -> float: ...
    def setZ(self, z: float) -> None: ...
    def setY(self, y: float) -> None: ...
    def setX(self, x: float) -> None: ...
    def z(self) -> float: ...
    def y(self) -> float: ...
    def x(self) -> float: ...
    def isNull(self) -> bool: ...

class QVector4D(PyQt6.sip.simplewrapper):
    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(
        self, xpos: float, ypos: float, zpos: float, wpos: float
    ) -> None: ...
    @typing.overload
    def __init__(self, point: QtCore.QPoint) -> None: ...
    @typing.overload
    def __init__(self, point: QtCore.QPointF) -> None: ...
    @typing.overload
    def __init__(self, vector: QVector2D) -> None: ...
    @typing.overload
    def __init__(
        self, vector: QVector2D, zpos: float, wpos: float
    ) -> None: ...
    @typing.overload
    def __init__(self, vector: QVector3D) -> None: ...
    @typing.overload
    def __init__(self, vector: QVector3D, wpos: float) -> None: ...
    @typing.overload
    def __init__(self, a0: QVector4D) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    @typing.overload
    def __truediv__(self, divisor: QVector4D) -> QVector4D: ...
    @typing.overload
    def __truediv__(self, divisor: float) -> QVector4D: ...
    def __add__(self, v2: QVector4D) -> QVector4D: ...
    def __sub__(self, v2: QVector4D) -> QVector4D: ...
    @typing.overload
    def __mul__(self, matrix: QMatrix4x4) -> QVector4D: ...
    @typing.overload
    def __mul__(self, v2: QVector4D) -> QVector4D: ...
    @typing.overload
    def __mul__(self, factor: float) -> QVector4D: ...
    def __rmul__(self, factor: float) -> QVector4D: ...
    def __neg__(self) -> QVector4D: ...
    def toPointF(self) -> QtCore.QPointF: ...
    def toPoint(self) -> QtCore.QPoint: ...
    def toVector3DAffine(self) -> QVector3D: ...
    def toVector3D(self) -> QVector3D: ...
    def toVector2DAffine(self) -> QVector2D: ...
    def toVector2D(self) -> QVector2D: ...
    @staticmethod
    def dotProduct(v1: QVector4D, v2: QVector4D) -> float: ...
    @typing.overload
    def __itruediv__(self, divisor: float) -> QVector4D: ...
    @typing.overload
    def __itruediv__(self, vector: QVector4D) -> QVector4D: ...
    @typing.overload
    def __imul__(self, factor: float) -> QVector4D: ...
    @typing.overload
    def __imul__(self, vector: QVector4D) -> QVector4D: ...
    def __isub__(self, vector: QVector4D) -> typing.Self: ...
    def __iadd__(self, vector: QVector4D) -> typing.Self: ...
    def normalize(self) -> None: ...
    def normalized(self) -> QVector4D: ...
    def lengthSquared(self) -> float: ...
    def length(self) -> float: ...
    def __getitem__(self, i: int) -> float: ...
    def setW(self, w: float) -> None: ...
    def setZ(self, z: float) -> None: ...
    def setY(self, y: float) -> None: ...
    def setX(self, x: float) -> None: ...
    def w(self) -> float: ...
    def z(self) -> float: ...
    def y(self) -> float: ...
    def x(self) -> float: ...
    def isNull(self) -> bool: ...

class QVulkanExtension(PyQt6.sip.simplewrapper):
    name: QtCore.QByteArray | bytes | bytearray | memoryview = ...
    version: int = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QVulkanExtension) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class QVulkanLayer(PyQt6.sip.simplewrapper):
    description: QtCore.QByteArray | bytes | bytearray | memoryview = ...
    name: QtCore.QByteArray | bytes | bytearray | memoryview = ...
    specVersion: QtCore.QVersionNumber = ...
    version: int = ...

    @typing.overload
    def __init__(self) -> None: ...
    @typing.overload
    def __init__(self, a0: QVulkanLayer) -> None: ...
    def __ne__(self, other: object) -> bool: ...
    def __eq__(self, other: object) -> bool: ...
    def __hash__(self) -> int: ...

class QVulkanInstance(PyQt6.sip.simplewrapper):
    def __init__(self) -> None: ...
    @staticmethod
    def surfaceForWindow(
        window: QWindow | None,
    ) -> PyQt6.sip.voidptr | None: ...
    def isValid(self) -> bool: ...
    def destroy(self) -> None: ...
    def create(self) -> bool: ...
    def supportedLayers(self) -> list[QVulkanLayer]: ...
    def supportedExtensions(self) -> list[QVulkanExtension]: ...
    def supportedApiVersion(self) -> QtCore.QVersionNumber: ...
    def setApiVersion(self, vulkanVersion: QtCore.QVersionNumber) -> None: ...
    def apiVersion(self) -> QtCore.QVersionNumber: ...

@typing.overload
def qGray(r: int, g: int, b: int) -> int: ...
@typing.overload
def qGray(rgb: int) -> int: ...
def qRgba(r: int, g: int, b: int, a: int) -> int: ...
def qRgb(r: int, g: int, b: int) -> int: ...
@typing.overload
def qAlpha(rgb: QRgba64) -> int: ...
@typing.overload
def qAlpha(rgb: int) -> int: ...
@typing.overload
def qBlue(rgb: QRgba64) -> int: ...
@typing.overload
def qBlue(rgb: int) -> int: ...
@typing.overload
def qGreen(rgb: QRgba64) -> int: ...
@typing.overload
def qGreen(rgb: int) -> int: ...
@typing.overload
def qRed(rgb: QRgba64) -> int: ...
@typing.overload
def qRed(rgb: int) -> int: ...
@typing.overload
def qUnpremultiply(c: QRgba64) -> QRgba64: ...
@typing.overload
def qUnpremultiply(p: int) -> int: ...
@typing.overload
def qPremultiply(c: QRgba64) -> QRgba64: ...
@typing.overload
def qPremultiply(x: int) -> int: ...
@typing.overload
def qRgba64(r: int, g: int, b: int, a: int) -> QRgba64: ...
@typing.overload
def qRgba64(c: int) -> QRgba64: ...
def qPixelFormatAlpha(
    channelSize: int, typeInterpretation: QPixelFormat.TypeInterpretation = ...
) -> QPixelFormat: ...
def qPixelFormatYuv(
    layout: QPixelFormat.YUVLayout,
    alphaSize: int = ...,
    alphaUsage: QPixelFormat.AlphaUsage = ...,
    alphaPosition: QPixelFormat.AlphaPosition = ...,
    premultiplied: QPixelFormat.AlphaPremultiplied = ...,
    typeInterpretation: QPixelFormat.TypeInterpretation = ...,
    byteOrder: QPixelFormat.ByteOrder = ...,
) -> QPixelFormat: ...
def qPixelFormatHsv(
    channelSize: int,
    alphaSize: int = ...,
    alphaUsage: QPixelFormat.AlphaUsage = ...,
    alphaPosition: QPixelFormat.AlphaPosition = ...,
    typeInterpretation: QPixelFormat.TypeInterpretation = ...,
) -> QPixelFormat: ...
def qPixelFormatHsl(
    channelSize: int,
    alphaSize: int = ...,
    alphaUsage: QPixelFormat.AlphaUsage = ...,
    alphaPosition: QPixelFormat.AlphaPosition = ...,
    typeInterpretation: QPixelFormat.TypeInterpretation = ...,
) -> QPixelFormat: ...
def qPixelFormatCmyk(
    channelSize: int,
    alphaSize: int = ...,
    alphaUsage: QPixelFormat.AlphaUsage = ...,
    alphaPosition: QPixelFormat.AlphaPosition = ...,
    typeInterpretation: QPixelFormat.TypeInterpretation = ...,
) -> QPixelFormat: ...
def qPixelFormatGrayscale(
    channelSize: int, typeInterpretation: QPixelFormat.TypeInterpretation = ...
) -> QPixelFormat: ...
def qPixelFormatRgba(
    red: int,
    green: int,
    blue: int,
    alfa: int,
    usage: QPixelFormat.AlphaUsage,
    position: QPixelFormat.AlphaPosition,
    premultiplied: QPixelFormat.AlphaPremultiplied = ...,
    typeInterpretation: QPixelFormat.TypeInterpretation = ...,
) -> QPixelFormat: ...
@typing.overload
def qFuzzyCompare(m1: QMatrix4x4, m2: QMatrix4x4) -> bool: ...
@typing.overload
def qFuzzyCompare(q1: QQuaternion, q2: QQuaternion) -> bool: ...
@typing.overload
def qFuzzyCompare(t1: QTransform, t2: QTransform) -> bool: ...
@typing.overload
def qFuzzyCompare(v1: QVector4D, v2: QVector4D) -> bool: ...
@typing.overload
def qFuzzyCompare(v1: QVector3D, v2: QVector3D) -> bool: ...
@typing.overload
def qFuzzyCompare(v1: QVector2D, v2: QVector2D) -> bool: ...
def qt_set_sequence_auto_mnemonic(b: bool) -> None: ...
